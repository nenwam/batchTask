{"ast":null,"code":"var _jsxFileName = \"/Users/connor/Documents/batchtask/batchTask/src/modules/ListInputMod.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { TextField, Button, Label, Dropdown, Loader, Divider } from \"monday-ui-react-core\";\nimport mondaySdk from \"monday-sdk-js\";\nimport { useState, useEffect, useRef, useMemo } from \"react\";\nimport List from \"./List\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst monday = mondaySdk();\n// monday.setToken(\"eyJhbGciOiJIUzI1NiJ9.eyJ0aWQiOjI5MTI1MjEwNSwiYWFpIjoxMSwidWlkIjo1MDY1MzM4MSwiaWFkIjoiMjAyMy0xMC0yM1QyMToyNzo1Ni4wMDBaIiwicGVyIjoibWU6d3JpdGUiLCJhY3RpZCI6MTkzNTI3OTYsInJnbiI6InVzZTEifQ.IxSCkDC63caJ9dP_HobxQpVMEWXSJUDi-vcyRozQnKA\");\nmonday.setToken(\"eyJhbGciOiJIUzI1NiJ9.eyJ0aWQiOjI3Mjk5MDQ5NiwiYWFpIjoxMSwidWlkIjozNjI5NTI0NywiaWFkIjoiMjAyMy0wOC0wM1QyMToyMjozNy4wMDBaIiwicGVyIjoibWU6d3JpdGUiLCJhY3RpZCI6MTI3MTA0ODYsInJnbiI6InVzZTEifQ.XIrSWOWgg3U7oRd9zrKzL0WAr8Peo5b4ZIU1vfw0T2w\"); // rally essentials key\nconst storageInstance = monday.storage.instance;\nconst ListInputMod = _ref => {\n  _s();\n  let {\n    dropdownHandler,\n    printerHandler,\n    clickFunction,\n    resetTotalFunction,\n    selectedVal,\n    printerVal,\n    disabledCheck\n  } = _ref;\n  const [context, setContext] = useState();\n  console.log(\"Context from parent: \", context);\n  const [isInitialized, setIsInitialized] = useState(false); // NEW\n  const [listItems, setListItems] = useState([]);\n  const [totalCount, setTotalCount] = useState(0);\n  const [selectedOption, setSelectedOption] = useState({});\n  const [printerColumnValue, setPrinterColumnValue] = useState(\"Loading Printer...\"); // Current value from board\n  const [printerColId, setPrinterColId] = useState(null);\n  const [printerColumnOptions, setPrinterColumnOptions] = useState([]); // NEW: Options for printer dropdown\n  const [selectedPrinterOption, setSelectedPrinterOption] = useState(null); // NEW: Currently selected UI option\n  const [optionSelected, setOptionSelected] = useState(false);\n  const [shouldLoad, setShouldLoad] = useState(false);\n  const [initialShouldLoad, setInitialShouldLoad] = useState(false);\n  const [colOptions, setColOptions] = useState([]);\n  const countRef = useRef();\n  const [multiplier, setMultiplier] = useState(1);\n  useEffect(() => {\n    console.log(\"----App.js UseEffect #1----\");\n    // Notice this method notifies the monday platform that user gains a first value in an app.\n    // Read more about it here: https://developer.monday.com/apps/docs/mondayexecute#value-created-for-user/\n    monday.execute(\"valueCreatedForUser\");\n    monday.listen(\"context\", res => {\n      console.log(\"useEffect storage res: \", res);\n      setContext(res.data);\n\n      // setShouldLoad(true)\n\n      storageInstance.getItem('listItems_' + res.data.itemId).then(result1 => {\n        setListItems(JSON.parse(result1.data.value) || []);\n        return storageInstance.getItem('listItems_' + res.data.itemId);\n      }).then(result2 => {\n        console.log(\"Loading Initial...\");\n        setListItems(JSON.parse(result2.data.value) || []);\n        return storageInstance.getItem('totalCount_' + res.data.itemId);\n      }).then(result3 => {\n        const parsedCount = parseInt(result3.data.value);\n        setTotalCount(parsedCount || 0);\n        return storageInstance.getItem('selectedOption_' /* + res.data.itemId*/);\n      }).then(result4 => {\n        setSelectedOption(JSON.parse(result4.data.value) || []);\n      }).catch(error => {\n        console.log(error);\n        // setShouldLoad(false)\n      }).finally(() => {\n        // setShouldLoad(false)\n      });\n      console.log(\"ListInput: \", context);\n    });\n  }, []);\n  useEffect(() => {\n    if (context) {\n      console.log(\"Parent Context 2\", context);\n      console.log(\"Context: \", context);\n      const boardId = context.boardId;\n      console.log(\"using boardID: \", context.boardId);\n\n      // Query to get all columns first\n      const columnsQuery = `query {\n            boards(ids: ${boardId}) {\n                columns {\n                    id\n                    title\n                    type\n                    settings_str // Also get settings here initially\n                }\n            }\n            }`;\n      monday.api(columnsQuery).then(res => {\n        var _res$data, _res$data$boards, _res$data$boards$;\n        console.log(\"ListInput Columns Res: \", res);\n        if (!((_res$data = res.data) !== null && _res$data !== void 0 && (_res$data$boards = _res$data.boards) !== null && _res$data$boards !== void 0 && (_res$data$boards$ = _res$data$boards[0]) !== null && _res$data$boards$ !== void 0 && _res$data$boards$.columns)) {\n          console.error(\"Error fetching columns: Invalid response structure\", res);\n          setPrinterColumnValue(\"Error: Could not load columns\");\n          // Consider setting an error state for colOptions as well\n          return; // Exit early\n        }\n\n        const columns = res.data.boards[0].columns;\n        console.log(\"Columns: \", columns);\n\n        // Find the 'Printer' column\n        const printerColumn = columns.find(col => col.title.includes(\"Printer\"));\n        if (printerColumn) {\n          setPrinterColId(printerColumn.id);\n          console.log(\"Found Printer column ID:\", printerColumn.id, \"Type:\", printerColumn.type);\n\n          // Parse settings for dropdown options\n          try {\n            const settings = JSON.parse(printerColumn.settings_str);\n            let options = [];\n            // Assuming Status (color) or Dropdown column types\n            if (settings.labels) {\n              // Dropdown uses 'labels' as an object {id: label}\n              options = Object.entries(settings.labels).map(_ref2 => {\n                let [id, label] = _ref2;\n                return {\n                  label: label,\n                  value: label\n                };\n              }); // Use label as value for simplicity? Or ID?\n              // For status/dropdown updates, Monday often uses the LABEL\n            } else if (settings.labels_colors) {\n              // Status uses 'labels_colors' {id: {name: label, ...}}\n              options = Object.values(settings.labels_colors).map(labelObj => ({\n                label: labelObj.name,\n                value: labelObj.name\n              }));\n            } else {\n              console.warn(\"Printer column settings format not recognized for options:\", settings);\n              setPrinterColumnValue(\"Error: Printer column type not supported\");\n            }\n            if (options.length > 0) {\n              setPrinterColumnOptions(options);\n              console.log(\"Printer Column Options: \", options);\n            }\n          } catch (e) {\n            console.error(\"Error parsing printer column settings:\", e, printerColumn.settings_str);\n            setPrinterColumnValue(\"Error: Invalid printer column settings\");\n          }\n        } else {\n          console.error(\"Could not find column named 'Printer'\");\n          setPrinterColumnValue(\"Error: 'Printer' column not found\");\n          setPrinterColumnOptions([]); // Ensure options are empty\n        }\n\n        // Filter for 'numbers' columns for the other dropdown\n        const filter = 'numbers';\n        const cols = columns.map(column => {\n          return {\n            label: column.title,\n            value: column.id,\n            type: column.type\n          };\n        });\n        console.log(\"cols: \", cols);\n        const filteredCols = cols.filter(col => col.type.includes(filter)).map(col => {\n          return {\n            label: col.label,\n            value: col.value\n          };\n        });\n        setColOptions(filteredCols);\n        storageInstance.setItem(`colOptions`, JSON.stringify(cols)).then(res => {\n          console.log(\"colOptions stored in board storage: \", res);\n        });\n      }).catch(err => {\n        console.log(\"Error fetching columns: \", err);\n      }).finally(() => {\n        // setShouldLoad(false)\n      });\n    }\n  }, [context]);\n\n  // NEW\n  // Modified useEffect to fetch existing value AND printer value\n  useEffect(() => {\n    // Ensure all necessary data is present before querying\n    if (selectedOption !== null && selectedOption !== void 0 && selectedOption.value && context && printerColId) {\n      const itemId = context.itemId;\n      const targetColumnId = selectedOption.value;\n      const columnsToFetch = [targetColumnId, printerColId]; // Fetch both target and printer columns\n\n      console.log(`Fetching values for columns: ${columnsToFetch.join(', ')} for item: ${itemId}`);\n\n      // Build the query to get column values\n      const query = `query {\n          items (ids: ${itemId}) {\n            column_values (ids: ${JSON.stringify(columnsToFetch)}) {\n              id\n              value\n              text\n            }\n          }\n        }`;\n      monday.api(query).then(res => {\n        var _res$data2, _res$data2$items;\n        console.log(\"Target/Printer Column Values Response: \", res);\n        if (((_res$data2 = res.data) === null || _res$data2 === void 0 ? void 0 : (_res$data2$items = _res$data2.items) === null || _res$data2$items === void 0 ? void 0 : _res$data2$items.length) > 0 && res.data.items[0].column_values) {\n          const columnValues = res.data.items[0].column_values;\n\n          // Process Target Column (Total Count)\n          const targetColumnData = columnValues.find(cv => cv.id === targetColumnId);\n          if (targetColumnData) {\n            const columnValue = targetColumnData.value;\n            if (columnValue) {\n              let existingCount = 0;\n              try {\n                existingCount = JSON.parse(columnValue);\n              } catch (e) {\n                existingCount = parseInt(columnValue);\n              }\n              if (isNaN(existingCount)) {\n                existingCount = 0;\n              }\n              setTotalCount(existingCount);\n              console.log(\"Fetched Total Count:\", existingCount);\n            } else {\n              setTotalCount(0); // Reset if column is empty\n              console.log(\"Target column is empty, setting total count to 0.\");\n            }\n          } else {\n            setTotalCount(0); // Reset if column data is missing\n            console.warn(\"Target column data not found in response.\");\n          }\n\n          // Process Printer Column\n          const printerColumnData = columnValues.find(cv => cv.id === printerColId);\n          let currentPrinterBoardValue = \"Printer N/A\"; // Default\n          if (printerColumnData) {\n            // Prefer 'text' for dropdowns/status, fallback to 'value'\n            const printerVal = printerColumnData.text || (printerColumnData.value ? JSON.parse(printerColumnData.value) : null);\n            if (printerVal) {\n              currentPrinterBoardValue = printerVal; // Store the fetched value\n              console.log(\"Fetched Printer Value:\", printerVal);\n            } else {\n              console.log(\"Printer column is empty on board.\");\n            }\n            setPrinterColumnValue(currentPrinterBoardValue); // Update the display/truth state\n\n            // Sync the dropdown selection\n            if (printerColumnOptions.length > 0) {\n              const matchingOption = printerColumnOptions.find(opt => opt.label === currentPrinterBoardValue || opt.value === currentPrinterBoardValue);\n              if (matchingOption) {\n                setSelectedPrinterOption(matchingOption);\n                console.log(\"Synced dropdown to:\", matchingOption);\n              } else {\n                setSelectedPrinterOption(null); // No match found\n                console.warn(`Fetched printer value '${currentPrinterBoardValue}' not found in options.`);\n                // Maybe add a placeholder option?\n              }\n            }\n          } else {\n            setPrinterColumnValue(currentPrinterBoardValue); // Set to default \"Printer N/A\"\n            setSelectedPrinterOption(null); // No data, no selection\n            console.warn(\"Printer column data not found in response.\");\n          }\n        } else {\n          console.error(\"No items or column values found in response: \", res);\n          setTotalCount(0);\n          setPrinterColumnValue(\"Error Fetching Data\");\n        }\n      }).catch(err => {\n        console.error(\"Error fetching column values: \", err);\n        setTotalCount(0); // Reset on error\n        setPrinterColumnValue(\"Error Fetching Printer\");\n      }).finally(() => {\n        setIsInitialized(true); // Mark as initialized after attempting fetch\n        console.log(\"Initialization fetch complete.\");\n      });\n    } else if (context && !printerColId) {\n      // Handle case where context is loaded but printerColId hasn't been found yet (e.g., column missing)\n      setIsInitialized(true); // Still initialize, but with error state set in the other useEffect\n    } else if (context && !(selectedOption !== null && selectedOption !== void 0 && selectedOption.value)) {\n      // Handle case where context is loaded but no target column selected\n      setTotalCount(0); // Reset total count if no target selected\n      setIsInitialized(true);\n      console.log(\"No target column selected, initializing total count to 0.\");\n      // We might still want to fetch the printer value if printerColId is known\n      // Add separate fetch logic here or modify query if needed\n    }\n  }, [selectedOption, context, printerColId]); // Add printerColId dependency\n\n  const handleInput = count => {\n    const countAsNum = parseInt(count);\n\n    // Loop to add multiple batches\n    const newItems = [];\n    for (let i = 0; i < multiplier; i++) {\n      // NEW: Loop based on multiplier\n      const totalToAdd = countAsNum; // Each batch will have the same quantity\n      const currentDate = new Date();\n      const currentTime = currentDate.toLocaleTimeString('en-US', {\n        timeStyle: 'short',\n        hour12: true\n      });\n      const uniqueKey = Math.random().toString(36).substr(2, 9);\n      const printerDisplay = printerColumnValue || \"Printer N/A\"; // Use fetched value or default\n      const itemDisplayPos = \"B\" + (listItems.length + (i + 1)) + \" | \" + currentTime + \" - \" + (currentDate.getMonth() + 1) + \"/\" + currentDate.getDate() + \"/\" + currentDate.getFullYear() + \"\\n | \" + printerDisplay;\n      newItems.push({\n        uniqueKey,\n        itemName: itemDisplayPos,\n        itemCount: totalToAdd\n      }); // Create new item for each batch\n    }\n\n    setListItems([...listItems, ...newItems]); // Add all new items at once\n\n    setTotalCount(prevTotalCount => {\n      console.log(\"new total: \", prevTotalCount);\n      return parseInt(prevTotalCount) + countAsNum * multiplier; // Update total count\n    });\n\n    console.log(\"handleInput Option: \", selectedOption);\n  };\n  const handleTotalReset = () => {\n    setTotalCount(0);\n  };\n  const handleOptionsSelection = evt => {\n    setSelectedOption(evt);\n  };\n\n  // NEW: Handler for printer dropdown changes\n  const handlePrinterSelectionChange = selectedOption => {\n    if (!context || !printerColId) return; // Safety check\n\n    setSelectedPrinterOption(selectedOption); // Update UI immediately\n    setPrinterColumnValue(selectedOption.label); // Optimistically update display/truth state\n\n    console.log(`Updating Printer column (${printerColId}) for item ${context.itemId} to:`, selectedOption.label);\n\n    // Use the label for Status/Dropdown updates\n    const valueToSet = JSON.stringify({\n      label: selectedOption.label\n    });\n    const mutation = `mutation {\n          change_column_value (board_id: ${context.boardId}, item_id: ${context.itemId}, column_id: \"${printerColId}\", value: ${valueToSet}) {\n            id\n          }\n        }`;\n    setShouldLoad(true); // Show loader during API call\n    monday.api(mutation).then(res => {\n      console.log(\"Printer column updated successfully: \", res);\n      // Optionally refetch the value to confirm, but the useEffect hook should handle it\n    }).catch(err => {\n      console.error(\"Error updating printer column: \", err);\n      // Revert optimistic update? Show error message?\n      // For now, just log the error. Consider fetching the value again to reset.\n      storageInstance.getItem(); // This seems wrong, maybe refetch from board?\n    }).finally(() => {\n      setShouldLoad(false);\n    });\n  };\n  const handleItemDelete = (itemName, itemCount, isChecked) => {\n    setListItems(prevListItems => {\n      const newListItems = prevListItems.filter(item => item.itemName !== itemName);\n      prevListItems.map(item => console.log(item.itemName));\n      // Update localStorage to store the new list items\n      console.log(\"New Items\", itemName);\n      return newListItems;\n    });\n    setTotalCount(prevTotalCount => {\n      let newTotalCount;\n      if (!isChecked) {\n        newTotalCount = prevTotalCount - parseInt(itemCount);\n      } else {\n        newTotalCount = prevTotalCount;\n      }\n      // Update localStorage to store the new total count\n      return newTotalCount;\n    });\n  };\n  const changeTotalCount = (isChecked, itemCount) => {\n    console.log(\"isChecked type: \", typeof isChecked);\n    console.log(\"itemCount type: \", typeof itemCount);\n    setTotalCount(prevTotalCount => {\n      if (isChecked) {\n        return parseInt(prevTotalCount) - parseInt(itemCount);\n      } else {\n        return parseInt(prevTotalCount) + parseInt(itemCount);\n      }\n    });\n    console.log(\"changeTotal Option: \", selectedOption);\n  };\n  useEffect(() => {\n    console.log(\"----App.js UseEffect #3----\");\n    if (context) {\n      console.log(\"Context: \", context);\n      setShouldLoad(true);\n      storageInstance.setItem('listItems_' + context.itemId, JSON.stringify(listItems)).catch(error => {\n        console.log(error);\n        setShouldLoad(false);\n      }).finally(() => {\n        console.log(\"Loading...\");\n        setTimeout(() => {\n          setShouldLoad(false);\n        }, 1000);\n      });\n    }\n  }, [listItems]);\n  useEffect(() => {\n    if (isInitialized) {\n      if (context) {\n        // setShouldLoad(true)\n        storageInstance.setItem('totalCount_' + context.itemId, totalCount.toString()).catch(error => {\n          console.log(error);\n          // setShouldLoad(false)\n        }).finally(() => {\n          // setShouldLoad(false)\n        });\n      }\n      if (selectedOption && context && totalCount != null) {\n        console.log(\"Inner Context: \", selectedOption);\n        const boardId = context.boardId;\n        console.log(\"using boardID: \", boardId);\n        const query = `mutation {\n              change_simple_column_value (board_id: ${boardId}, item_id: ${context.itemId}, column_id: \"${selectedOption.value}\", value: \"${JSON.stringify(totalCount)}\") {\n                id\n              }\n            }`;\n        monday.api(query).then(res => {\n          console.log(\"Column updated successfully: \", res, \"with \", totalCount);\n        }).catch(err => {\n          console.log(\"Error updating column: \", err);\n        });\n      }\n    }\n  }, [totalCount, isInitialized]);\n\n  // Update selectedOption in the board storage when it changes\n  useEffect(() => {\n    console.log(\"----App.js UseEffect #5----\");\n    if (context) {\n      console.log(\"Context: \", context);\n      //   setShouldLoad(true)\n      storageInstance.setItem('selectedOption_' /* + context.itemId*/, JSON.stringify(selectedOption)).catch(error => {\n        console.log(error);\n        setShouldLoad(false);\n      }).finally(() => {\n        // setShouldLoad(false)\n      });\n      console.log(\"Option: \", selectedOption.value);\n    }\n  }, [selectedOption]);\n  const handleClick = () => {\n    const countVal = parseInt(countRef.current.value);\n    handleInput(countVal);\n  };\n  const handleDeductClick = () => {\n    const countVal = parseInt(countRef.current.value);\n    handleInput(-countVal);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [console.log(\"Loading Remount\"), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row pb-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-3\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleTotalReset,\n          size: Button.sizes.SMALL,\n          color: Button.colors.NEGATIVE,\n          children: \"Reset Total\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 473,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 472,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-6 d-flex align-items-end\",\n        children: shouldLoad ? /*#__PURE__*/_jsxDEV(Loader, {\n          size: Loader.sizes.SMALL\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 476,\n          columnNumber: 36\n        }, this) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 475,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-3\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-end\",\n          style: {\n            color: \"grey\"\n          },\n          children: \"Version 3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 479,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 478,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 471,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          style: {\n            fontSize: \"1rem\"\n          },\n          children: \"Total Batches\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 484,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col\",\n            children: /*#__PURE__*/_jsxDEV(Label, {\n              text: totalCount\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 490,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 489,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 485,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 483,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 494,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          style: {\n            fontSize: \"1rem\"\n          },\n          children: \"Output Column\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 498,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Dropdown, {\n          placeholder: \"Target column\",\n          onChange: evt => handleOptionsSelection(evt),\n          options: colOptions,\n          value: selectedOption\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 499,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 497,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 482,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row pt-4 pb-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-4 d-flex align-items-end\",\n        children: /*#__PURE__*/_jsxDEV(Dropdown, {\n          placeholder: \"Select Printer...\",\n          options: printerColumnOptions,\n          value: selectedPrinterOption,\n          onChange: handlePrinterSelectionChange,\n          size: Dropdown.size.SMALL // Match button size?\n          ,\n          className: \"w-100\" // Make dropdown take full column width\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 504,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 503,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col d-flex align-items-end\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              marginBottom: '4px'\n            },\n            children: \"Multiplier\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 515,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            type: \"number\",\n            value: multiplier,\n            onChange: e => setMultiplier(parseInt(e) || 1),\n            placeholder: \"Multiplier\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 516,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 514,\n          columnNumber: 19\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 513,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col d-flex align-items-end\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              marginBottom: '4px'\n            },\n            children: \"Quantity\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 521,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            ref: countRef,\n            type: \"number\",\n            value: \"0\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 522,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 520,\n          columnNumber: 20\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 519,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-1 d-flex align-items-end\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            disabled: shouldLoad ? true : false,\n            onClick: handleClick,\n            size: Button.sizes.SMALL,\n            color: Button.colors.POSITIVE,\n            children: \"Add\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 527,\n            columnNumber: 22\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 526,\n          columnNumber: 20\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 525,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col d-flex align-items-end\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          disabled: shouldLoad ? true : false,\n          onClick: handleDeductClick,\n          size: Button.sizes.SMALL,\n          color: Button.colors.NEGATIVE,\n          children: \"Deduct\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 531,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 530,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 502,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 534,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col-12\",\n      children: /*#__PURE__*/_jsxDEV(List, {\n        items: listItems,\n        handleDelete: handleItemDelete\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 536,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 535,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 469,\n    columnNumber: 9\n  }, this);\n};\n_s(ListInputMod, \"vcZjL7Qb6aApcHuqvd0lkSB5VCo=\");\n_c = ListInputMod;\nexport default ListInputMod;\nvar _c;\n$RefreshReg$(_c, \"ListInputMod\");","map":{"version":3,"names":["React","TextField","Button","Label","Dropdown","Loader","Divider","mondaySdk","useState","useEffect","useRef","useMemo","List","jsxDEV","_jsxDEV","monday","setToken","storageInstance","storage","instance","ListInputMod","_ref","_s","dropdownHandler","printerHandler","clickFunction","resetTotalFunction","selectedVal","printerVal","disabledCheck","context","setContext","console","log","isInitialized","setIsInitialized","listItems","setListItems","totalCount","setTotalCount","selectedOption","setSelectedOption","printerColumnValue","setPrinterColumnValue","printerColId","setPrinterColId","printerColumnOptions","setPrinterColumnOptions","selectedPrinterOption","setSelectedPrinterOption","optionSelected","setOptionSelected","shouldLoad","setShouldLoad","initialShouldLoad","setInitialShouldLoad","colOptions","setColOptions","countRef","multiplier","setMultiplier","execute","listen","res","data","getItem","itemId","then","result1","JSON","parse","value","result2","result3","parsedCount","parseInt","result4","catch","error","finally","boardId","columnsQuery","api","_res$data","_res$data$boards","_res$data$boards$","boards","columns","printerColumn","find","col","title","includes","id","type","settings","settings_str","options","labels","Object","entries","map","_ref2","label","labels_colors","values","labelObj","name","warn","length","e","filter","cols","column","filteredCols","setItem","stringify","err","targetColumnId","columnsToFetch","join","query","_res$data2","_res$data2$items","items","column_values","columnValues","targetColumnData","cv","columnValue","existingCount","isNaN","printerColumnData","currentPrinterBoardValue","text","matchingOption","opt","handleInput","count","countAsNum","newItems","i","totalToAdd","currentDate","Date","currentTime","toLocaleTimeString","timeStyle","hour12","uniqueKey","Math","random","toString","substr","printerDisplay","itemDisplayPos","getMonth","getDate","getFullYear","push","itemName","itemCount","prevTotalCount","handleTotalReset","handleOptionsSelection","evt","handlePrinterSelectionChange","valueToSet","mutation","handleItemDelete","isChecked","prevListItems","newListItems","item","newTotalCount","changeTotalCount","setTimeout","handleClick","countVal","current","handleDeductClick","className","children","onClick","size","sizes","SMALL","color","colors","NEGATIVE","fileName","_jsxFileName","lineNumber","columnNumber","style","fontSize","placeholder","onChange","marginBottom","ref","disabled","POSITIVE","handleDelete","_c","$RefreshReg$"],"sources":["/Users/connor/Documents/batchtask/batchTask/src/modules/ListInputMod.js"],"sourcesContent":["import React from \"react\";\nimport { TextField, Button, Label, Dropdown, Loader, Divider } from \"monday-ui-react-core\"\nimport mondaySdk from \"monday-sdk-js\";\nimport { useState, useEffect, useRef, useMemo } from \"react\";\nimport List from \"./List\"\n\nconst monday = mondaySdk();\n// monday.setToken(\"eyJhbGciOiJIUzI1NiJ9.eyJ0aWQiOjI5MTI1MjEwNSwiYWFpIjoxMSwidWlkIjo1MDY1MzM4MSwiaWFkIjoiMjAyMy0xMC0yM1QyMToyNzo1Ni4wMDBaIiwicGVyIjoibWU6d3JpdGUiLCJhY3RpZCI6MTkzNTI3OTYsInJnbiI6InVzZTEifQ.IxSCkDC63caJ9dP_HobxQpVMEWXSJUDi-vcyRozQnKA\");\nmonday.setToken(\"eyJhbGciOiJIUzI1NiJ9.eyJ0aWQiOjI3Mjk5MDQ5NiwiYWFpIjoxMSwidWlkIjozNjI5NTI0NywiaWFkIjoiMjAyMy0wOC0wM1QyMToyMjozNy4wMDBaIiwicGVyIjoibWU6d3JpdGUiLCJhY3RpZCI6MTI3MTA0ODYsInJnbiI6InVzZTEifQ.XIrSWOWgg3U7oRd9zrKzL0WAr8Peo5b4ZIU1vfw0T2w\") // rally essentials key\nconst storageInstance = monday.storage.instance;\n\nconst ListInputMod = ({dropdownHandler, printerHandler, clickFunction, resetTotalFunction, selectedVal, printerVal, disabledCheck}) => {\n    const [context, setContext] = useState()\n    console.log(\"Context from parent: \", context)\n    const [isInitialized, setIsInitialized] = useState(false); // NEW\n    const [listItems, setListItems] = useState([]);\n    const [totalCount, setTotalCount] = useState(0);\n    const [selectedOption, setSelectedOption] = useState({});\n    const [printerColumnValue, setPrinterColumnValue] = useState(\"Loading Printer...\"); // Current value from board\n    const [printerColId, setPrinterColId] = useState(null);\n    const [printerColumnOptions, setPrinterColumnOptions] = useState([]); // NEW: Options for printer dropdown\n    const [selectedPrinterOption, setSelectedPrinterOption] = useState(null); // NEW: Currently selected UI option\n    const [optionSelected, setOptionSelected] = useState(false);\n    const [shouldLoad, setShouldLoad] = useState(false);\n    const [initialShouldLoad, setInitialShouldLoad] = useState(false);\n    const [colOptions, setColOptions] = useState([])\n    const countRef = useRef();\n    const [multiplier, setMultiplier] = useState(1);\n\n    useEffect(() => {\n        console.log(\"----App.js UseEffect #1----\")\n        // Notice this method notifies the monday platform that user gains a first value in an app.\n        // Read more about it here: https://developer.monday.com/apps/docs/mondayexecute#value-created-for-user/\n        monday.execute(\"valueCreatedForUser\");\n    \n        monday.listen(\"context\", (res) => {\n          console.log(\"useEffect storage res: \", res)\n          setContext(res.data);\n    \n          // setShouldLoad(true)\n    \n          storageInstance.getItem('listItems_' + res.data.itemId).then(result1 => {\n            setListItems(JSON.parse(result1.data.value) || []);  \n            return storageInstance.getItem('listItems_' + res.data.itemId)\n          }).then(result2 => {\n            console.log(\"Loading Initial...\")\n            setListItems(JSON.parse(result2.data.value) || []);\n            return storageInstance.getItem('totalCount_' + res.data.itemId)\n          }).then(result3 => {\n            const parsedCount = parseInt(result3.data.value)\n            setTotalCount(parsedCount || 0);\n            return storageInstance.getItem('selectedOption_'/* + res.data.itemId*/)\n          }).then(result4 => { \n            setSelectedOption(JSON.parse(result4.data.value) || []);\n          }).catch(error => { \n            console.log(error)\n            // setShouldLoad(false)\n          }).finally(() => { \n            // setShouldLoad(false)\n          })\n\n        console.log(\"ListInput: \", context)\n    \n        });\n    \n        \n      }, []);\n\n      useEffect(() => {\n        if (context) {\n          console.log(\"Parent Context 2\", context)\n\n            console.log(\"Context: \", context)\n            const boardId = context.boardId;\n            console.log(\"using boardID: \", context.boardId)\n            \n            // Query to get all columns first\n            const columnsQuery = `query {\n            boards(ids: ${boardId}) {\n                columns {\n                    id\n                    title\n                    type\n                    settings_str // Also get settings here initially\n                }\n            }\n            }`;\n            monday.api(columnsQuery).then((res) => {\n                console.log(\"ListInput Columns Res: \", res);\n                if (!res.data?.boards?.[0]?.columns) {\n                    console.error(\"Error fetching columns: Invalid response structure\", res);\n                    setPrinterColumnValue(\"Error: Could not load columns\");\n                    // Consider setting an error state for colOptions as well\n                    return; // Exit early\n                }\n                const columns = res.data.boards[0].columns;\n                console.log(\"Columns: \", columns);\n\n                // Find the 'Printer' column\n                const printerColumn = columns.find(col => col.title.includes(\"Printer\"));\n                if (printerColumn) {\n                  setPrinterColId(printerColumn.id);\n                  console.log(\"Found Printer column ID:\", printerColumn.id, \"Type:\", printerColumn.type);\n\n                  // Parse settings for dropdown options\n                  try {\n                      const settings = JSON.parse(printerColumn.settings_str);\n                      let options = [];\n                      // Assuming Status (color) or Dropdown column types\n                      if (settings.labels) { // Dropdown uses 'labels' as an object {id: label}\n                         options = Object.entries(settings.labels).map(([id, label]) => ({ label: label, value: label })); // Use label as value for simplicity? Or ID?\n                         // For status/dropdown updates, Monday often uses the LABEL\n                      } else if (settings.labels_colors) { // Status uses 'labels_colors' {id: {name: label, ...}}\n                         options = Object.values(settings.labels_colors).map(labelObj => ({ label: labelObj.name, value: labelObj.name }));\n                      }\n                      else {\n                        console.warn(\"Printer column settings format not recognized for options:\", settings);\n                        setPrinterColumnValue(\"Error: Printer column type not supported\");\n                      }\n\n                      if(options.length > 0) {\n                        setPrinterColumnOptions(options);\n                        console.log(\"Printer Column Options: \", options);\n                      }\n\n                  } catch (e) {\n                      console.error(\"Error parsing printer column settings:\", e, printerColumn.settings_str);\n                      setPrinterColumnValue(\"Error: Invalid printer column settings\");\n                  }\n                } else {\n                  console.error(\"Could not find column named 'Printer'\");\n                  setPrinterColumnValue(\"Error: 'Printer' column not found\");\n                  setPrinterColumnOptions([]); // Ensure options are empty\n                }\n\n                // Filter for 'numbers' columns for the other dropdown\n                const filter = 'numbers'\n                const cols = columns.map(column => {                      \n                    return {label: column.title, value: column.id, type: column.type}\n                })\n                console.log(\"cols: \", cols)\n                const filteredCols = cols\n                .filter(col => col.type.includes(filter))\n                .map(col => {\n                    return {label: col.label, value: col.value}\n                })\n                setColOptions(filteredCols)\n                storageInstance.setItem(`colOptions`, JSON.stringify(cols)).then((res) => {\n                    console.log(\"colOptions stored in board storage: \", res);\n                })\n            }).catch((err) => {\n                console.log(\"Error fetching columns: \", err);\n            }).finally(() => {\n                // setShouldLoad(false)\n            });\n        }\n        \n      }, [context])\n\n    // NEW\n    // Modified useEffect to fetch existing value AND printer value\n    useEffect(() => {\n      // Ensure all necessary data is present before querying\n      if (selectedOption?.value && context && printerColId) {\n        const itemId = context.itemId;\n        const targetColumnId = selectedOption.value;\n        const columnsToFetch = [targetColumnId, printerColId]; // Fetch both target and printer columns\n\n        console.log(`Fetching values for columns: ${columnsToFetch.join(', ')} for item: ${itemId}`);\n\n        // Build the query to get column values\n        const query = `query {\n          items (ids: ${itemId}) {\n            column_values (ids: ${JSON.stringify(columnsToFetch)}) {\n              id\n              value\n              text\n            }\n          }\n        }`;\n\n        monday.api(query)\n          .then((res) => {\n            console.log(\"Target/Printer Column Values Response: \", res);\n            if (res.data?.items?.length > 0 && res.data.items[0].column_values) {\n              const columnValues = res.data.items[0].column_values;\n\n              // Process Target Column (Total Count)\n              const targetColumnData = columnValues.find(cv => cv.id === targetColumnId);\n              if (targetColumnData) {\n                const columnValue = targetColumnData.value;\n                if (columnValue) {\n                  let existingCount = 0;\n                  try {\n                    existingCount = JSON.parse(columnValue);\n                  } catch (e) {\n                    existingCount = parseInt(columnValue);\n                  }\n                  if (isNaN(existingCount)) {\n                    existingCount = 0;\n                  }\n                  setTotalCount(existingCount);\n                  console.log(\"Fetched Total Count:\", existingCount);\n                } else {\n                  setTotalCount(0); // Reset if column is empty\n                  console.log(\"Target column is empty, setting total count to 0.\");\n                }\n              } else {\n                 setTotalCount(0); // Reset if column data is missing\n                 console.warn(\"Target column data not found in response.\");\n              }\n\n              // Process Printer Column\n              const printerColumnData = columnValues.find(cv => cv.id === printerColId);\n              let currentPrinterBoardValue = \"Printer N/A\"; // Default\n              if (printerColumnData) {\n                 // Prefer 'text' for dropdowns/status, fallback to 'value'\n                 const printerVal = printerColumnData.text || (printerColumnData.value ? JSON.parse(printerColumnData.value) : null);\n                 if (printerVal) {\n                   currentPrinterBoardValue = printerVal; // Store the fetched value\n                   console.log(\"Fetched Printer Value:\", printerVal);\n                 } else {\n                   console.log(\"Printer column is empty on board.\");\n                 }\n                 setPrinterColumnValue(currentPrinterBoardValue); // Update the display/truth state\n\n                 // Sync the dropdown selection\n                 if (printerColumnOptions.length > 0) {\n                    const matchingOption = printerColumnOptions.find(opt => opt.label === currentPrinterBoardValue || opt.value === currentPrinterBoardValue);\n                    if (matchingOption) {\n                       setSelectedPrinterOption(matchingOption);\n                       console.log(\"Synced dropdown to:\", matchingOption);\n                    } else {\n                       setSelectedPrinterOption(null); // No match found\n                       console.warn(`Fetched printer value '${currentPrinterBoardValue}' not found in options.`);\n                       // Maybe add a placeholder option?\n                    }\n                 }\n\n              } else {\n                setPrinterColumnValue(currentPrinterBoardValue); // Set to default \"Printer N/A\"\n                setSelectedPrinterOption(null); // No data, no selection\n                console.warn(\"Printer column data not found in response.\");\n              }\n\n            } else {\n               console.error(\"No items or column values found in response: \", res);\n               setTotalCount(0);\n               setPrinterColumnValue(\"Error Fetching Data\");\n            }\n          })\n          .catch((err) => {\n            console.error(\"Error fetching column values: \", err);\n            setTotalCount(0); // Reset on error\n            setPrinterColumnValue(\"Error Fetching Printer\");\n          })\n          .finally(() => {\n            setIsInitialized(true); // Mark as initialized after attempting fetch\n            console.log(\"Initialization fetch complete.\");\n          });\n      } else if (context && !printerColId) {\n          // Handle case where context is loaded but printerColId hasn't been found yet (e.g., column missing)\n          setIsInitialized(true); // Still initialize, but with error state set in the other useEffect\n      } else if (context && !selectedOption?.value) {\n          // Handle case where context is loaded but no target column selected\n          setTotalCount(0); // Reset total count if no target selected\n          setIsInitialized(true);\n          console.log(\"No target column selected, initializing total count to 0.\");\n          // We might still want to fetch the printer value if printerColId is known\n          // Add separate fetch logic here or modify query if needed\n      }\n    }, [selectedOption, context, printerColId]); // Add printerColId dependency\n\n\n\n      const handleInput = (count) => {\n        const countAsNum = parseInt(count);\n        \n        // Loop to add multiple batches\n        const newItems = [];\n        for (let i = 0; i < multiplier; i++) { // NEW: Loop based on multiplier\n            const totalToAdd = countAsNum; // Each batch will have the same quantity\n            const currentDate = new Date();\n            const currentTime = currentDate.toLocaleTimeString('en-US', {timeStyle: 'short', hour12: true});\n            const uniqueKey = Math.random().toString(36).substr(2, 9);\n            const printerDisplay = printerColumnValue || \"Printer N/A\"; // Use fetched value or default\n            const itemDisplayPos = \"B\" + (listItems.length + (i + 1)) + \" | \" + currentTime + \" - \" + \n                (currentDate.getMonth() + 1) + \"/\" + currentDate.getDate() + \"/\" + currentDate.getFullYear() + \"\\n | \" + printerDisplay;\n            \n            newItems.push({ uniqueKey, itemName: itemDisplayPos, itemCount: totalToAdd }); // Create new item for each batch\n        }\n    \n        setListItems([...listItems, ...newItems]); // Add all new items at once\n    \n        setTotalCount(prevTotalCount => {\n            console.log(\"new total: \", prevTotalCount);\n            return parseInt(prevTotalCount) + (countAsNum * multiplier); // Update total count\n        });\n    \n        console.log(\"handleInput Option: \", selectedOption);\n      }\n    \n      const handleTotalReset = () => {\n        setTotalCount(0)\n      }\n    \n      const handleOptionsSelection = (evt) => {\n        setSelectedOption(evt)\n      }\n\n      // NEW: Handler for printer dropdown changes\n      const handlePrinterSelectionChange = (selectedOption) => {\n        if (!context || !printerColId) return; // Safety check\n\n        setSelectedPrinterOption(selectedOption); // Update UI immediately\n        setPrinterColumnValue(selectedOption.label); // Optimistically update display/truth state\n\n        console.log(`Updating Printer column (${printerColId}) for item ${context.itemId} to:`, selectedOption.label);\n\n        // Use the label for Status/Dropdown updates\n        const valueToSet = JSON.stringify({ label: selectedOption.label });\n\n        const mutation = `mutation {\n          change_column_value (board_id: ${context.boardId}, item_id: ${context.itemId}, column_id: \"${printerColId}\", value: ${valueToSet}) {\n            id\n          }\n        }`;\n\n        setShouldLoad(true); // Show loader during API call\n        monday.api(mutation)\n          .then((res) => {\n            console.log(\"Printer column updated successfully: \", res);\n            // Optionally refetch the value to confirm, but the useEffect hook should handle it\n          })\n          .catch((err) => {\n            console.error(\"Error updating printer column: \", err);\n            // Revert optimistic update? Show error message?\n            // For now, just log the error. Consider fetching the value again to reset.\n            storageInstance.getItem() // This seems wrong, maybe refetch from board?\n          })\n          .finally(() => {\n            setShouldLoad(false);\n          });\n      };\n\n      const handleItemDelete = (itemName, itemCount, isChecked) => {\n    \n        setListItems(prevListItems => {\n          const newListItems = prevListItems.filter(item => item.itemName !== itemName);\n          prevListItems.map(item => console.log(item.itemName))\n          // Update localStorage to store the new list items\n          console.log(\"New Items\", itemName)\n          return newListItems;\n        });\n      \n        setTotalCount(prevTotalCount => {\n          let newTotalCount;\n          if (!isChecked) {\n            newTotalCount = prevTotalCount - parseInt(itemCount);\n          } else {\n            newTotalCount = prevTotalCount;\n          }\n          // Update localStorage to store the new total count\n          return newTotalCount;\n        });\n      }\n    \n      const changeTotalCount = (isChecked, itemCount) => {\n        console.log(\"isChecked type: \", typeof(isChecked))\n        console.log(\"itemCount type: \", typeof(itemCount))\n        setTotalCount(prevTotalCount => {\n          if (isChecked) {\n            return parseInt(prevTotalCount) - parseInt(itemCount);\n          } else {\n            return parseInt(prevTotalCount) + parseInt(itemCount);\n          }\n        })\n    \n        console.log(\"changeTotal Option: \", selectedOption)  \n      }\n    \n      useEffect(() => {\n        console.log(\"----App.js UseEffect #3----\")\n        if (context) {\n          console.log(\"Context: \", context)\n          setShouldLoad(true)\n          storageInstance.setItem('listItems_' + context.itemId, JSON.stringify(listItems)\n          ).catch(error => { \n            console.log(error)\n            setShouldLoad(false)\n          }).finally(() => { \n            console.log(\"Loading...\")\n            setTimeout(() => {\n                setShouldLoad(false)\n            }, 1000)\n          });\n          \n        }\n    \n        \n        \n      }, [listItems]);\n\n      useEffect(() => {\n        if (isInitialized) {\n          if (context) {\n            // setShouldLoad(true)\n            storageInstance.setItem('totalCount_' + context.itemId, totalCount.toString())\n            .catch(error => { \n                console.log(error)\n                // setShouldLoad(false)\n            }).finally(() => { \n                // setShouldLoad(false)\n            });\n        }\n\n        if (selectedOption && context && totalCount != null) {\n            console.log(\"Inner Context: \", selectedOption)\n            const boardId = context.boardId\n            console.log(\"using boardID: \", boardId)\n            const query = `mutation {\n              change_simple_column_value (board_id: ${boardId}, item_id: ${context.itemId}, column_id: \"${selectedOption.value}\", value: \"${JSON.stringify(totalCount)}\") {\n                id\n              }\n            }`;\n            \n            monday.api(query)\n              .then((res) => {\n                console.log(\"Column updated successfully: \", res, \"with \", totalCount);\n              })\n              .catch((err) => {\n                console.log(\"Error updating column: \", err);\n              });\n          }\n        }        \n      }, [totalCount, isInitialized])\n    \n      // Update selectedOption in the board storage when it changes\n      useEffect(() => {\n        console.log(\"----App.js UseEffect #5----\")\n        if (context) {\n          console.log(\"Context: \", context)\n        //   setShouldLoad(true)\n          storageInstance.setItem('selectedOption_'/* + context.itemId*/, JSON.stringify(selectedOption)\n          ).catch(error => { \n            console.log(error)\n            setShouldLoad(false)\n          }).finally(() => { \n            // setShouldLoad(false)\n          });\n          console.log(\"Option: \", selectedOption.value)\n        }\n        \n        \n      }, [selectedOption]);\n    \n\n    const handleClick = () => {\n        const countVal = parseInt(countRef.current.value)\n        handleInput(countVal)\n    }\n\n    const handleDeductClick = () => {\n      const countVal = parseInt(countRef.current.value)\n      handleInput(-countVal)\n    }\n\n    return (\n        <div className=\"container\">\n            {console.log(\"Loading Remount\")}\n            <div className=\"row pb-3\">\n                <div className=\"col-3\">\n                    <Button onClick={handleTotalReset} size={Button.sizes.SMALL} color={Button.colors.NEGATIVE}>Reset Total</Button>\n                </div>\n                <div className=\"col-6 d-flex align-items-end\">\n                    { shouldLoad ? <Loader size={Loader.sizes.SMALL}></Loader> : null }\n                </div>\n                <div className=\"col-3\">\n                    <p className=\"text-end\" style={{color: \"grey\"}}>Version 3</p>\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col-3\">\n                    <h4 style={{fontSize: \"1rem\"}}>Total Batches</h4>\n                    <div className=\"row\">\n                        {/* <div className=\"col\">\n                            <h4>Total</h4>\n                        </div> */}\n                        <div className=\"col\">\n                            <Label text={totalCount}></Label>\n                        </div>\n                    </div>\n                </div>  \n                <div className=\"col-3\">\n                    \n                </div>\n                <div className=\"col-6\">\n                <h4 style={{fontSize: \"1rem\"}}>Output Column</h4>\n                    <Dropdown placeholder=\"Target column\" onChange={evt => handleOptionsSelection(evt)} options={colOptions} value={selectedOption}></Dropdown>\n                </div>\n            </div>\n            <div className=\"row pt-4 pb-4\">\n                <div className=\"col-4 d-flex align-items-end\">\n                    <Dropdown\n                        placeholder=\"Select Printer...\"\n                        options={printerColumnOptions}\n                        value={selectedPrinterOption}\n                        onChange={handlePrinterSelectionChange}\n                        size={Dropdown.size.SMALL} // Match button size?\n                        className=\"w-100\" // Make dropdown take full column width\n                      />\n                </div>\n                <div className=\"col d-flex align-items-end\">\n                  <div>\n                    <p style={{ marginBottom: '4px' }}>Multiplier</p>\n                    <TextField type=\"number\" value={multiplier} onChange={e => setMultiplier(parseInt(e) || 1)} placeholder=\"Multiplier\" />\n                  </div>\n                </div>\n                <div className=\"col d-flex align-items-end\">\n                   <div>\n                    <p style={{ marginBottom: '4px' }}>Quantity</p>\n                    <TextField ref={countRef} type=\"number\" value=\"0\" />\n                  </div>\n                </div>\n                <div className=\"col-1 d-flex align-items-end\">\n                   <div className=\"row\">\n                     <Button disabled={shouldLoad ? true : false} onClick={handleClick} size={Button.sizes.SMALL} color={Button.colors.POSITIVE}>Add</Button>\n                   </div>\n                </div>\n                <div className=\"col d-flex align-items-end\">\n                    <Button disabled={shouldLoad ? true : false} onClick={handleDeductClick} size={Button.sizes.SMALL} color={Button.colors.NEGATIVE}>Deduct</Button>\n                </div>\n            </div>\n            <Divider></Divider>\n            <div className=\"col-12\">\n                <List items={listItems} handleDelete={handleItemDelete}></List>\n            </div> \n        </div>\n    );\n}\n\nexport default ListInputMod"],"mappings":"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"},"metadata":{},"sourceType":"module"}