{"ast":null,"code":"var _jsxFileName = \"/home/nenwam/Documents/rallyessentials/batchtask/quickstart-react/src/App.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport mondaySdk from \"monday-sdk-js\";\nimport \"monday-ui-react-core/dist/main.css\";\n//Explore more Monday React Components here: https://style.monday.com/\nimport List from \"./modules/List.js\";\nimport ListInput from \"./modules/ListInput.js\";\nimport ListInputMod from \"./modules/ListInputMod.js\";\nimport { Divider, Loader } from \"monday-ui-react-core\";\n\n// Usage of mondaySDK example, for more information visit here: https://developer.monday.com/apps/docs/introduction-to-the-sdk/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst monday = mondaySdk();\n// monday.setToken(\"eyJhbGciOiJIUzI1NiJ9.eyJ0aWQiOjI3Mjk5MDQ5NiwiYWFpIjoxMSwidWlkIjozNjI5NTI0NywiaWFkIjoiMjAyMy0wOC0wM1QyMToyMjozNy4wMDBaIiwicGVyIjoibWU6d3JpdGUiLCJhY3RpZCI6MTI3MTA0ODYsInJnbiI6InVzZTEifQ.XIrSWOWgg3U7oRd9zrKzL0WAr8Peo5b4ZIU1vfw0T2w\");\nconst storageInstance = monday.storage.instance;\nconst App = () => {\n  _s();\n  const [context, setContext] = useState();\n  const [listItems, setListItems] = useState([]);\n  // const [nameInput, setNameInput] = useState(\"\")\n  // const [countInput, setCountInput] = useState()\n  const [totalCount, setTotalCount] = useState(0);\n  // const [colOptions, setColOptions] = useState([])\n  const [selectedOption, setSelectedOption] = useState({});\n  const [printerOptions, setPrinterOptions] = useState({});\n  const [optionSelected, setOptionSelected] = useState(false);\n  const [shouldLoad, setShouldLoad] = useState(false);\n  const [initialShouldLoad, setInitialShouldLoad] = useState(false);\n\n  // const handleInput = (name, count) => {\n  //   console.log(\"count: \", totalCount)\n  //   const countAsNum = parseInt(count)\n\n  //   setTotalCount(prevTotalCount => {\n  //     console.log(\"new total: \", prevTotalCount)\n  //     return parseInt(prevTotalCount) + countAsNum \n  //   })\n  //   const currentDate = new Date()\n  //   const currentTime = currentDate.toLocaleTimeString('en-US', {timeStyle: 'short', hour12: true})\n  //   const uniqueKey = Math.random().toString(36).substr(2, 9);\n  //   const printerDisplay = printerOptions.label == undefined ? \"Printer N/A\" : printerOptions.label\n  //   const itemDisplayPos = \"B\" + (listItems.length + 1) + \" | \" + currentTime + \" - \" + \n  //     (currentDate.getMonth() + 1) + \"/\" + currentDate.getDate() + \"/\" + currentDate.getFullYear() + \"\\n | \" + printerDisplay\n  //   const newItem = { uniqueKey: Math.random().toString(36).substr(2, 9), itemName: itemDisplayPos, itemCount: countAsNum };\n  //   console.log(\"Key: \", uniqueKey)\n  //   setListItems([...listItems, newItem])\n\n  //   console.log(\"handleInput Option: \", selectedOption)\n  // }\n\n  // const handleTotalReset = () => {\n  //   setTotalCount(0)\n  // }\n\n  // const handleOptionsSelection = (evt) => {\n  //   setSelectedOption(evt) \n  //   setShouldLoad(true)\n  //   storageInstance.setItem('selectedOption_'/* + context.itemId*/, JSON.stringify(evt)\n  //   ).catch(error => {\n  //     console.log(error)\n  //     setShouldLoad(false)\n  //   }).finally(() => { \n  //     setShouldLoad(false)\n  //   });\n  //   console.log(\"handleOptions Option: \", evt) \n  // }\n\n  // const handlePrinterSelection = (evt) => {\n  //   setPrinterOptions(evt)\n  //   setShouldLoad(true)\n  //   storageInstance.setItem('printerOptions_' + context.itemId, JSON.stringify(evt)\n  //   ).catch(error => {\n  //     console.log(error)\n  //     setShouldLoad(false)\n  //   }).finally(() => {  \n  //     setShouldLoad(false)\n  //   });\n  //   console.log(\"handleOptions Option: \", evt)\n  // }\n\n  // const handleItemDelete = (itemName, itemCount, isChecked) => {\n\n  //   setListItems(prevListItems => {\n  //     const newListItems = prevListItems.filter(item => item.itemName !== itemName);\n  //     prevListItems.map(item => console.log(item.itemName))\n  //     // Update localStorage to store the new list items\n  //     console.log(\"New Items\", itemName)\n  //     return newListItems;\n  //   });\n\n  //   setTotalCount(prevTotalCount => {\n  //     let newTotalCount;\n  //     if (!isChecked) {\n  //       newTotalCount = prevTotalCount - parseInt(itemCount);\n  //     } else {\n  //       newTotalCount = prevTotalCount;\n  //     }\n  //     // Update localStorage to store the new total count\n  //     return newTotalCount;\n  //   });\n  // }\n\n  // const changeTotalCount = (isChecked, itemCount) => {\n  //   console.log(\"isChecked type: \", typeof(isChecked))\n  //   console.log(\"itemCount type: \", typeof(itemCount))\n  //   setTotalCount(prevTotalCount => {\n  //     if (isChecked) {\n  //       return parseInt(prevTotalCount) - parseInt(itemCount);\n  //     } else {\n  //       return parseInt(prevTotalCount) + parseInt(itemCount);\n  //     }\n  //   })\n\n  //   console.log(\"changeTotal Option: \", selectedOption)  \n  // }\n\n  // useEffect(() => {\n  //   console.log(\"----App.js UseEffect #1----\")\n  //   // Notice this method notifies the monday platform that user gains a first value in an app.\n  //   // Read more about it here: https://developer.monday.com/apps/docs/mondayexecute#value-created-for-user/\n  //   monday.execute(\"valueCreatedForUser\");\n\n  //   monday.listen(\"context\", (res) => {\n  //     console.log(\"useEffect storage res: \", res)\n  //     setContext(res.data);\n\n  //     // setShouldLoad(true)\n\n  //     storageInstance.getItem('listItems_' + res.data.itemId).then(result1 => {\n  //       setListItems(JSON.parse(result1.data.value) || []);  \n  //       return storageInstance.getItem('listItems_' + res.data.itemId)\n  //     }).then(result2 => {\n  //       setListItems(JSON.parse(result2.data.value) || []);\n  //       return storageInstance.getItem('totalCount_' + res.data.itemId)\n  //     }).then(result3 => {\n  //       const parsedCount = parseInt(result3.data.value)\n  //       setTotalCount(parsedCount || 0);\n  //       return storageInstance.getItem('selectedOption_'/* + res.data.itemId*/)\n  //     }).then(result4 => { \n  //       setSelectedOption(JSON.parse(result4.data.value) || []);\n  //       return storageInstance.getItem('printerOption_' + res.data.itemId)\n  //     }).then(result5 => { \n  //       setPrinterOptions(JSON.parse(result5.data.value) || []);\n  //     }).catch(error => { \n  //       console.log(error)\n  //       // setShouldLoad(false)\n  //     }).finally(() => { \n  //       // setShouldLoad(false)\n  //     })\n\n  //     // storageInstance.getItem('listItems_' + res.data.itemId).then(response => {\n  //     //   setListItems(JSON.parse(response.data.value) || []);  \n  //     // }).catch(error => {\n  //     //   console.log(error)\n  //     //   // setShouldLoad(false)\n  //     // })\n\n  //     // storageInstance.getItem('totalCount_' + res.data.itemId).then(response => {\n  //     //   console.log(\"Count Response: \", response.data.value)\n  //     //   const parsedCount = parseInt(response.data.value)\n  //     //   setTotalCount(parsedCount || 0);\n  //     // }).catch(error => { \n  //     //   console.log(error)\n  //     //   // setShouldLoad(false)\n  //     // })\n\n  //     // storageInstance.getItem('selectedOption_'/* + res.data.itemId*/).then(response => {\n  //     //   console.log(\"Option Response: \", response)\n  //     //   setSelectedOption(JSON.parse(response.data.value) || []);\n  //     // }).catch(error => { \n  //     //   console.log(error)\n  //     //   // setShouldLoad(false)\n  //     // })\n\n  //     // storageInstance.getItem('printerOption_' + res.data.itemId).then(response => {\n  //     //   console.log(\"Printer Response: \", response.data.value)\n  //     //   setPrinterOptions(JSON.parse(response.data.value) || []);\n  //     // }).catch(error => { \n  //     //   console.log(error)\n  //     // }).finally(() => {\n  //     //   setShouldLoad(false)\n  //     // });\n\n  //   });\n\n  // }, []);\n\n  // // useEffect(() => { \n  // //   console.log(\"----App.js UseEffect #2----\")\n  // //   if (selectedOption && context && totalCount != null) {\n  // //     console.log(\"Inner Context: \", selectedOption)\n  // //     const boardId = context.boardId\n  // //     console.log(\"using boardID: \", boardId)\n  // //     const query = `mutation {\n  // //       change_simple_column_value (board_id: ${boardId}, item_id: ${context.itemId}, column_id: \"${selectedOption.value}\", value: \"${JSON.stringify(totalCount)}\") {\n  // //         id\n  // //       }\n  // //     }`;\n\n  // //     monday.api(query)\n  // //       .then((res) => {\n  // //         console.log(\"Column updated successfully: \", res, \"with \", totalCount);\n  // //       })\n  // //       .catch((err) => {\n  // //         console.log(\"Error updating column: \", err);\n  // //       });\n  // //   }\n\n  // // }, [totalCount]);\n\n  // // Update listItems in the board storage when it changes\n  // // useEffect(() => {\n  // //   console.log(\"----App.js UseEffect #3----\")\n  // //   if (context) {\n  // //     console.log(\"Context: \", context)\n  // //     setShouldLoad(true)\n  // //     storageInstance.setItem('listItems_' + context.itemId, JSON.stringify(listItems)\n  // //     ).catch(error => { \n  // //       console.log(error)\n  // //       setShouldLoad(false)\n  // //     }).finally(() => { \n  // //       setShouldLoad(false)\n  // //     });\n\n  // //   }\n\n  // // }, [listItems]);\n\n  // useEffect(() => {\n  //   console.log(\"----App.js UseEffect #3----\")\n  //   if (context) {\n  //     console.log(\"Context: \", context)\n  //     setShouldLoad(true)\n  //     storageInstance.setItem('listItems_' + context.itemId, JSON.stringify(listItems)\n  //     ).then(result1 => { \n  //       return storageInstance.setItem('totalCount_' + context.itemId, totalCount.toString())\n  //     }).catch(error => { \n  //       console.log(error)\n  //       setShouldLoad(false)\n  //     }).finally(() => { \n  //       setShouldLoad(false)\n  //     });\n\n  //     // storageInstance.setItem('totalCount_' + context.itemId, totalCount.toString()\n  //     // ).catch(error => { \n  //     //   console.log(error)\n  //     //   // setShouldLoad(false)\n  //     // }).finally(() => { \n  //     //   setShouldLoad(false)\n  //     // });\n\n  //   }\n\n  //   if (selectedOption && context && totalCount != null) {\n  //     console.log(\"Inner Context: \", selectedOption)\n  //     const boardId = context.boardId\n  //     console.log(\"using boardID: \", boardId)\n  //     const query = `mutation {\n  //       change_simple_column_value (board_id: ${boardId}, item_id: ${context.itemId}, column_id: \"${selectedOption.value}\", value: \"${JSON.stringify(totalCount)}\") {\n  //         id\n  //       }\n  //     }`;\n\n  //     monday.api(query)\n  //       .then((res) => {\n  //         console.log(\"Column updated successfully: \", res, \"with \", totalCount);\n  //       })\n  //       .catch((err) => {\n  //         console.log(\"Error updating column: \", err);\n  //       });\n  //   }\n\n  // }, [listItems, totalCount]);\n\n  // // Update totalCount in the board storage when it changes\n  // // useEffect(() => {\n  // //   console.log(\"----App.js UseEffect #4----\")\n  // //   if (context) {\n  // //     console.log(\"Context: \", context)\n  // //     setShouldLoad(true)\n  // //     storageInstance.setItem('totalCount_' + context.itemId, totalCount.toString()\n  // //     ).catch(error => { \n  // //       console.log(error)\n  // //       setShouldLoad(false)\n  // //     }).finally(() => { \n  // //       setShouldLoad(false)\n  // //     });\n  // //     // localStorage.setItem('totalCount_' + context.itemId, totalCount.toString());\n\n  // //   }\n\n  // // }, [totalCount]);\n\n  // // Update selectedOption in the board storage when it changes\n  // useEffect(() => {\n  //   console.log(\"----App.js UseEffect #5----\")\n  //   if (context) {\n  //     console.log(\"Context: \", context)\n  //     // setShouldLoad(true)\n  //     storageInstance.setItem('selectedOption_'/* + context.itemId*/, JSON.stringify(selectedOption)\n  //     ).catch(error => { \n  //       console.log(error)\n  //       // setShouldLoad(false)\n  //     }).finally(() => { \n  //       // setShouldLoad(false)\n  //     });\n  //     console.log(\"Option: \", selectedOption.value)\n  //   }\n\n  // }, [selectedOption]);\n\n  // // Update printerOptions in the board storage when it changes\n  // useEffect(() => {\n  //   console.log(\"----App.js UseEffect #6----\")\n  //   if (context) {\n  //     console.log(\"Context: \", context)\n  //     // setShouldLoad(true)\n  //     storageInstance.setItem('printerOption_' + context.itemId, JSON.stringify(printerOptions)\n  //     ).catch(error => { \n  //       console.log(error)\n  //       // setShouldLoad(false)\n  //     }).finally(() => { \n  //       // setShouldLoad(false)\n  //     });\n  //     console.log(\"Option: \", printerOptions.value)\n  //   }\n  // }, [printerOptions])\n\n  // useEffect(() => {\n  //   console.log(\"----App.js UseEffect #7----\")\n  //   if (context) {\n  //     const storedSelectedOption = storageInstance.getItem('selectedOption_'/* + context.itemId*/).then(response => {\n  //       if (response.data && response.data.value) {\n  //         const defaultSelectedOption = JSON.parse(storedSelectedOption);\n  //         handleOptionsSelection(defaultSelectedOption);\n  //       }\n  //     })\n  //     // const storedSelectedOption = storageInstance.getItem('selectedOption_' + context.itemId);\n  //     // if (storedSelectedOption) {\n  //     //   // Set it as the default selected option\n  //     //   // You may need to adapt this part to match the data structure of your `Dropdown` component\n  //     //   const defaultSelectedOption = JSON.parse(storedSelectedOption);\n  //     //   handleOptionsSelection(defaultSelectedOption);\n  //     // }\n  //   }\n\n  // }, [])\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row mt-5\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-12 py-3 mt-5\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Hello\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 364,\n          columnNumber: 11\n        }, this), context && /*#__PURE__*/_jsxDEV(ListInputMod\n        // nameHandler={evt => updateNameValue(evt)} \n        // nameValue={nameInput}\n        // countHandler={evt => updateCountValue(evt)} \n        // countValue={countInput}\n        , {\n          parentContext: context\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 383,\n          columnNumber: 22\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 362,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 361,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"BGSq6q/GX0BVdLwZYl6kExd7uVc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","mondaySdk","List","ListInput","ListInputMod","Divider","Loader","jsxDEV","_jsxDEV","monday","storageInstance","storage","instance","App","_s","context","setContext","listItems","setListItems","totalCount","setTotalCount","selectedOption","setSelectedOption","printerOptions","setPrinterOptions","optionSelected","setOptionSelected","shouldLoad","setShouldLoad","initialShouldLoad","setInitialShouldLoad","className","children","fileName","_jsxFileName","lineNumber","columnNumber","parentContext","_c","$RefreshReg$"],"sources":["/home/nenwam/Documents/rallyessentials/batchtask/quickstart-react/src/App.js"],"sourcesContent":["import React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport mondaySdk from \"monday-sdk-js\";\nimport \"monday-ui-react-core/dist/main.css\";\n//Explore more Monday React Components here: https://style.monday.com/\nimport List from \"./modules/List.js\"\nimport ListInput from \"./modules/ListInput.js\";\nimport ListInputMod from \"./modules/ListInputMod.js\";\nimport { Divider, Loader } from \"monday-ui-react-core\"\n\n// Usage of mondaySDK example, for more information visit here: https://developer.monday.com/apps/docs/introduction-to-the-sdk/\nconst monday = mondaySdk();\n// monday.setToken(\"eyJhbGciOiJIUzI1NiJ9.eyJ0aWQiOjI3Mjk5MDQ5NiwiYWFpIjoxMSwidWlkIjozNjI5NTI0NywiaWFkIjoiMjAyMy0wOC0wM1QyMToyMjozNy4wMDBaIiwicGVyIjoibWU6d3JpdGUiLCJhY3RpZCI6MTI3MTA0ODYsInJnbiI6InVzZTEifQ.XIrSWOWgg3U7oRd9zrKzL0WAr8Peo5b4ZIU1vfw0T2w\");\nconst storageInstance = monday.storage.instance;\n\nconst App = () => {\n  const [context, setContext] = useState();\n  const [listItems, setListItems] = useState([]);\n  // const [nameInput, setNameInput] = useState(\"\")\n  // const [countInput, setCountInput] = useState()\n  const [totalCount, setTotalCount] = useState(0);\n  // const [colOptions, setColOptions] = useState([])\n  const [selectedOption, setSelectedOption] = useState({}); \n  const [printerOptions, setPrinterOptions] = useState({})\n  const [optionSelected, setOptionSelected] = useState(false);\n  const [shouldLoad, setShouldLoad] = useState(false);\n  const [initialShouldLoad, setInitialShouldLoad] = useState(false);\n\n\n\n  // const handleInput = (name, count) => {\n  //   console.log(\"count: \", totalCount)\n  //   const countAsNum = parseInt(count)\n    \n  //   setTotalCount(prevTotalCount => {\n  //     console.log(\"new total: \", prevTotalCount)\n  //     return parseInt(prevTotalCount) + countAsNum \n  //   })\n  //   const currentDate = new Date()\n  //   const currentTime = currentDate.toLocaleTimeString('en-US', {timeStyle: 'short', hour12: true})\n  //   const uniqueKey = Math.random().toString(36).substr(2, 9);\n  //   const printerDisplay = printerOptions.label == undefined ? \"Printer N/A\" : printerOptions.label\n  //   const itemDisplayPos = \"B\" + (listItems.length + 1) + \" | \" + currentTime + \" - \" + \n  //     (currentDate.getMonth() + 1) + \"/\" + currentDate.getDate() + \"/\" + currentDate.getFullYear() + \"\\n | \" + printerDisplay\n  //   const newItem = { uniqueKey: Math.random().toString(36).substr(2, 9), itemName: itemDisplayPos, itemCount: countAsNum };\n  //   console.log(\"Key: \", uniqueKey)\n  //   setListItems([...listItems, newItem])\n    \n    \n\n  //   console.log(\"handleInput Option: \", selectedOption)\n  // }\n\n  // const handleTotalReset = () => {\n  //   setTotalCount(0)\n  // }\n\n  // const handleOptionsSelection = (evt) => {\n  //   setSelectedOption(evt) \n  //   setShouldLoad(true)\n  //   storageInstance.setItem('selectedOption_'/* + context.itemId*/, JSON.stringify(evt)\n  //   ).catch(error => {\n  //     console.log(error)\n  //     setShouldLoad(false)\n  //   }).finally(() => { \n  //     setShouldLoad(false)\n  //   });\n  //   console.log(\"handleOptions Option: \", evt) \n  // }\n\n  // const handlePrinterSelection = (evt) => {\n  //   setPrinterOptions(evt)\n  //   setShouldLoad(true)\n  //   storageInstance.setItem('printerOptions_' + context.itemId, JSON.stringify(evt)\n  //   ).catch(error => {\n  //     console.log(error)\n  //     setShouldLoad(false)\n  //   }).finally(() => {  \n  //     setShouldLoad(false)\n  //   });\n  //   console.log(\"handleOptions Option: \", evt)\n  // }\n\n  // const handleItemDelete = (itemName, itemCount, isChecked) => {\n\n  //   setListItems(prevListItems => {\n  //     const newListItems = prevListItems.filter(item => item.itemName !== itemName);\n  //     prevListItems.map(item => console.log(item.itemName))\n  //     // Update localStorage to store the new list items\n  //     console.log(\"New Items\", itemName)\n  //     return newListItems;\n  //   });\n  \n  //   setTotalCount(prevTotalCount => {\n  //     let newTotalCount;\n  //     if (!isChecked) {\n  //       newTotalCount = prevTotalCount - parseInt(itemCount);\n  //     } else {\n  //       newTotalCount = prevTotalCount;\n  //     }\n  //     // Update localStorage to store the new total count\n  //     return newTotalCount;\n  //   });\n  // }\n\n  // const changeTotalCount = (isChecked, itemCount) => {\n  //   console.log(\"isChecked type: \", typeof(isChecked))\n  //   console.log(\"itemCount type: \", typeof(itemCount))\n  //   setTotalCount(prevTotalCount => {\n  //     if (isChecked) {\n  //       return parseInt(prevTotalCount) - parseInt(itemCount);\n  //     } else {\n  //       return parseInt(prevTotalCount) + parseInt(itemCount);\n  //     }\n  //   })\n\n  //   console.log(\"changeTotal Option: \", selectedOption)  \n  // }\n\n\n  // useEffect(() => {\n  //   console.log(\"----App.js UseEffect #1----\")\n  //   // Notice this method notifies the monday platform that user gains a first value in an app.\n  //   // Read more about it here: https://developer.monday.com/apps/docs/mondayexecute#value-created-for-user/\n  //   monday.execute(\"valueCreatedForUser\");\n\n  //   monday.listen(\"context\", (res) => {\n  //     console.log(\"useEffect storage res: \", res)\n  //     setContext(res.data);\n\n  //     // setShouldLoad(true)\n\n  //     storageInstance.getItem('listItems_' + res.data.itemId).then(result1 => {\n  //       setListItems(JSON.parse(result1.data.value) || []);  \n  //       return storageInstance.getItem('listItems_' + res.data.itemId)\n  //     }).then(result2 => {\n  //       setListItems(JSON.parse(result2.data.value) || []);\n  //       return storageInstance.getItem('totalCount_' + res.data.itemId)\n  //     }).then(result3 => {\n  //       const parsedCount = parseInt(result3.data.value)\n  //       setTotalCount(parsedCount || 0);\n  //       return storageInstance.getItem('selectedOption_'/* + res.data.itemId*/)\n  //     }).then(result4 => { \n  //       setSelectedOption(JSON.parse(result4.data.value) || []);\n  //       return storageInstance.getItem('printerOption_' + res.data.itemId)\n  //     }).then(result5 => { \n  //       setPrinterOptions(JSON.parse(result5.data.value) || []);\n  //     }).catch(error => { \n  //       console.log(error)\n  //       // setShouldLoad(false)\n  //     }).finally(() => { \n  //       // setShouldLoad(false)\n  //     })\n\n  //     // storageInstance.getItem('listItems_' + res.data.itemId).then(response => {\n  //     //   setListItems(JSON.parse(response.data.value) || []);  \n  //     // }).catch(error => {\n  //     //   console.log(error)\n  //     //   // setShouldLoad(false)\n  //     // })\n\n  //     // storageInstance.getItem('totalCount_' + res.data.itemId).then(response => {\n  //     //   console.log(\"Count Response: \", response.data.value)\n  //     //   const parsedCount = parseInt(response.data.value)\n  //     //   setTotalCount(parsedCount || 0);\n  //     // }).catch(error => { \n  //     //   console.log(error)\n  //     //   // setShouldLoad(false)\n  //     // })\n\n  //     // storageInstance.getItem('selectedOption_'/* + res.data.itemId*/).then(response => {\n  //     //   console.log(\"Option Response: \", response)\n  //     //   setSelectedOption(JSON.parse(response.data.value) || []);\n  //     // }).catch(error => { \n  //     //   console.log(error)\n  //     //   // setShouldLoad(false)\n  //     // })\n\n  //     // storageInstance.getItem('printerOption_' + res.data.itemId).then(response => {\n  //     //   console.log(\"Printer Response: \", response.data.value)\n  //     //   setPrinterOptions(JSON.parse(response.data.value) || []);\n  //     // }).catch(error => { \n  //     //   console.log(error)\n  //     // }).finally(() => {\n  //     //   setShouldLoad(false)\n  //     // });\n\n  //   });\n\n    \n  // }, []);\n\n  // // useEffect(() => { \n  // //   console.log(\"----App.js UseEffect #2----\")\n  // //   if (selectedOption && context && totalCount != null) {\n  // //     console.log(\"Inner Context: \", selectedOption)\n  // //     const boardId = context.boardId\n  // //     console.log(\"using boardID: \", boardId)\n  // //     const query = `mutation {\n  // //       change_simple_column_value (board_id: ${boardId}, item_id: ${context.itemId}, column_id: \"${selectedOption.value}\", value: \"${JSON.stringify(totalCount)}\") {\n  // //         id\n  // //       }\n  // //     }`;\n      \n  // //     monday.api(query)\n  // //       .then((res) => {\n  // //         console.log(\"Column updated successfully: \", res, \"with \", totalCount);\n  // //       })\n  // //       .catch((err) => {\n  // //         console.log(\"Error updating column: \", err);\n  // //       });\n  // //   }\n    \n    \n  // // }, [totalCount]);\n\n  // // Update listItems in the board storage when it changes\n  // // useEffect(() => {\n  // //   console.log(\"----App.js UseEffect #3----\")\n  // //   if (context) {\n  // //     console.log(\"Context: \", context)\n  // //     setShouldLoad(true)\n  // //     storageInstance.setItem('listItems_' + context.itemId, JSON.stringify(listItems)\n  // //     ).catch(error => { \n  // //       console.log(error)\n  // //       setShouldLoad(false)\n  // //     }).finally(() => { \n  // //       setShouldLoad(false)\n  // //     });\n      \n  // //   }\n    \n  // // }, [listItems]);\n\n  // useEffect(() => {\n  //   console.log(\"----App.js UseEffect #3----\")\n  //   if (context) {\n  //     console.log(\"Context: \", context)\n  //     setShouldLoad(true)\n  //     storageInstance.setItem('listItems_' + context.itemId, JSON.stringify(listItems)\n  //     ).then(result1 => { \n  //       return storageInstance.setItem('totalCount_' + context.itemId, totalCount.toString())\n  //     }).catch(error => { \n  //       console.log(error)\n  //       setShouldLoad(false)\n  //     }).finally(() => { \n  //       setShouldLoad(false)\n  //     });\n\n  //     // storageInstance.setItem('totalCount_' + context.itemId, totalCount.toString()\n  //     // ).catch(error => { \n  //     //   console.log(error)\n  //     //   // setShouldLoad(false)\n  //     // }).finally(() => { \n  //     //   setShouldLoad(false)\n  //     // });\n      \n  //   }\n\n  //   if (selectedOption && context && totalCount != null) {\n  //     console.log(\"Inner Context: \", selectedOption)\n  //     const boardId = context.boardId\n  //     console.log(\"using boardID: \", boardId)\n  //     const query = `mutation {\n  //       change_simple_column_value (board_id: ${boardId}, item_id: ${context.itemId}, column_id: \"${selectedOption.value}\", value: \"${JSON.stringify(totalCount)}\") {\n  //         id\n  //       }\n  //     }`;\n      \n  //     monday.api(query)\n  //       .then((res) => {\n  //         console.log(\"Column updated successfully: \", res, \"with \", totalCount);\n  //       })\n  //       .catch((err) => {\n  //         console.log(\"Error updating column: \", err);\n  //       });\n  //   }\n    \n  // }, [listItems, totalCount]);\n\n  // // Update totalCount in the board storage when it changes\n  // // useEffect(() => {\n  // //   console.log(\"----App.js UseEffect #4----\")\n  // //   if (context) {\n  // //     console.log(\"Context: \", context)\n  // //     setShouldLoad(true)\n  // //     storageInstance.setItem('totalCount_' + context.itemId, totalCount.toString()\n  // //     ).catch(error => { \n  // //       console.log(error)\n  // //       setShouldLoad(false)\n  // //     }).finally(() => { \n  // //       setShouldLoad(false)\n  // //     });\n  // //     // localStorage.setItem('totalCount_' + context.itemId, totalCount.toString());\n      \n  // //   }\n    \n  // // }, [totalCount]);\n\n  // // Update selectedOption in the board storage when it changes\n  // useEffect(() => {\n  //   console.log(\"----App.js UseEffect #5----\")\n  //   if (context) {\n  //     console.log(\"Context: \", context)\n  //     // setShouldLoad(true)\n  //     storageInstance.setItem('selectedOption_'/* + context.itemId*/, JSON.stringify(selectedOption)\n  //     ).catch(error => { \n  //       console.log(error)\n  //       // setShouldLoad(false)\n  //     }).finally(() => { \n  //       // setShouldLoad(false)\n  //     });\n  //     console.log(\"Option: \", selectedOption.value)\n  //   }\n    \n    \n  // }, [selectedOption]);\n\n  // // Update printerOptions in the board storage when it changes\n  // useEffect(() => {\n  //   console.log(\"----App.js UseEffect #6----\")\n  //   if (context) {\n  //     console.log(\"Context: \", context)\n  //     // setShouldLoad(true)\n  //     storageInstance.setItem('printerOption_' + context.itemId, JSON.stringify(printerOptions)\n  //     ).catch(error => { \n  //       console.log(error)\n  //       // setShouldLoad(false)\n  //     }).finally(() => { \n  //       // setShouldLoad(false)\n  //     });\n  //     console.log(\"Option: \", printerOptions.value)\n  //   }\n  // }, [printerOptions])\n\n\n  // useEffect(() => {\n  //   console.log(\"----App.js UseEffect #7----\")\n  //   if (context) {\n  //     const storedSelectedOption = storageInstance.getItem('selectedOption_'/* + context.itemId*/).then(response => {\n  //       if (response.data && response.data.value) {\n  //         const defaultSelectedOption = JSON.parse(storedSelectedOption);\n  //         handleOptionsSelection(defaultSelectedOption);\n  //       }\n  //     })\n  //     // const storedSelectedOption = storageInstance.getItem('selectedOption_' + context.itemId);\n  //     // if (storedSelectedOption) {\n  //     //   // Set it as the default selected option\n  //     //   // You may need to adapt this part to match the data structure of your `Dropdown` component\n  //     //   const defaultSelectedOption = JSON.parse(storedSelectedOption);\n  //     //   handleOptionsSelection(defaultSelectedOption);\n  //     // }\n  //   }\n    \n  // }, [])\n\n\n  \n  return (\n    <div className=\"App container\">\n      <div className=\"row mt-5\">\n        <div className=\"col-12 py-3 mt-5\">\n          <h1>Hello</h1>\n          {/* {context && <ListInput \n            // nameHandler={evt => updateNameValue(evt)} \n            // nameValue={nameInput}\n            // countHandler={evt => updateCountValue(evt)} \n            // countValue={countInput}\n            totalCount={totalCount} \n            dropdownHandler={evt => handleOptionsSelection(evt)}\n            printerHandler={evt => handlePrinterSelection(evt)}\n            clickFunction={handleInput}\n            resetTotalFunction={handleTotalReset}\n            parentContext={context}\n            disabledCheck={selectedOption.value !== undefined ? false : true }\n            selectedVal={selectedOption}\n            printerVal={printerOptions}\n            shouldLoad={shouldLoad}\n            >\n          </ListInput>} */}\n          {\n          context && <ListInputMod \n            // nameHandler={evt => updateNameValue(evt)} \n            // nameValue={nameInput}\n            // countHandler={evt => updateCountValue(evt)} \n            // countValue={countInput}\n            parentContext={context}\n            >\n          </ListInputMod>\n          }\n        </div>\n        {/* <Divider></Divider>\n        <div className=\"col-12\">\n          <List items={listItems} handleDelete={handleItemDelete} parentContext={context} handleTotalCount={changeTotalCount}></List>\n        </div>  */}\n      </div>\n    </div>\n  );\n};\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAO,WAAW;AAClB,OAAOC,SAAS,MAAM,eAAe;AACrC,OAAO,oCAAoC;AAC3C;AACA,OAAOC,IAAI,MAAM,mBAAmB;AACpC,OAAOC,SAAS,MAAM,wBAAwB;AAC9C,OAAOC,YAAY,MAAM,2BAA2B;AACpD,SAASC,OAAO,EAAEC,MAAM,QAAQ,sBAAsB;;AAEtD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,MAAM,GAAGR,SAAS,CAAC,CAAC;AAC1B;AACA,MAAMS,eAAe,GAAGD,MAAM,CAACE,OAAO,CAACC,QAAQ;AAE/C,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGjB,QAAQ,CAAC,CAAC;EACxC,MAAM,CAACkB,SAAS,EAAEC,YAAY,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EAC9C;EACA;EACA,MAAM,CAACoB,UAAU,EAAEC,aAAa,CAAC,GAAGrB,QAAQ,CAAC,CAAC,CAAC;EAC/C;EACA,MAAM,CAACsB,cAAc,EAAEC,iBAAiB,CAAC,GAAGvB,QAAQ,CAAC,CAAC,CAAC,CAAC;EACxD,MAAM,CAACwB,cAAc,EAAEC,iBAAiB,CAAC,GAAGzB,QAAQ,CAAC,CAAC,CAAC,CAAC;EACxD,MAAM,CAAC0B,cAAc,EAAEC,iBAAiB,CAAC,GAAG3B,QAAQ,CAAC,KAAK,CAAC;EAC3D,MAAM,CAAC4B,UAAU,EAAEC,aAAa,CAAC,GAAG7B,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAAC8B,iBAAiB,EAAEC,oBAAoB,CAAC,GAAG/B,QAAQ,CAAC,KAAK,CAAC;;EAIjE;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAIA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAGA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAGA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAGA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAGA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAGA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAIA,oBACES,OAAA;IAAKuB,SAAS,EAAC,eAAe;IAAAC,QAAA,eAC5BxB,OAAA;MAAKuB,SAAS,EAAC,UAAU;MAAAC,QAAA,eACvBxB,OAAA;QAAKuB,SAAS,EAAC,kBAAkB;QAAAC,QAAA,gBAC/BxB,OAAA;UAAAwB,QAAA,EAAI;QAAK;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,EAmBdrB,OAAO,iBAAIP,OAAA,CAACJ;QACV;QACA;QACA;QACA;QAAA;UACAiC,aAAa,EAAEtB;QAAQ;UAAAkB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAEX,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEZ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAKH;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACtB,EAAA,CA/XID,GAAG;AAAAyB,EAAA,GAAHzB,GAAG;AAgYT,eAAeA,GAAG;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module"}