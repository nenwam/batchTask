{"ast":null,"code":"var _jsxFileName = \"/Users/connor/Documents/batchtask/batchTask/src/modules/ListInputMod.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { TextField, Button, Label, Dropdown, Loader, Divider } from \"monday-ui-react-core\";\nimport mondaySdk from \"monday-sdk-js\";\nimport { useState, useEffect, useRef } from \"react\";\nimport List from \"./List\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst monday = mondaySdk();\n// monday.setToken(\"eyJhbGciOiJIUzI1NiJ9.eyJ0aWQiOjI5MTI1MjEwNSwiYWFpIjoxMSwidWlkIjo1MDY1MzM4MSwiaWFkIjoiMjAyMy0xMC0yM1QyMToyNzo1Ni4wMDBaIiwicGVyIjoibWU6d3JpdGUiLCJhY3RpZCI6MTkzNTI3OTYsInJnbiI6InVzZTEifQ.IxSCkDC63caJ9dP_HobxQpVMEWXSJUDi-vcyRozQnKA\");\nmonday.setToken(\"eyJhbGciOiJIUzI1NiJ9.eyJ0aWQiOjI3Mjk5MDQ5NiwiYWFpIjoxMSwidWlkIjozNjI5NTI0NywiaWFkIjoiMjAyMy0wOC0wM1QyMToyMjozNy4wMDBaIiwicGVyIjoibWU6d3JpdGUiLCJhY3RpZCI6MTI3MTA0ODYsInJnbiI6InVzZTEifQ.XIrSWOWgg3U7oRd9zrKzL0WAr8Peo5b4ZIU1vfw0T2w\"); // rally essentials key\nconst storageInstance = monday.storage.instance;\nconst ListInputMod = _ref => {\n  _s();\n  let {\n    dropdownHandler,\n    printerHandler,\n    clickFunction,\n    resetTotalFunction,\n    selectedVal,\n    printerVal,\n    disabledCheck\n  } = _ref;\n  const [context, setContext] = useState();\n  console.log(\"Context from parent: \", context);\n  const [isInitialized, setIsInitialized] = useState(false);\n  const [listItems, setListItems] = useState([]);\n  const [totalCount, setTotalCount] = useState(0);\n  const [selectedOption, setSelectedOption] = useState({});\n  const [printerColumnValue, setPrinterColumnValue] = useState(\"Loading Printer...\");\n  const [printerColId, setPrinterColId] = useState(null);\n  const [printerSelectorOptions, setPrinterSelectorOptions] = useState([]);\n  const [optionSelected, setOptionSelected] = useState(false);\n  const [shouldLoad, setShouldLoad] = useState(false);\n  const [initialShouldLoad, setInitialShouldLoad] = useState(false);\n  const [colOptions, setColOptions] = useState([]);\n  const countRef = useRef();\n  const [multiplier, setMultiplier] = useState(1);\n  useEffect(() => {\n    console.log(\"----App.js UseEffect #1----\");\n    // Notice this method notifies the monday platform that user gains a first value in an app.\n    // Read more about it here: https://developer.monday.com/apps/docs/mondayexecute#value-created-for-user/\n    monday.execute(\"valueCreatedForUser\");\n    monday.listen(\"context\", res => {\n      console.log(\"useEffect storage res: \", res);\n      setContext(res.data);\n\n      // setShouldLoad(true)\n\n      storageInstance.getItem('listItems_' + res.data.itemId).then(result1 => {\n        setListItems(JSON.parse(result1.data.value) || []);\n        return storageInstance.getItem('listItems_' + res.data.itemId);\n      }).then(result2 => {\n        console.log(\"Loading Initial...\");\n        setListItems(JSON.parse(result2.data.value) || []);\n        return storageInstance.getItem('totalCount_' + res.data.itemId);\n      }).then(result3 => {\n        const parsedCount = parseInt(result3.data.value);\n        setTotalCount(parsedCount || 0);\n        return storageInstance.getItem('selectedOption_' /* + res.data.itemId*/);\n      }).then(result4 => {\n        setSelectedOption(JSON.parse(result4.data.value) || []);\n      }).catch(error => {\n        console.log(error);\n        // setShouldLoad(false)\n      }).finally(() => {\n        // setShouldLoad(false)\n      });\n      console.log(\"ListInput: \", context);\n    });\n  }, []);\n  useEffect(() => {\n    if (context) {\n      console.log(\"Parent Context 2\", context);\n      console.log(\"Context: \", context);\n      const boardId = context.boardId;\n      console.log(\"using boardID: \", context.boardId);\n      const query = `query {\n            boards(ids: ${boardId}) {\n                columns {\n                    id\n                    title\n                    type\n                    settings_str\n                }\n            }\n            }`;\n      monday.api(query).then(res => {\n        console.log(\"ListInput Columns & Settings res: \", res);\n        if (!res.data || !res.data.boards || res.data.boards.length === 0) {\n          console.error(\"Invalid response structure fetching columns:\", res);\n          return;\n        }\n        const columns = res.data.boards[0].columns;\n        console.log(\"Columns: \", columns);\n        const printerColumn = columns.find(col => col.title.includes(\"Printer\"));\n        if (printerColumn) {\n          setPrinterColId(printerColumn.id);\n          console.log(\"Found Printer column ID:\", printerColumn.id);\n          try {\n            const settings = JSON.parse(printerColumn.settings_str);\n            let options = [];\n            if (settings && settings.labels) {\n              options = Object.values(settings.labels).map(label => ({\n                label: label,\n                value: label\n              }));\n              console.log(\"Parsed Printer Options:\", options);\n            } else {\n              console.warn(\"Could not parse labels from Printer column settings:\", settings);\n            }\n            setPrinterSelectorOptions(options);\n          } catch (e) {\n            console.error(\"Error parsing Printer column settings_str:\", e);\n            setPrinterSelectorOptions([]);\n          }\n        } else {\n          console.error(\"Could not find column named 'Printer'\");\n          setPrinterColumnValue(\"Error: 'Printer' column not found\");\n          setPrinterSelectorOptions([]);\n        }\n        const filter = 'numbers';\n        const cols = columns.map(column => {\n          return {\n            label: column.title,\n            value: column.id,\n            type: column.type\n          };\n        });\n        console.log(\"cols: \", cols);\n        const filteredCols = cols.filter(col => col.type.includes(filter)).map(col => {\n          return {\n            label: col.label,\n            value: col.value\n          };\n        });\n        setColOptions(filteredCols);\n        storageInstance.setItem(`colOptions_${boardId}`, JSON.stringify(cols)).then(res => {\n          console.log(\"colOptions stored in board storage: \", res);\n        });\n      }).catch(err => {\n        console.log(\"Error fetching columns: \", err);\n      }).finally(() => {\n        // setShouldLoad(false)\n      });\n    }\n  }, [context]);\n  useEffect(() => {\n    if (selectedOption !== null && selectedOption !== void 0 && selectedOption.value && context && printerColId) {\n      const itemId = context.itemId;\n      const targetColumnId = selectedOption.value;\n      const columnsToFetch = [targetColumnId, printerColId];\n      console.log(`Fetching initial values for columns: ${columnsToFetch.join(', ')} for item: ${itemId}`);\n      const query = `query {\n          items (ids: ${itemId}) {\n            column_values (ids: ${JSON.stringify(columnsToFetch)}) {\n              id\n              value\n              text\n            }\n          }\n        }`;\n      monday.api(query).then(res => {\n        var _res$data, _res$data$items;\n        console.log(\"Initial Target/Printer Column Values Response: \", res);\n        if (((_res$data = res.data) === null || _res$data === void 0 ? void 0 : (_res$data$items = _res$data.items) === null || _res$data$items === void 0 ? void 0 : _res$data$items.length) > 0 && res.data.items[0].column_values) {\n          const columnValues = res.data.items[0].column_values;\n          const targetColumnData = columnValues.find(cv => cv.id === targetColumnId);\n          if (targetColumnData) {\n            const columnValue = targetColumnData.value;\n            if (columnValue) {\n              let existingCount = 0;\n              try {\n                existingCount = JSON.parse(columnValue);\n              } catch (e) {\n                existingCount = parseInt(columnValue);\n              }\n              if (isNaN(existingCount)) {\n                existingCount = 0;\n              }\n              setTotalCount(existingCount);\n              console.log(\"Fetched Initial Total Count:\", existingCount);\n            } else {\n              setTotalCount(0);\n              console.log(\"Target column is empty, setting initial total count to 0.\");\n            }\n          } else {\n            setTotalCount(0);\n            console.warn(\"Target column data not found in initial response.\");\n          }\n          const printerColumnData = columnValues.find(cv => cv.id === printerColId);\n          if (printerColumnData) {\n            const currentPrinterText = printerColumnData.text;\n            if (currentPrinterText) {\n              setPrinterColumnValue(currentPrinterText);\n              console.log(\"Fetched Initial Printer Value:\", currentPrinterText);\n            } else {\n              setPrinterColumnValue(\"Printer N/A\");\n              console.log(\"Initial Printer column text is empty, setting display to 'Printer N/A'.\");\n            }\n          } else {\n            setPrinterColumnValue(\"Printer N/A\");\n            console.warn(\"Initial Printer column data not found in response.\");\n          }\n        } else {\n          console.error(\"No items or column values found in initial fetch: \", res);\n          setTotalCount(0);\n          setPrinterColumnValue(\"Error Fetching Data\");\n        }\n      }).catch(err => {\n        console.error(\"Error fetching initial column values: \", err);\n        setTotalCount(0);\n        setPrinterColumnValue(\"Error Fetching Printer\");\n      }).finally(() => {\n        setIsInitialized(true);\n        console.log(\"Initialization fetch complete.\");\n      });\n    } else if (context && (!printerColId || !(selectedOption !== null && selectedOption !== void 0 && selectedOption.value))) {\n      setIsInitialized(true);\n      if (!printerColId) console.log(\"Waiting for printer column ID...\");\n      if (!(selectedOption !== null && selectedOption !== void 0 && selectedOption.value)) {\n        console.log(\"No target column selected, initializing total count to 0.\");\n        setTotalCount(0);\n      }\n    }\n  }, [selectedOption, context, printerColId]);\n  const handleInput = count => {\n    const countAsNum = parseInt(count);\n    const newItems = [];\n    for (let i = 0; i < multiplier; i++) {\n      const totalToAdd = countAsNum;\n      const currentDate = new Date();\n      const currentTime = currentDate.toLocaleTimeString('en-US', {\n        timeStyle: 'short',\n        hour12: true\n      });\n      const uniqueKey = Math.random().toString(36).substr(2, 9);\n      const printerDisplay = printerColumnValue || \"Printer N/A\";\n      const itemDisplayPos = \"B\" + (listItems.length + (i + 1)) + \" | \" + currentTime + \" - \" + (currentDate.getMonth() + 1) + \"/\" + currentDate.getDate() + \"/\" + currentDate.getFullYear() + \"\\n | \" + printerDisplay;\n      newItems.push({\n        uniqueKey,\n        itemName: itemDisplayPos,\n        itemCount: totalToAdd\n      });\n    }\n    setListItems([...listItems, ...newItems]);\n    setTotalCount(prevTotalCount => {\n      console.log(\"new total: \", prevTotalCount);\n      const currentNum = Number(prevTotalCount) || 0;\n      return currentNum + countAsNum * multiplier;\n    });\n    console.log(\"handleInput Option: \", selectedOption);\n  };\n  const handleTotalReset = () => {\n    setTotalCount(0);\n  };\n  const handleOptionsSelection = evt => {\n    setSelectedOption(evt);\n  };\n  const handleItemDelete = (itemName, itemCount, isChecked) => {\n    setListItems(prevListItems => {\n      const newListItems = prevListItems.filter(item => item.itemName !== itemName);\n      prevListItems.map(item => console.log(item.itemName));\n      // Update localStorage to store the new list items\n      console.log(\"New Items\", itemName);\n      // Store in Monday storage\n      if (context) {\n        storageInstance.setItem('listItems_' + context.itemId, JSON.stringify(newListItems));\n      }\n      return newListItems;\n    });\n    setTotalCount(prevTotalCount => {\n      let newTotalCount;\n      const currentNum = Number(prevTotalCount) || 0;\n      if (!isChecked) {\n        newTotalCount = currentNum - parseInt(itemCount);\n      } else {\n        newTotalCount = currentNum;\n      }\n      return newTotalCount;\n    });\n  };\n  const changeTotalCount = (isChecked, itemCount) => {\n    console.log(\"isChecked type: \", typeof isChecked);\n    console.log(\"itemCount type: \", typeof itemCount);\n    setTotalCount(prevTotalCount => {\n      const currentNum = Number(prevTotalCount) || 0;\n      if (isChecked) {\n        return currentNum - parseInt(itemCount);\n      } else {\n        return currentNum + parseInt(itemCount);\n      }\n    });\n    console.log(\"changeTotal Option: \", selectedOption);\n  };\n  useEffect(() => {\n    console.log(\"----App.js UseEffect #3----\");\n    if (context) {\n      console.log(\"Context: \", context);\n      storageInstance.setItem('listItems_' + context.itemId, JSON.stringify(listItems)).catch(error => {\n        console.log(\"Error saving listItems to storage:\", error);\n      });\n    }\n  }, [listItems, context]);\n  useEffect(() => {\n    if (isInitialized) {\n      if (context) {\n        console.log(\"Saving totalCount to storage:\", totalCount);\n        storageInstance.setItem('totalCount_' + context.itemId, totalCount.toString()).catch(error => {\n          console.log(\"Error saving totalCount to storage:\", error);\n        });\n      }\n      if (selectedOption !== null && selectedOption !== void 0 && selectedOption.value && context && totalCount !== null) {\n        console.log(`Updating Target column (${selectedOption.value}) to: ${totalCount}`);\n        const boardId = context.boardId;\n        const mutation = `mutation {\n              change_simple_column_value (board_id: ${boardId}, item_id: ${context.itemId}, column_id: \"${selectedOption.value}\", value: ${JSON.stringify(totalCount.toString())}) {\n                id\n              }\n            }`;\n        monday.api(mutation).then(res => {\n          console.log(\"Target Column updated successfully: \", res, \"with \", totalCount);\n        }).catch(err => {\n          console.log(\"Error updating target column: \", err);\n        });\n      }\n    }\n  }, [totalCount, isInitialized, selectedOption, context]);\n  useEffect(() => {\n    console.log(\"----App.js UseEffect #5----\");\n    if (context) {\n      console.log(\"Saving selectedOption to storage:\", selectedOption);\n      storageInstance.setItem('selectedOption_' /* + context.itemId*/, JSON.stringify(selectedOption)).catch(error => {\n        console.log(\"Error saving selectedOption to storage:\", error);\n      });\n      console.log(\"Option: \", selectedOption.value);\n    }\n  }, [selectedOption, context]);\n  const handleClick = () => {\n    const countVal = parseInt(countRef.current.value);\n    handleInput(countVal);\n  };\n  const handleDeductClick = () => {\n    const countVal = parseInt(countRef.current.value);\n    handleInput(-countVal);\n  };\n  const handlePrinterSelectionChange = selectedOpt => {\n    if (!selectedOpt || !context || !printerColId) {\n      console.warn(\"Missing context or printer info for update\");\n      return;\n    }\n    const newPrinterValue = selectedOpt.value;\n    const newPrinterLabel = selectedOpt.label;\n    if (newPrinterLabel === printerColumnValue) {\n      console.log(\"Printer selection hasn't changed.\");\n      return;\n    }\n    console.log(`Updating Printer column (${printerColId}) to:`, newPrinterValue);\n    setShouldLoad(true);\n    const mutation = `mutation {\n        change_multiple_column_values (board_id: ${context.boardId}, item_id: ${context.itemId}, column_values: ${JSON.stringify(JSON.stringify({\n      [printerColId]: newPrinterValue\n    }))}) {\n          id\n        }\n      }`;\n    monday.api(mutation).then(res => {\n      console.log(\"Printer column updated successfully: \", res);\n      setPrinterColumnValue(newPrinterLabel);\n    }).catch(err => {\n      console.error(\"Error updating printer column: \", err);\n    }).finally(() => {\n      setTimeout(() => setShouldLoad(false), 300);\n    });\n  };\n  const currentPrinterOption = printerSelectorOptions.find(opt => opt.label === printerColumnValue) || null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [console.log(\"Loading Remount\"), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row pb-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-3\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleTotalReset,\n          size: Button.sizes.SMALL,\n          color: Button.colors.NEGATIVE,\n          children: \"Reset Total\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 412,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 411,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-6 d-flex align-items-end\",\n        children: shouldLoad ? /*#__PURE__*/_jsxDEV(Loader, {\n          size: Loader.sizes.SMALL\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 415,\n          columnNumber: 36\n        }, this) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 414,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-3\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-end\",\n          style: {\n            color: \"grey\"\n          },\n          children: \"Version 3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 418,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 417,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 410,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          style: {\n            fontSize: \"1rem\"\n          },\n          children: \"Total Batches\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 423,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col\",\n            children: /*#__PURE__*/_jsxDEV(Label, {\n              text: totalCount\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 426,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 425,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 424,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 422,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 430,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          style: {\n            fontSize: \"1rem\"\n          },\n          children: \"Output Column\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 434,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Dropdown, {\n          placeholder: \"Target column\",\n          onChange: evt => handleOptionsSelection(evt),\n          options: colOptions,\n          value: selectedOption\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 435,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 433,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 421,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row pt-4 pb-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-4 d-flex align-items-end\",\n        children: /*#__PURE__*/_jsxDEV(Dropdown, {\n          placeholder: printerColId ? \"Select Printer\" : \"Loading Printer...\",\n          options: printerSelectorOptions,\n          value: currentPrinterOption,\n          onChange: handlePrinterSelectionChange,\n          disabled: !printerColId || shouldLoad,\n          size: Dropdown.size.SMALL,\n          className: \"printer-dropdown\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 440,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 439,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col d-flex align-items-end\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              marginBottom: '4px'\n            },\n            children: \"Multiplier\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 452,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            type: \"number\",\n            value: multiplier,\n            onChange: e => setMultiplier(parseInt(e) || 1),\n            placeholder: \"Multiplier\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 453,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 451,\n          columnNumber: 19\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 450,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col d-flex align-items-end\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              marginBottom: '4px'\n            },\n            children: \"Quantity\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 458,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            ref: countRef,\n            type: \"number\",\n            value: \"0\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 459,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 457,\n          columnNumber: 20\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 456,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-1 d-flex align-items-end\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            disabled: shouldLoad ? true : false,\n            onClick: handleClick,\n            size: Button.sizes.SMALL,\n            color: Button.colors.POSITIVE,\n            children: \"Add\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 464,\n            columnNumber: 22\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 463,\n          columnNumber: 20\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 462,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col d-flex align-items-end\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          disabled: shouldLoad ? true : false,\n          onClick: handleDeductClick,\n          size: Button.sizes.SMALL,\n          color: Button.colors.NEGATIVE,\n          children: \"Deduct\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 468,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 467,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 438,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 471,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col-12\",\n      children: /*#__PURE__*/_jsxDEV(List, {\n        items: listItems,\n        handleDelete: handleItemDelete\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 473,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 472,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 408,\n    columnNumber: 9\n  }, this);\n};\n_s(ListInputMod, \"oWaFfF2x3RJ0XifqgXhm/c7oCKE=\");\n_c = ListInputMod;\nexport default ListInputMod;\nvar _c;\n$RefreshReg$(_c, \"ListInputMod\");","map":{"version":3,"names":["React","TextField","Button","Label","Dropdown","Loader","Divider","mondaySdk","useState","useEffect","useRef","List","jsxDEV","_jsxDEV","monday","setToken","storageInstance","storage","instance","ListInputMod","_ref","_s","dropdownHandler","printerHandler","clickFunction","resetTotalFunction","selectedVal","printerVal","disabledCheck","context","setContext","console","log","isInitialized","setIsInitialized","listItems","setListItems","totalCount","setTotalCount","selectedOption","setSelectedOption","printerColumnValue","setPrinterColumnValue","printerColId","setPrinterColId","printerSelectorOptions","setPrinterSelectorOptions","optionSelected","setOptionSelected","shouldLoad","setShouldLoad","initialShouldLoad","setInitialShouldLoad","colOptions","setColOptions","countRef","multiplier","setMultiplier","execute","listen","res","data","getItem","itemId","then","result1","JSON","parse","value","result2","result3","parsedCount","parseInt","result4","catch","error","finally","boardId","query","api","boards","length","columns","printerColumn","find","col","title","includes","id","settings","settings_str","options","labels","Object","values","map","label","warn","e","filter","cols","column","type","filteredCols","setItem","stringify","err","targetColumnId","columnsToFetch","join","_res$data","_res$data$items","items","column_values","columnValues","targetColumnData","cv","columnValue","existingCount","isNaN","printerColumnData","currentPrinterText","text","handleInput","count","countAsNum","newItems","i","totalToAdd","currentDate","Date","currentTime","toLocaleTimeString","timeStyle","hour12","uniqueKey","Math","random","toString","substr","printerDisplay","itemDisplayPos","getMonth","getDate","getFullYear","push","itemName","itemCount","prevTotalCount","currentNum","Number","handleTotalReset","handleOptionsSelection","evt","handleItemDelete","isChecked","prevListItems","newListItems","item","newTotalCount","changeTotalCount","mutation","handleClick","countVal","current","handleDeductClick","handlePrinterSelectionChange","selectedOpt","newPrinterValue","newPrinterLabel","setTimeout","currentPrinterOption","opt","className","children","onClick","size","sizes","SMALL","color","colors","NEGATIVE","fileName","_jsxFileName","lineNumber","columnNumber","style","fontSize","placeholder","onChange","disabled","marginBottom","ref","POSITIVE","handleDelete","_c","$RefreshReg$"],"sources":["/Users/connor/Documents/batchtask/batchTask/src/modules/ListInputMod.js"],"sourcesContent":["import React from \"react\";\nimport { TextField, Button, Label, Dropdown, Loader, Divider } from \"monday-ui-react-core\"\nimport mondaySdk from \"monday-sdk-js\";\nimport { useState, useEffect, useRef } from \"react\";\nimport List from \"./List\"\n\nconst monday = mondaySdk();\n// monday.setToken(\"eyJhbGciOiJIUzI1NiJ9.eyJ0aWQiOjI5MTI1MjEwNSwiYWFpIjoxMSwidWlkIjo1MDY1MzM4MSwiaWFkIjoiMjAyMy0xMC0yM1QyMToyNzo1Ni4wMDBaIiwicGVyIjoibWU6d3JpdGUiLCJhY3RpZCI6MTkzNTI3OTYsInJnbiI6InVzZTEifQ.IxSCkDC63caJ9dP_HobxQpVMEWXSJUDi-vcyRozQnKA\");\nmonday.setToken(\"eyJhbGciOiJIUzI1NiJ9.eyJ0aWQiOjI3Mjk5MDQ5NiwiYWFpIjoxMSwidWlkIjozNjI5NTI0NywiaWFkIjoiMjAyMy0wOC0wM1QyMToyMjozNy4wMDBaIiwicGVyIjoibWU6d3JpdGUiLCJhY3RpZCI6MTI3MTA0ODYsInJnbiI6InVzZTEifQ.XIrSWOWgg3U7oRd9zrKzL0WAr8Peo5b4ZIU1vfw0T2w\") // rally essentials key\nconst storageInstance = monday.storage.instance;\n\nconst ListInputMod = ({dropdownHandler, printerHandler, clickFunction, resetTotalFunction, selectedVal, printerVal, disabledCheck}) => {\n    const [context, setContext] = useState()\n    console.log(\"Context from parent: \", context)\n    const [isInitialized, setIsInitialized] = useState(false);\n    const [listItems, setListItems] = useState([]);\n    const [totalCount, setTotalCount] = useState(0);\n    const [selectedOption, setSelectedOption] = useState({});\n    const [printerColumnValue, setPrinterColumnValue] = useState(\"Loading Printer...\");\n    const [printerColId, setPrinterColId] = useState(null);\n    const [printerSelectorOptions, setPrinterSelectorOptions] = useState([]);\n    const [optionSelected, setOptionSelected] = useState(false);\n    const [shouldLoad, setShouldLoad] = useState(false);\n    const [initialShouldLoad, setInitialShouldLoad] = useState(false);\n    const [colOptions, setColOptions] = useState([])\n    const countRef = useRef();\n    const [multiplier, setMultiplier] = useState(1);\n\n    useEffect(() => {\n        console.log(\"----App.js UseEffect #1----\")\n        // Notice this method notifies the monday platform that user gains a first value in an app.\n        // Read more about it here: https://developer.monday.com/apps/docs/mondayexecute#value-created-for-user/\n        monday.execute(\"valueCreatedForUser\");\n    \n        monday.listen(\"context\", (res) => {\n          console.log(\"useEffect storage res: \", res)\n          setContext(res.data);\n    \n          // setShouldLoad(true)\n    \n          storageInstance.getItem('listItems_' + res.data.itemId).then(result1 => {\n            setListItems(JSON.parse(result1.data.value) || []);  \n            return storageInstance.getItem('listItems_' + res.data.itemId)\n          }).then(result2 => {\n            console.log(\"Loading Initial...\")\n            setListItems(JSON.parse(result2.data.value) || []);\n            return storageInstance.getItem('totalCount_' + res.data.itemId)\n          }).then(result3 => {\n            const parsedCount = parseInt(result3.data.value)\n            setTotalCount(parsedCount || 0);\n            return storageInstance.getItem('selectedOption_'/* + res.data.itemId*/)\n          }).then(result4 => { \n            setSelectedOption(JSON.parse(result4.data.value) || []);\n          }).catch(error => { \n            console.log(error)\n            // setShouldLoad(false)\n          }).finally(() => { \n            // setShouldLoad(false)\n          })\n\n        console.log(\"ListInput: \", context)\n    \n        });\n    \n        \n      }, []);\n\n      useEffect(() => {\n        if (context) {\n          console.log(\"Parent Context 2\", context)\n\n            console.log(\"Context: \", context)\n            const boardId = context.boardId;\n            console.log(\"using boardID: \", context.boardId)\n            \n            const query = `query {\n            boards(ids: ${boardId}) {\n                columns {\n                    id\n                    title\n                    type\n                    settings_str\n                }\n            }\n            }`;\n            monday.api(query).then((res) => {\n                console.log(\"ListInput Columns & Settings res: \", res);\n                if (!res.data || !res.data.boards || res.data.boards.length === 0) {\n                  console.error(\"Invalid response structure fetching columns:\", res);\n                  return;\n                }\n                const columns = res.data.boards[0].columns;\n                console.log(\"Columns: \", columns);\n\n                const printerColumn = columns.find(col => col.title.includes(\"Printer\"));\n                if (printerColumn) {\n                  setPrinterColId(printerColumn.id);\n                  console.log(\"Found Printer column ID:\", printerColumn.id);\n                  try {\n                    const settings = JSON.parse(printerColumn.settings_str);\n                    let options = [];\n                    if (settings && settings.labels) { \n                      options = Object.values(settings.labels).map(label => ({ label: label, value: label }));\n                      console.log(\"Parsed Printer Options:\", options);\n                    } else {\n                      console.warn(\"Could not parse labels from Printer column settings:\", settings);\n                    }\n                    setPrinterSelectorOptions(options);\n                  } catch (e) {\n                    console.error(\"Error parsing Printer column settings_str:\", e);\n                    setPrinterSelectorOptions([]);\n                  }\n                } else {\n                  console.error(\"Could not find column named 'Printer'\");\n                  setPrinterColumnValue(\"Error: 'Printer' column not found\");\n                  setPrinterSelectorOptions([]);\n                }\n\n                const filter = 'numbers'\n                const cols = columns.map(column => {                      \n                    return {label: column.title, value: column.id, type: column.type}\n                })\n                console.log(\"cols: \", cols)\n                const filteredCols = cols\n                .filter(col => col.type.includes(filter))\n                .map(col => {\n                    return {label: col.label, value: col.value}\n                })\n                setColOptions(filteredCols)\n                storageInstance.setItem(`colOptions_${boardId}`, JSON.stringify(cols)).then((res) => {\n                    console.log(\"colOptions stored in board storage: \", res);\n                })\n            }).catch((err) => {\n                console.log(\"Error fetching columns: \", err);\n            }).finally(() => {\n                // setShouldLoad(false)\n            });\n        }\n        \n      }, [context])\n\n    useEffect(() => {\n      if (selectedOption?.value && context && printerColId) {\n        const itemId = context.itemId;\n        const targetColumnId = selectedOption.value;\n        const columnsToFetch = [targetColumnId, printerColId];\n\n        console.log(`Fetching initial values for columns: ${columnsToFetch.join(', ')} for item: ${itemId}`);\n\n        const query = `query {\n          items (ids: ${itemId}) {\n            column_values (ids: ${JSON.stringify(columnsToFetch)}) {\n              id\n              value\n              text\n            }\n          }\n        }`;\n\n        monday.api(query)\n          .then((res) => {\n            console.log(\"Initial Target/Printer Column Values Response: \", res);\n            if (res.data?.items?.length > 0 && res.data.items[0].column_values) {\n              const columnValues = res.data.items[0].column_values;\n\n              const targetColumnData = columnValues.find(cv => cv.id === targetColumnId);\n              if (targetColumnData) {\n                const columnValue = targetColumnData.value;\n                if (columnValue) {\n                  let existingCount = 0;\n                  try {\n                    existingCount = JSON.parse(columnValue);\n                  } catch (e) {\n                    existingCount = parseInt(columnValue);\n                  }\n                  if (isNaN(existingCount)) {\n                    existingCount = 0;\n                  }\n                  setTotalCount(existingCount);\n                  console.log(\"Fetched Initial Total Count:\", existingCount);\n                } else {\n                  setTotalCount(0);\n                  console.log(\"Target column is empty, setting initial total count to 0.\");\n                }\n              } else {\n                 setTotalCount(0);\n                 console.warn(\"Target column data not found in initial response.\");\n              }\n\n              const printerColumnData = columnValues.find(cv => cv.id === printerColId);\n              if (printerColumnData) {\n                 const currentPrinterText = printerColumnData.text;\n                 if (currentPrinterText) {\n                   setPrinterColumnValue(currentPrinterText);\n                   console.log(\"Fetched Initial Printer Value:\", currentPrinterText);\n                 } else {\n                   setPrinterColumnValue(\"Printer N/A\"); \n                   console.log(\"Initial Printer column text is empty, setting display to 'Printer N/A'.\");\n                 }\n              } else {\n                setPrinterColumnValue(\"Printer N/A\");\n                console.warn(\"Initial Printer column data not found in response.\");\n              }\n            } else {\n               console.error(\"No items or column values found in initial fetch: \", res);\n               setTotalCount(0);\n               setPrinterColumnValue(\"Error Fetching Data\");\n            }\n          })\n          .catch((err) => {\n            console.error(\"Error fetching initial column values: \", err);\n            setTotalCount(0);\n            setPrinterColumnValue(\"Error Fetching Printer\");\n          })\n          .finally(() => {\n            setIsInitialized(true);\n            console.log(\"Initialization fetch complete.\");\n          });\n      } else if (context && (!printerColId || !selectedOption?.value)) {\n            setIsInitialized(true);\n            if (!printerColId) console.log(\"Waiting for printer column ID...\");\n            if (!selectedOption?.value) {\n                console.log(\"No target column selected, initializing total count to 0.\");\n                setTotalCount(0);\n            }\n      }\n    }, [selectedOption, context, printerColId]);\n\n      const handleInput = (count) => {\n        const countAsNum = parseInt(count);\n        \n        const newItems = [];\n        for (let i = 0; i < multiplier; i++) {\n            const totalToAdd = countAsNum;\n            const currentDate = new Date();\n            const currentTime = currentDate.toLocaleTimeString('en-US', {timeStyle: 'short', hour12: true});\n            const uniqueKey = Math.random().toString(36).substr(2, 9);\n            const printerDisplay = printerColumnValue || \"Printer N/A\";\n            const itemDisplayPos = \"B\" + (listItems.length + (i + 1)) + \" | \" + currentTime + \" - \" +\n                (currentDate.getMonth() + 1) + \"/\" + currentDate.getDate() + \"/\" + currentDate.getFullYear() + \"\\n | \" + printerDisplay;\n            \n            newItems.push({ uniqueKey, itemName: itemDisplayPos, itemCount: totalToAdd });\n        }\n    \n        setListItems([...listItems, ...newItems]);\n    \n        setTotalCount(prevTotalCount => {\n            console.log(\"new total: \", prevTotalCount);\n            const currentNum = Number(prevTotalCount) || 0;\n            return currentNum + (countAsNum * multiplier);\n        });\n    \n        console.log(\"handleInput Option: \", selectedOption);\n      }\n    \n      const handleTotalReset = () => {\n        setTotalCount(0)\n      }\n    \n      const handleOptionsSelection = (evt) => {\n        setSelectedOption(evt) \n      }\n    \n      const handleItemDelete = (itemName, itemCount, isChecked) => {\n    \n        setListItems(prevListItems => {\n          const newListItems = prevListItems.filter(item => item.itemName !== itemName);\n          prevListItems.map(item => console.log(item.itemName))\n          // Update localStorage to store the new list items\n          console.log(\"New Items\", itemName)\n          // Store in Monday storage\n          if (context) {\n             storageInstance.setItem('listItems_' + context.itemId, JSON.stringify(newListItems));\n          }\n          return newListItems;\n        });\n      \n        setTotalCount(prevTotalCount => {\n          let newTotalCount;\n          const currentNum = Number(prevTotalCount) || 0;\n          if (!isChecked) {\n            newTotalCount = currentNum - parseInt(itemCount);\n          } else {\n            newTotalCount = currentNum;\n          }\n          return newTotalCount;\n        });\n      }\n    \n      const changeTotalCount = (isChecked, itemCount) => {\n        console.log(\"isChecked type: \", typeof(isChecked))\n        console.log(\"itemCount type: \", typeof(itemCount))\n        setTotalCount(prevTotalCount => {\n          const currentNum = Number(prevTotalCount) || 0;\n          if (isChecked) {\n            return currentNum - parseInt(itemCount);\n          } else {\n            return currentNum + parseInt(itemCount);\n          }\n        })\n    \n        console.log(\"changeTotal Option: \", selectedOption)  \n      }\n    \n      useEffect(() => {\n        console.log(\"----App.js UseEffect #3----\")\n        if (context) {\n          console.log(\"Context: \", context)\n          storageInstance.setItem('listItems_' + context.itemId, JSON.stringify(listItems))\n          .catch(error => {\n            console.log(\"Error saving listItems to storage:\", error)\n          });\n        }\n      }, [listItems, context]);\n\n      useEffect(() => {\n        if (isInitialized) {\n          if (context) {\n             console.log(\"Saving totalCount to storage:\", totalCount);\n            storageInstance.setItem('totalCount_' + context.itemId, totalCount.toString())\n            .catch(error => {\n                console.log(\"Error saving totalCount to storage:\", error)\n            });\n          }\n\n          if (selectedOption?.value && context && totalCount !== null) {\n            console.log(`Updating Target column (${selectedOption.value}) to: ${totalCount}`);\n            const boardId = context.boardId\n            const mutation = `mutation {\n              change_simple_column_value (board_id: ${boardId}, item_id: ${context.itemId}, column_id: \"${selectedOption.value}\", value: ${JSON.stringify(totalCount.toString())}) {\n                id\n              }\n            }`;\n\n            monday.api(mutation)\n              .then((res) => {\n                console.log(\"Target Column updated successfully: \", res, \"with \", totalCount);\n              })\n              .catch((err) => {\n                console.log(\"Error updating target column: \", err);\n              });\n          }\n        }\n      }, [totalCount, isInitialized, selectedOption, context])\n    \n      useEffect(() => {\n        console.log(\"----App.js UseEffect #5----\")\n        if (context) {\n          console.log(\"Saving selectedOption to storage:\", selectedOption);\n          storageInstance.setItem('selectedOption_'/* + context.itemId*/, JSON.stringify(selectedOption))\n          .catch(error => {\n            console.log(\"Error saving selectedOption to storage:\", error)\n          });\n          console.log(\"Option: \", selectedOption.value)\n        }\n      }, [selectedOption, context]);\n    \n\n    const handleClick = () => {\n        const countVal = parseInt(countRef.current.value)\n        handleInput(countVal)\n    }\n\n    const handleDeductClick = () => {\n      const countVal = parseInt(countRef.current.value)\n      handleInput(-countVal)\n    }\n\n    const handlePrinterSelectionChange = (selectedOpt) => {\n      if (!selectedOpt || !context || !printerColId) {\n        console.warn(\"Missing context or printer info for update\");\n        return;\n      }\n\n      const newPrinterValue = selectedOpt.value;\n      const newPrinterLabel = selectedOpt.label;\n\n      if (newPrinterLabel === printerColumnValue) {\n        console.log(\"Printer selection hasn't changed.\");\n        return;\n      }\n\n      console.log(`Updating Printer column (${printerColId}) to:`, newPrinterValue);\n      setShouldLoad(true);\n\n      const mutation = `mutation {\n        change_multiple_column_values (board_id: ${context.boardId}, item_id: ${context.itemId}, column_values: ${JSON.stringify(JSON.stringify({ [printerColId]: newPrinterValue }))}) {\n          id\n        }\n      }`;\n\n      monday.api(mutation)\n        .then((res) => {\n          console.log(\"Printer column updated successfully: \", res);\n          setPrinterColumnValue(newPrinterLabel);\n        })\n        .catch((err) => {\n          console.error(\"Error updating printer column: \", err);\n        })\n        .finally(() => {\n          setTimeout(() => setShouldLoad(false), 300);\n        });\n    };\n\n    const currentPrinterOption = printerSelectorOptions.find(opt => opt.label === printerColumnValue) || null;\n\n    return (\n        <div className=\"container\">\n            {console.log(\"Loading Remount\")}\n            <div className=\"row pb-3\">\n                <div className=\"col-3\">\n                    <Button onClick={handleTotalReset} size={Button.sizes.SMALL} color={Button.colors.NEGATIVE}>Reset Total</Button>\n                </div>\n                <div className=\"col-6 d-flex align-items-end\">\n                    { shouldLoad ? <Loader size={Loader.sizes.SMALL}></Loader> : null }\n                </div>\n                <div className=\"col-3\">\n                    <p className=\"text-end\" style={{color: \"grey\"}}>Version 3</p>\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col-3\">\n                    <h4 style={{fontSize: \"1rem\"}}>Total Batches</h4>\n                    <div className=\"row\">\n                        <div className=\"col\">\n                            <Label text={totalCount}></Label>\n                        </div>\n                    </div>\n                </div>  \n                <div className=\"col-3\">\n                    \n                </div>\n                <div className=\"col-6\">\n                <h4 style={{fontSize: \"1rem\"}}>Output Column</h4>\n                    <Dropdown placeholder=\"Target column\" onChange={evt => handleOptionsSelection(evt)} options={colOptions} value={selectedOption}></Dropdown>\n                </div>\n            </div>\n            <div className=\"row pt-4 pb-4\">\n                <div className=\"col-4 d-flex align-items-end\">\n                    <Dropdown\n                        placeholder={printerColId ? \"Select Printer\" : \"Loading Printer...\"}\n                        options={printerSelectorOptions}\n                        value={currentPrinterOption}\n                        onChange={handlePrinterSelectionChange}\n                        disabled={!printerColId || shouldLoad}\n                        size={Dropdown.size.SMALL}\n                        className=\"printer-dropdown\"\n                     />\n                </div>\n                <div className=\"col d-flex align-items-end\">\n                  <div>\n                    <p style={{ marginBottom: '4px' }}>Multiplier</p>\n                    <TextField type=\"number\" value={multiplier} onChange={e => setMultiplier(parseInt(e) || 1)} placeholder=\"Multiplier\" />\n                  </div>\n                </div>\n                <div className=\"col d-flex align-items-end\">\n                   <div>\n                    <p style={{ marginBottom: '4px' }}>Quantity</p>\n                    <TextField ref={countRef} type=\"number\" value=\"0\" />\n                  </div>\n                </div>\n                <div className=\"col-1 d-flex align-items-end\">\n                   <div className=\"row\">\n                     <Button disabled={shouldLoad ? true : false} onClick={handleClick} size={Button.sizes.SMALL} color={Button.colors.POSITIVE}>Add</Button>\n                   </div>\n                </div>\n                <div className=\"col d-flex align-items-end\">\n                    <Button disabled={shouldLoad ? true : false} onClick={handleDeductClick} size={Button.sizes.SMALL} color={Button.colors.NEGATIVE}>Deduct</Button>\n                </div>\n            </div>\n            <Divider></Divider>\n            <div className=\"col-12\">\n                <List items={listItems} handleDelete={handleItemDelete}></List>\n            </div> \n        </div>\n    );\n}\n\nexport default ListInputMod"],"mappings":"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"},"metadata":{},"sourceType":"module"}