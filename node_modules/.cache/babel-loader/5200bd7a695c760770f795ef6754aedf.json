{"ast":null,"code":"var _jsxFileName = \"/home/nenwam/Documents/rallyessentials/batchtask/quickstart-react/src/App.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport mondaySdk from \"monday-sdk-js\";\nimport \"monday-ui-react-core/dist/main.css\";\n//Explore more Monday React Components here: https://style.monday.com/\nimport List from \"./modules/List.js\";\nimport ListInput from \"./modules/ListInput.js\";\nimport { Divider } from \"monday-ui-react-core\";\n\n// Usage of mondaySDK example, for more information visit here: https://developer.monday.com/apps/docs/introduction-to-the-sdk/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst monday = mondaySdk();\nmonday.setToken(\"eyJhbGciOiJIUzI1NiJ9.eyJ0aWQiOjI5MTI1MjEwNSwiYWFpIjoxMSwidWlkIjo1MDY1MzM4MSwiaWFkIjoiMjAyMy0xMC0yM1QyMToyNzo1Ni40NTBaIiwicGVyIjoibWU6d3JpdGUiLCJhY3RpZCI6MTkzNTI3OTYsInJnbiI6InVzZTEifQ.6IFWFt7JJq7-tQjaLIPa2rLB8kGFRxp0bA6lrb564BI\");\nconst storageInstance = monday.storage.instance;\nconst App = () => {\n  _s();\n  const [context, setContext] = useState();\n  const [listItems, setListItems] = useState([]);\n  const [nameInput, setNameInput] = useState(\"\");\n  const [countInput, setCountInput] = useState();\n  const [totalCount, setTotalCount] = useState(0);\n  // const [colOptions, setColOptions] = useState([])\n  const [selectedOption, setSelectedOption] = useState({});\n  const [optionSelected, setOptionSelected] = useState(false);\n  const handleInput = (name, count) => {\n    setTotalCount(totalCount + parseInt(count));\n    const uniqueKey = Math.random().toString(36).substr(2, 9);\n    const newItem = {\n      uniqueKey: Math.random().toString(36).substr(2, 9),\n      itemName: name,\n      itemCount: parseInt(count)\n    };\n    console.log(\"Key: \", uniqueKey);\n    setListItems([...listItems, newItem]);\n    // setListItems([...listItems, <ListItem key={uniqueKey} itemName={nameInput} itemCount={countInput} handleDelete={handleItemDelete} handleTotalCount={changeTotalCount}></ListItem>])\n    setNameInput(\"\");\n    setCountInput();\n    console.log(\"handleInput Option: \", selectedOption);\n  };\n  const handleTotalReset = () => {\n    setTotalCount(0);\n  };\n  const handleOptionsSelection = evt => {\n    setSelectedOption(evt);\n    storageInstance.setItem('selectedOption_' + context.itemId, JSON.stringify(evt));\n    // localStorage.setItem('selectedOption_' + context.itemId, JSON.stringify(selectedOption));\n    console.log(\"handleOptions Option: \", evt);\n  };\n  const handleItemDelete = (itemName, itemCount, isChecked) => {\n    // setListItems(prevListItems => prevListItems.filter(item => item.itemName !== itemName));\n    // setTotalCount(prevTotalCount => {\n    //   console.log(\"PrevTotal Count: \", prevTotalCount)\n    //   if (!isChecked) {\n    //     return prevTotalCount - parseInt(itemCount)\n    //   } else if (isChecked) {\n    //     return prevTotalCount\n    //   }\n\n    // });\n    setListItems(prevListItems => {\n      const newListItems = prevListItems.filter(item => item.itemName !== itemName);\n      prevListItems.map(item => console.log(item.itemName));\n      // Update localStorage to store the new list items\n      console.log(\"New Items\", itemName);\n      // storageInstance.setItem('listItems', JSON.stringify(newListItems));  -- NEWEST\n      // localStorage.setItem('listItems', JSON.stringify(newListItems));\n      return newListItems;\n    });\n    setTotalCount(prevTotalCount => {\n      let newTotalCount;\n      if (!isChecked) {\n        newTotalCount = prevTotalCount - parseInt(itemCount);\n      } else {\n        newTotalCount = prevTotalCount;\n      }\n      // Update localStorage to store the new total count\n      // storageInstance.setItem('totalCount', newTotalCount); -- NEWEST\n      // localStorage.setItem('totalCount', newTotalCount);\n      return newTotalCount;\n    });\n  };\n  const changeTotalCount = (isChecked, itemCount) => {\n    setTotalCount(prevTotalCount => {\n      if (isChecked) {\n        return prevTotalCount - parseInt(itemCount);\n      } else {\n        return prevTotalCount + parseInt(itemCount);\n      }\n    });\n    console.log(\"changeTotal Option: \", selectedOption);\n  };\n\n  // const updateNameValue = (evt) => {\n  //   setNameInput(evt);\n  // }\n\n  // const updateCountValue = (evt) => {\n  //   setCountInput(evt);\n  // }\n\n  useEffect(() => {\n    console.log(\"----App.js UseEffect #1----\");\n    // Notice this method notifies the monday platform that user gains a first value in an app.\n    // Read more about it here: https://developer.monday.com/apps/docs/mondayexecute#value-created-for-user/\n    monday.execute(\"valueCreatedForUser\");\n\n    // TODO: set up event listeners, Here`s an example, read more here: https://developer.monday.com/apps/docs/mondaylisten/\n    // let isMounted = true\n\n    // const handleContext = (res) => {\n\n    //   if (!isMounted) return\n\n    //   console.log(\"useEffect storage res: \", res)\n    //   setContext(res.data);\n\n    //   storageInstance.getItem('listItems_' + res.data.itemId).then(response => {\n    //     console.log(\"Item Response: \", response)\n    //     setListItems(JSON.parse(response.data.value) || []);  \n    //   });\n    //   storageInstance.getItem('totalCount_' + res.data.itemId).then(response => {\n    //     console.log(\"Count Response: \", response)\n    //     setTotalCount(JSON.parse(response.data.value) || []);\n    //   });\n    //   storageInstance.getItem('selectedOption_' + res.data.itemId).then(response => {\n    //     console.log(\"Option Response: \", response)\n    //     setSelectedOption(JSON.parse(response.data.value) || []);\n    //   });\n\n    //   // const localListItems = JSON.parse(localStorage.getItem('listItems_' + res.data.itemId)) || []\n    //   // setListItems(localListItems)\n    //   // const localTotalCount = parseInt(localStorage.getItem('totalCount_' + res.data.itemId)) || 0\n    //   // setTotalCount(localTotalCount)\n    //   // const localSelectedOption = JSON.parse(localStorage.getItem('selectedOption_' + res.data.itemId)) || {}\n    //   // setSelectedOption(localSelectedOption)\n\n    // }\n\n    // monday.listen(\"context\", handleContext);\n\n    // return () => {\n    //   isMounted = false\n    // }\n\n    // WIthout cleanup\n\n    monday.listen(\"context\", res => {\n      console.log(\"useEffect storage res: \", res);\n      setContext(res.data);\n\n      // storageInstance.getItem('listItems_' + res.data.itemId).then(response => {\n      //   // console.log(\"Item Response: \", response)\n      //   setListItems(JSON.parse(response.data.value) || []);  \n      // });\n      // storageInstance.getItem('totalCount_' + res.data.itemId).then(response => {\n      //   // console.log(\"Count Response: \", response)\n      //   setTotalCount(JSON.parse(response.data.value) || []);\n      // });\n      // storageInstance.getItem('selectedOption_' + res.data.itemId).then(response => {\n      //   // console.log(\"Option Response: \", response)\n      //   setSelectedOption(JSON.parse(response.data.value) || []);\n      // });\n\n      // const localListItems = JSON.parse(localStorage.getItem('listItems_' + res.data.itemId)) || []\n      // setListItems(localListItems)\n      // const localTotalCount = parseInt(localStorage.getItem('totalCount_' + res.data.itemId)) || 0\n      // setTotalCount(localTotalCount)\n      // const localSelectedOption = JSON.parse(localStorage.getItem('selectedOption_' + res.data.itemId)) || {}\n      // setSelectedOption(localSelectedOption)\n    });\n  }, [/*listItems, colOptions*/]);\n  useEffect(() => {\n    // Need to make it so that the add item deletes the previous item input and so that the subitems can be selected rather than just items\n    console.log(\"----App.js UseEffect #2----\");\n    if (selectedOption && context && totalCount != null) {\n      console.log(\"Inner Context: \", selectedOption);\n      const boardId = context.boardId;\n      console.log(\"using boardID: \", boardId);\n      const query = `mutation {\n        change_simple_column_value (board_id: ${boardId}, item_id: ${context.itemId}, column_id: \"${selectedOption.value}\", value: \"${JSON.stringify(totalCount)}\") {\n          id\n        }\n      }`;\n      monday.api(query).then(res => {\n        console.log(\"Column updated successfully: \", res, \"with \", totalCount);\n      }).catch(err => {\n        console.log(\"Error updating column: \", err);\n      });\n    }\n  }, [totalCount, selectedOption /*,context*/]);\n\n  useEffect(() => {\n    console.log(\"----App.js UseEffect #3----\");\n    if (context) {\n      console.log(\"Context: \", context);\n      storageInstance.setItem('listItems_' + context.itemId, JSON.stringify(listItems));\n      // localStorage.setItem('listItems_' + context.itemId, JSON.stringify(listItems));\n    }\n  }, [listItems /*, context*/]);\n\n  useEffect(() => {\n    console.log(\"----App.js UseEffect #4----\");\n    if (context) {\n      console.log(\"Context: \", context);\n      storageInstance.setItem('totalCount_' + context.itemId, totalCount.toString());\n      // localStorage.setItem('totalCount_' + context.itemId, totalCount.toString());\n    }\n  }, [totalCount /*, context*/]);\n\n  useEffect(() => {\n    console.log(\"----App.js UseEffect #5----\");\n    if (context) {\n      console.log(\"Context: \", context);\n      storageInstance.setItem('selectedOption_' + context.itemId, JSON.stringify(selectedOption));\n      // localStorage.setItem('selectedOption_' + context.itemId, JSON.stringify(selectedOption));\n      console.log(\"Option: \", selectedOption.value);\n    }\n  }, [selectedOption /*, context*/]);\n\n  useEffect(() => {\n    console.log(\"----App.js UseEffect #6----\");\n    if (context) {\n      const storedSelectedOption = storageInstance.getItem('selectedOption_' + context.itemId).then(response => {\n        if (response.data && response.data.value) {\n          const defaultSelectedOption = JSON.parse(storedSelectedOption);\n          handleOptionsSelection(defaultSelectedOption);\n        }\n      });\n      // const storedSelectedOption = storageInstance.getItem('selectedOption_' + context.itemId);\n      // if (storedSelectedOption) {\n      //   // Set it as the default selected option\n      //   // You may need to adapt this part to match the data structure of your `Dropdown` component\n      //   const defaultSelectedOption = JSON.parse(storedSelectedOption);\n      //   handleOptionsSelection(defaultSelectedOption);\n      // }\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-12 py-3\",\n        children: context && /*#__PURE__*/_jsxDEV(ListInput\n        // nameHandler={evt => updateNameValue(evt)} \n        // nameValue={nameInput}\n        // countHandler={evt => updateCountValue(evt)} \n        // countValue={countInput}\n        , {\n          totalCount: totalCount,\n          dropdownHandler: evt => handleOptionsSelection(evt),\n          clickFunction: handleInput,\n          resetTotalFunction: handleTotalReset,\n          parentContext: context,\n          disabledCheck: selectedOption.value !== undefined ? false : true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 23\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-12\",\n        children: context && /*#__PURE__*/_jsxDEV(List, {\n          items: listItems,\n          handleDelete: handleItemDelete,\n          parentContext: context,\n          handleTotalCount: changeTotalCount\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 24\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 261,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"QLU3Uwb4MA6y1YG1J/uZElHqKVw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","mondaySdk","List","ListInput","Divider","jsxDEV","_jsxDEV","monday","setToken","storageInstance","storage","instance","App","_s","context","setContext","listItems","setListItems","nameInput","setNameInput","countInput","setCountInput","totalCount","setTotalCount","selectedOption","setSelectedOption","optionSelected","setOptionSelected","handleInput","name","count","parseInt","uniqueKey","Math","random","toString","substr","newItem","itemName","itemCount","console","log","handleTotalReset","handleOptionsSelection","evt","setItem","itemId","JSON","stringify","handleItemDelete","isChecked","prevListItems","newListItems","filter","item","map","prevTotalCount","newTotalCount","changeTotalCount","execute","listen","res","data","boardId","query","value","api","then","catch","err","storedSelectedOption","getItem","response","defaultSelectedOption","parse","className","children","dropdownHandler","clickFunction","resetTotalFunction","parentContext","disabledCheck","undefined","fileName","_jsxFileName","lineNumber","columnNumber","items","handleDelete","handleTotalCount","_c","$RefreshReg$"],"sources":["/home/nenwam/Documents/rallyessentials/batchtask/quickstart-react/src/App.js"],"sourcesContent":["import React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport mondaySdk from \"monday-sdk-js\";\nimport \"monday-ui-react-core/dist/main.css\";\n//Explore more Monday React Components here: https://style.monday.com/\nimport List from \"./modules/List.js\"\nimport ListInput from \"./modules/ListInput.js\";\nimport { Divider } from \"monday-ui-react-core\"\n\n// Usage of mondaySDK example, for more information visit here: https://developer.monday.com/apps/docs/introduction-to-the-sdk/\nconst monday = mondaySdk();\nmonday.setToken(\"eyJhbGciOiJIUzI1NiJ9.eyJ0aWQiOjI5MTI1MjEwNSwiYWFpIjoxMSwidWlkIjo1MDY1MzM4MSwiaWFkIjoiMjAyMy0xMC0yM1QyMToyNzo1Ni40NTBaIiwicGVyIjoibWU6d3JpdGUiLCJhY3RpZCI6MTkzNTI3OTYsInJnbiI6InVzZTEifQ.6IFWFt7JJq7-tQjaLIPa2rLB8kGFRxp0bA6lrb564BI\");\nconst storageInstance = monday.storage.instance;\n\nconst App = () => {\n  const [context, setContext] = useState();\n  const [listItems, setListItems] = useState([]);\n  const [nameInput, setNameInput] = useState(\"\")\n  const [countInput, setCountInput] = useState()\n  const [totalCount, setTotalCount] = useState(0);\n  // const [colOptions, setColOptions] = useState([])\n  const [selectedOption, setSelectedOption] = useState({}); \n  const [optionSelected, setOptionSelected] = useState(false);\n\n\n\n  const handleInput = (name, count) => {\n    setTotalCount(totalCount + parseInt(count))\n    const uniqueKey = Math.random().toString(36).substr(2, 9);\n    const newItem = { uniqueKey: Math.random().toString(36).substr(2, 9), itemName: name, itemCount: parseInt(count) };\n    console.log(\"Key: \", uniqueKey)\n    setListItems([...listItems, newItem])\n    // setListItems([...listItems, <ListItem key={uniqueKey} itemName={nameInput} itemCount={countInput} handleDelete={handleItemDelete} handleTotalCount={changeTotalCount}></ListItem>])\n    setNameInput(\"\")\n    setCountInput()\n    console.log(\"handleInput Option: \", selectedOption)\n  }\n\n  const handleTotalReset = () => {\n    setTotalCount(0)\n  }\n\n  const handleOptionsSelection = (evt) => {\n    setSelectedOption(evt) \n    storageInstance.setItem('selectedOption_' + context.itemId, JSON.stringify(evt));\n    // localStorage.setItem('selectedOption_' + context.itemId, JSON.stringify(selectedOption));\n    console.log(\"handleOptions Option: \", evt) \n  }\n\n  const handleItemDelete = (itemName, itemCount, isChecked) => {\n    // setListItems(prevListItems => prevListItems.filter(item => item.itemName !== itemName));\n    // setTotalCount(prevTotalCount => {\n    //   console.log(\"PrevTotal Count: \", prevTotalCount)\n    //   if (!isChecked) {\n    //     return prevTotalCount - parseInt(itemCount)\n    //   } else if (isChecked) {\n    //     return prevTotalCount\n    //   }\n      \n    // });\n    setListItems(prevListItems => {\n      const newListItems = prevListItems.filter(item => item.itemName !== itemName);\n      prevListItems.map(item => console.log(item.itemName))\n      // Update localStorage to store the new list items\n      console.log(\"New Items\", itemName)\n      // storageInstance.setItem('listItems', JSON.stringify(newListItems));  -- NEWEST\n      // localStorage.setItem('listItems', JSON.stringify(newListItems));\n      return newListItems;\n    });\n  \n    setTotalCount(prevTotalCount => {\n      let newTotalCount;\n      if (!isChecked) {\n        newTotalCount = prevTotalCount - parseInt(itemCount);\n      } else {\n        newTotalCount = prevTotalCount;\n      }\n      // Update localStorage to store the new total count\n      // storageInstance.setItem('totalCount', newTotalCount); -- NEWEST\n      // localStorage.setItem('totalCount', newTotalCount);\n      return newTotalCount;\n    });\n  }\n\n\n  const changeTotalCount = (isChecked, itemCount) => {\n    setTotalCount(prevTotalCount => {\n      if (isChecked) {\n        return prevTotalCount - parseInt(itemCount);\n      } else {\n        return prevTotalCount + parseInt(itemCount);\n      }\n    })\n\n    console.log(\"changeTotal Option: \", selectedOption)  \n  }\n\n\n  // const updateNameValue = (evt) => {\n  //   setNameInput(evt);\n  // }\n\n\n  // const updateCountValue = (evt) => {\n  //   setCountInput(evt);\n  // }\n\n\n  useEffect(() => {\n    console.log(\"----App.js UseEffect #1----\")\n    // Notice this method notifies the monday platform that user gains a first value in an app.\n    // Read more about it here: https://developer.monday.com/apps/docs/mondayexecute#value-created-for-user/\n    monday.execute(\"valueCreatedForUser\");\n\n    // TODO: set up event listeners, Here`s an example, read more here: https://developer.monday.com/apps/docs/mondaylisten/\n    // let isMounted = true\n\n    // const handleContext = (res) => {\n\n    //   if (!isMounted) return\n\n    //   console.log(\"useEffect storage res: \", res)\n    //   setContext(res.data);\n\n    //   storageInstance.getItem('listItems_' + res.data.itemId).then(response => {\n    //     console.log(\"Item Response: \", response)\n    //     setListItems(JSON.parse(response.data.value) || []);  \n    //   });\n    //   storageInstance.getItem('totalCount_' + res.data.itemId).then(response => {\n    //     console.log(\"Count Response: \", response)\n    //     setTotalCount(JSON.parse(response.data.value) || []);\n    //   });\n    //   storageInstance.getItem('selectedOption_' + res.data.itemId).then(response => {\n    //     console.log(\"Option Response: \", response)\n    //     setSelectedOption(JSON.parse(response.data.value) || []);\n    //   });\n\n    //   // const localListItems = JSON.parse(localStorage.getItem('listItems_' + res.data.itemId)) || []\n    //   // setListItems(localListItems)\n    //   // const localTotalCount = parseInt(localStorage.getItem('totalCount_' + res.data.itemId)) || 0\n    //   // setTotalCount(localTotalCount)\n    //   // const localSelectedOption = JSON.parse(localStorage.getItem('selectedOption_' + res.data.itemId)) || {}\n    //   // setSelectedOption(localSelectedOption)\n\n    // }\n\n    // monday.listen(\"context\", handleContext);\n\n    // return () => {\n    //   isMounted = false\n    // }\n\n    // WIthout cleanup\n\n    monday.listen(\"context\", (res) => {\n      console.log(\"useEffect storage res: \", res)\n      setContext(res.data);\n\n      // storageInstance.getItem('listItems_' + res.data.itemId).then(response => {\n      //   // console.log(\"Item Response: \", response)\n      //   setListItems(JSON.parse(response.data.value) || []);  \n      // });\n      // storageInstance.getItem('totalCount_' + res.data.itemId).then(response => {\n      //   // console.log(\"Count Response: \", response)\n      //   setTotalCount(JSON.parse(response.data.value) || []);\n      // });\n      // storageInstance.getItem('selectedOption_' + res.data.itemId).then(response => {\n      //   // console.log(\"Option Response: \", response)\n      //   setSelectedOption(JSON.parse(response.data.value) || []);\n      // });\n\n      // const localListItems = JSON.parse(localStorage.getItem('listItems_' + res.data.itemId)) || []\n      // setListItems(localListItems)\n      // const localTotalCount = parseInt(localStorage.getItem('totalCount_' + res.data.itemId)) || 0\n      // setTotalCount(localTotalCount)\n      // const localSelectedOption = JSON.parse(localStorage.getItem('selectedOption_' + res.data.itemId)) || {}\n      // setSelectedOption(localSelectedOption)\n    });\n\n    \n  }, [/*listItems, colOptions*/]);\n\n  useEffect(() => { // Need to make it so that the add item deletes the previous item input and so that the subitems can be selected rather than just items\n    console.log(\"----App.js UseEffect #2----\")\n    if (selectedOption && context && totalCount != null) {\n      console.log(\"Inner Context: \", selectedOption)\n      const boardId = context.boardId\n      console.log(\"using boardID: \", boardId)\n      const query = `mutation {\n        change_simple_column_value (board_id: ${boardId}, item_id: ${context.itemId}, column_id: \"${selectedOption.value}\", value: \"${JSON.stringify(totalCount)}\") {\n          id\n        }\n      }`;\n      \n      monday.api(query)\n        .then((res) => {\n          console.log(\"Column updated successfully: \", res, \"with \", totalCount);\n        })\n        .catch((err) => {\n          console.log(\"Error updating column: \", err);\n        });\n    }\n  }, [totalCount, selectedOption/*,context*/]);\n\n  useEffect(() => {\n    console.log(\"----App.js UseEffect #3----\")\n    if (context) {\n      console.log(\"Context: \", context)\n      storageInstance.setItem('listItems_' + context.itemId, JSON.stringify(listItems));\n      // localStorage.setItem('listItems_' + context.itemId, JSON.stringify(listItems));\n    }\n    \n  }, [listItems/*, context*/]);\n\n  useEffect(() => {\n    console.log(\"----App.js UseEffect #4----\")\n    if (context) {\n      console.log(\"Context: \", context)\n      storageInstance.setItem('totalCount_' + context.itemId, totalCount.toString());\n      // localStorage.setItem('totalCount_' + context.itemId, totalCount.toString());\n    }\n    \n  }, [totalCount/*, context*/]);\n\n  useEffect(() => {\n    console.log(\"----App.js UseEffect #5----\")\n    if (context) {\n      console.log(\"Context: \", context)\n      storageInstance.setItem('selectedOption_' + context.itemId, JSON.stringify(selectedOption));\n      // localStorage.setItem('selectedOption_' + context.itemId, JSON.stringify(selectedOption));\n      console.log(\"Option: \", selectedOption.value)\n    }\n    \n    \n  }, [selectedOption/*, context*/]);\n\n  useEffect(() => {\n    console.log(\"----App.js UseEffect #6----\")\n    if (context) {\n      const storedSelectedOption = storageInstance.getItem('selectedOption_' + context.itemId).then(response => {\n        if (response.data && response.data.value) {\n          const defaultSelectedOption = JSON.parse(storedSelectedOption);\n          handleOptionsSelection(defaultSelectedOption);\n        }\n      })\n      // const storedSelectedOption = storageInstance.getItem('selectedOption_' + context.itemId);\n      // if (storedSelectedOption) {\n      //   // Set it as the default selected option\n      //   // You may need to adapt this part to match the data structure of your `Dropdown` component\n      //   const defaultSelectedOption = JSON.parse(storedSelectedOption);\n      //   handleOptionsSelection(defaultSelectedOption);\n      // }\n    }\n    \n  }, [])\n\n\n  \n  return (\n    <div className=\"App container\">\n      <div className=\"row\">\n        <div className=\"col-12 py-3\">\n          {context && <ListInput \n            // nameHandler={evt => updateNameValue(evt)} \n            // nameValue={nameInput}\n            // countHandler={evt => updateCountValue(evt)} \n            // countValue={countInput}\n            totalCount={totalCount} \n            dropdownHandler={evt => handleOptionsSelection(evt)}\n            clickFunction={handleInput}\n            resetTotalFunction={handleTotalReset}\n            parentContext={context}\n            disabledCheck={selectedOption.value !== undefined ? false : true }>\n          </ListInput>}\n        </div>\n        <Divider></Divider>\n        <div className=\"col-12\">\n          { context && <List items={listItems} handleDelete={handleItemDelete} parentContext={context} handleTotalCount={changeTotalCount}></List>}\n        </div> \n      </div>\n    </div>\n  );\n};\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}