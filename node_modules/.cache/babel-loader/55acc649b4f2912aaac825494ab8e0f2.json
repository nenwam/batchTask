{"ast":null,"code":"var _jsxFileName = \"/Users/connor/Documents/batchtask/batchTask/src/modules/ListInputMod.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { TextField, Button, Label, Dropdown, Loader, Divider } from \"monday-ui-react-core\";\nimport mondaySdk from \"monday-sdk-js\";\nimport { useState, useEffect, useRef, useMemo } from \"react\";\nimport List from \"./List\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst monday = mondaySdk();\nmonday.setToken(\"eyJhbGciOiJIUzI1NiJ9.eyJ0aWQiOjI5MTI1MjEwNSwiYWFpIjoxMSwidWlkIjo1MDY1MzM4MSwiaWFkIjoiMjAyMy0xMC0yM1QyMToyNzo1Ni4wMDBaIiwicGVyIjoibWU6d3JpdGUiLCJhY3RpZCI6MTkzNTI3OTYsInJnbiI6InVzZTEifQ.IxSCkDC63caJ9dP_HobxQpVMEWXSJUDi-vcyRozQnKA\");\n// monday.setToken(\"eyJhbGciOiJIUzI1NiJ9.eyJ0aWQiOjI3Mjk5MDQ5NiwiYWFpIjoxMSwidWlkIjozNjI5NTI0NywiaWFkIjoiMjAyMy0wOC0wM1QyMToyMjozNy4wMDBaIiwicGVyIjoibWU6d3JpdGUiLCJhY3RpZCI6MTI3MTA0ODYsInJnbiI6InVzZTEifQ.XIrSWOWgg3U7oRd9zrKzL0WAr8Peo5b4ZIU1vfw0T2w\") // rally essentials key\nconst storageInstance = monday.storage.instance;\nconst ListInputMod = _ref => {\n  _s();\n  let {\n    dropdownHandler,\n    printerHandler,\n    clickFunction,\n    resetTotalFunction,\n    selectedVal,\n    printerVal,\n    disabledCheck\n  } = _ref;\n  const [context, setContext] = useState();\n  console.log(\"Context from parent: \", context);\n  const [isInitialized, setIsInitialized] = useState(false); // NEW\n  const [listItems, setListItems] = useState([]);\n  const [totalCount, setTotalCount] = useState(0);\n  const [selectedOption, setSelectedOption] = useState({});\n  const [printerColumnValue, setPrinterColumnValue] = useState(\"Loading Printer...\"); // NEW: State for fetched printer value\n  const [printerColId, setPrinterColId] = useState(null); // NEW: State for Printer column ID\n  const [optionSelected, setOptionSelected] = useState(false);\n  const [shouldLoad, setShouldLoad] = useState(false);\n  const [initialShouldLoad, setInitialShouldLoad] = useState(false);\n  const [colOptions, setColOptions] = useState([]);\n  const countRef = useRef();\n  const [multiplier, setMultiplier] = useState(1);\n  // NEW: Add states for printer dropdown\n  const [printerOptions, setPrinterOptions] = useState([]);\n  const [selectedPrinter, setSelectedPrinter] = useState({});\n  useEffect(() => {\n    console.log(\"----App.js UseEffect #1----\");\n    // Notice this method notifies the monday platform that user gains a first value in an app.\n    // Read more about it here: https://developer.monday.com/apps/docs/mondayexecute#value-created-for-user/\n    monday.execute(\"valueCreatedForUser\");\n    monday.listen(\"context\", res => {\n      console.log(\"useEffect storage res: \", res);\n      setContext(res.data);\n\n      // setShouldLoad(true)\n\n      storageInstance.getItem('listItems_' + res.data.itemId).then(result1 => {\n        setListItems(JSON.parse(result1.data.value) || []);\n        return storageInstance.getItem('listItems_' + res.data.itemId);\n      }).then(result2 => {\n        console.log(\"Loading Initial...\");\n        setListItems(JSON.parse(result2.data.value) || []);\n        return storageInstance.getItem('totalCount_' + res.data.itemId);\n      }).then(result3 => {\n        const parsedCount = parseInt(result3.data.value);\n        setTotalCount(parsedCount || 0);\n        return storageInstance.getItem('selectedOption_' /* + res.data.itemId*/);\n      }).then(result4 => {\n        setSelectedOption(JSON.parse(result4.data.value) || []);\n      }).catch(error => {\n        console.log(error);\n        // setShouldLoad(false)\n      }).finally(() => {\n        // setShouldLoad(false)\n      });\n      console.log(\"ListInput: \", context);\n    });\n  }, []);\n  useEffect(() => {\n    if (context) {\n      console.log(\"Parent Context 2\", context);\n      console.log(\"Context: \", context);\n      const boardId = context.boardId;\n      console.log(\"using boardID: \", context.boardId);\n      const query = `query {\n            boards(ids: ${boardId}) {\n                columns {\n                    id\n                    title\n                    type\n                    settings_str\n                }\n            }\n            }`;\n      monday.api(query).then(res => {\n        console.log(\"ListInput res: \", res);\n        const columns = res.data.boards[0].columns;\n        console.log(\"Columns: \", columns);\n\n        // Find the 'Printer' column ID\n        const printerColumn = columns.find(col => col.title.includes(\"Printer\"));\n        if (printerColumn) {\n          setPrinterColId(printerColumn.id);\n          console.log(\"Found Printer column ID:\", printerColumn.id);\n\n          // NEW: Fetch printer column options if it's a dropdown-type column\n          if (printerColumn.type === 'color' || printerColumn.type === 'dropdown' || printerColumn.type === 'status') {\n            try {\n              // Parse the settings to get the dropdown options\n              const settings = JSON.parse(printerColumn.settings_str);\n              if (settings && settings.labels) {\n                const options = Object.entries(settings.labels).map(_ref2 => {\n                  let [value, label] = _ref2;\n                  return {\n                    value,\n                    label\n                  };\n                });\n                setPrinterOptions(options);\n                console.log(\"Printer options:\", options);\n              }\n            } catch (e) {\n              console.error(\"Error parsing printer column settings:\", e);\n              setPrinterOptions([]);\n            }\n          }\n        } else {\n          console.error(\"Could not find column named 'Printer'\");\n          setPrinterColId(null);\n          setPrinterColumnValue(\"Printer N/A\");\n          setPrinterOptions([]);\n        }\n        const filter = 'numbers'; //numbers\n        const cols = columns.map(column => {\n          return {\n            label: column.title,\n            value: column.id,\n            type: column.type\n          };\n        });\n        console.log(\"cols: \", cols);\n        const filteredCols = cols.filter(col => col.type.includes(filter)).map(col => {\n          return {\n            label: col.label,\n            value: col.value\n          };\n        });\n        setColOptions(filteredCols);\n        storageInstance.setItem(`colOptions`, JSON.stringify(cols)).then(res => {\n          console.log(\"colOptions stored in board storage: \", res);\n        });\n      }).catch(err => {\n        console.log(\"Error fetching columns: \", err);\n        // Handle API error gracefully\n        setPrinterColId(null);\n        setPrinterColumnValue(\"Printer N/A\");\n        setPrinterOptions([]);\n      }).finally(() => {\n        // setShouldLoad(false)\n      });\n    }\n  }, [context]);\n\n  // Modified useEffect to fetch existing value AND printer value\n  useEffect(() => {\n    // Ensure context is present\n    if (context) {\n      const itemId = context.itemId;\n      setIsInitialized(true);\n\n      // If we have a selected column, fetch its value for total count\n      if (selectedOption !== null && selectedOption !== void 0 && selectedOption.value) {\n        const targetColumnId = selectedOption.value;\n        let columnsToFetch = [targetColumnId];\n\n        // Add printer column to fetch if it exists\n        if (printerColId) {\n          columnsToFetch.push(printerColId);\n        }\n        console.log(`Fetching values for columns: ${columnsToFetch.join(', ')} for item: ${itemId}`);\n\n        // Build the query to get column values\n        const query = `query {\n            items (ids: ${itemId}) {\n              column_values (ids: ${JSON.stringify(columnsToFetch)}) {\n                id\n                value\n                text\n              }\n            }\n          }`;\n        monday.api(query).then(res => {\n          var _res$data, _res$data$items;\n          console.log(\"Column Values Response: \", res);\n          if (((_res$data = res.data) === null || _res$data === void 0 ? void 0 : (_res$data$items = _res$data.items) === null || _res$data$items === void 0 ? void 0 : _res$data$items.length) > 0 && res.data.items[0].column_values) {\n            const columnValues = res.data.items[0].column_values;\n\n            // Process Target Column (Total Count)\n            const targetColumnData = columnValues.find(cv => cv.id === targetColumnId);\n            if (targetColumnData) {\n              const columnValue = targetColumnData.value;\n              if (columnValue) {\n                let existingCount = 0;\n                try {\n                  existingCount = JSON.parse(columnValue);\n                } catch (e) {\n                  existingCount = parseInt(columnValue);\n                }\n                if (isNaN(existingCount)) {\n                  existingCount = 0;\n                }\n                setTotalCount(existingCount);\n                console.log(\"Fetched Total Count:\", existingCount);\n              } else {\n                setTotalCount(0); // Reset if column is empty\n                console.log(\"Target column is empty, setting total count to 0.\");\n              }\n            } else {\n              setTotalCount(0); // Reset if column data is missing\n              console.warn(\"Target column data not found in response.\");\n            }\n\n            // Process Printer Column if it exists\n            if (printerColId) {\n              const printerColumnData = columnValues.find(cv => cv.id === printerColId);\n              if (printerColumnData) {\n                // Prefer 'text' for dropdowns/status, fallback to 'value'\n                const printerVal = printerColumnData.text || (printerColumnData.value ? JSON.parse(printerColumnData.value) : null);\n                if (printerVal) {\n                  setPrinterColumnValue(printerVal);\n                  console.log(\"Fetched Printer Value:\", printerVal);\n\n                  // Set the selected printer in the dropdown\n                  if (printerOptions.length > 0) {\n                    const matchingOption = printerOptions.find(option => option.label === printerVal || option.value === printerColumnData.value);\n                    if (matchingOption) {\n                      setSelectedPrinter(matchingOption);\n                      console.log(\"Set selected printer:\", matchingOption);\n                    }\n                  }\n                } else {\n                  setPrinterColumnValue(\"Printer N/A\"); // Set default if empty\n                  console.log(\"Printer column is empty, setting display to 'Printer N/A'.\");\n                }\n              } else {\n                setPrinterColumnValue(\"Printer N/A\"); // Set default if column data missing\n                console.warn(\"Printer column data not found in response.\");\n              }\n            }\n          } else {\n            console.error(\"No items or column values found in response: \", res);\n            setTotalCount(0);\n            if (printerColId) {\n              setPrinterColumnValue(\"Error Fetching Data\");\n            } else {\n              setPrinterColumnValue(\"Printer N/A\");\n            }\n          }\n        }).catch(err => {\n          console.error(\"Error fetching column values: \", err);\n          setTotalCount(0); // Reset on error\n          setPrinterColumnValue(\"Printer N/A\");\n        });\n      } else {\n        // No selected option for target column\n        setTotalCount(0);\n        console.log(\"No target column selected, initializing total count to 0.\");\n\n        // Still try to fetch printer info if possible\n        if (printerColId) {\n          const query = `query {\n              items (ids: ${itemId}) {\n                column_values (ids: [\"${printerColId}\"]) {\n                  id\n                  value\n                  text\n                }\n              }\n            }`;\n          monday.api(query).then(res => {\n            var _res$data2, _res$data2$items, _res$data$items$0$col;\n            if (((_res$data2 = res.data) === null || _res$data2 === void 0 ? void 0 : (_res$data2$items = _res$data2.items) === null || _res$data2$items === void 0 ? void 0 : _res$data2$items.length) > 0 && ((_res$data$items$0$col = res.data.items[0].column_values) === null || _res$data$items$0$col === void 0 ? void 0 : _res$data$items$0$col.length) > 0) {\n              const printerColumnData = res.data.items[0].column_values[0];\n              const printerVal = printerColumnData.text || (printerColumnData.value ? JSON.parse(printerColumnData.value) : null);\n              if (printerVal) {\n                setPrinterColumnValue(printerVal);\n              } else {\n                setPrinterColumnValue(\"Printer N/A\");\n              }\n            } else {\n              setPrinterColumnValue(\"Printer N/A\");\n            }\n          }).catch(err => {\n            console.error(\"Error fetching printer value:\", err);\n            setPrinterColumnValue(\"Printer N/A\");\n          });\n        } else {\n          setPrinterColumnValue(\"Printer N/A\");\n        }\n      }\n    }\n  }, [selectedOption, context, printerColId, printerOptions]);\n  const handleInput = count => {\n    const countAsNum = parseInt(count);\n\n    // Loop to add multiple batches\n    const newItems = [];\n    for (let i = 0; i < multiplier; i++) {\n      // NEW: Loop based on multiplier\n      const totalToAdd = countAsNum; // Each batch will have the same quantity\n      const currentDate = new Date();\n      const currentTime = currentDate.toLocaleTimeString('en-US', {\n        timeStyle: 'short',\n        hour12: true\n      });\n      const uniqueKey = Math.random().toString(36).substr(2, 9);\n      const printerDisplay = printerColumnValue || \"Printer N/A\"; // Use fetched value or default\n      const itemDisplayPos = \"B\" + (listItems.length + (i + 1)) + \" | \" + currentTime + \" - \" + (currentDate.getMonth() + 1) + \"/\" + currentDate.getDate() + \"/\" + currentDate.getFullYear() + \"\\n | \" + printerDisplay;\n      newItems.push({\n        uniqueKey,\n        itemName: itemDisplayPos,\n        itemCount: totalToAdd\n      }); // Create new item for each batch\n    }\n\n    setListItems([...listItems, ...newItems]); // Add all new items at once\n\n    setTotalCount(prevTotalCount => {\n      console.log(\"new total: \", prevTotalCount);\n      return parseInt(prevTotalCount) + countAsNum * multiplier; // Update total count\n    });\n\n    console.log(\"handleInput Option: \", selectedOption);\n  };\n  const handleTotalReset = () => {\n    setTotalCount(0);\n  };\n  const handleOptionsSelection = evt => {\n    setSelectedOption(evt);\n  };\n\n  // NEW: Handle printer dropdown selection\n  const handlePrinterSelection = evt => {\n    setSelectedPrinter(evt);\n\n    // Update the printer column in Monday.com only if the printer column exists\n    if (context && printerColId) {\n      const boardId = context.boardId;\n      const itemId = context.itemId;\n\n      // Create query to update the printer column\n      const query = `mutation {\n            change_column_value(board_id: ${boardId}, item_id: ${itemId}, column_id: \"${printerColId}\", value: ${JSON.stringify(JSON.stringify({\n        label: evt.label\n      }))}) {\n              id\n            }\n          }`;\n      monday.api(query).then(res => {\n        console.log(\"Printer column updated successfully:\", res);\n        // Update local state to reflect the change\n        setPrinterColumnValue(evt.label);\n      }).catch(err => {\n        console.error(\"Error updating printer column:\", err);\n      });\n    } else {\n      // Even without a printer column, update the UI for consistency\n      setPrinterColumnValue(evt.label || \"Printer N/A\");\n    }\n  };\n  const handleItemDelete = (itemName, itemCount, isChecked) => {\n    setListItems(prevListItems => {\n      const newListItems = prevListItems.filter(item => item.itemName !== itemName);\n      prevListItems.map(item => console.log(item.itemName));\n      // Update localStorage to store the new list items\n      console.log(\"New Items\", itemName);\n      return newListItems;\n    });\n    setTotalCount(prevTotalCount => {\n      let newTotalCount;\n      if (!isChecked) {\n        newTotalCount = prevTotalCount - parseInt(itemCount);\n      } else {\n        newTotalCount = prevTotalCount;\n      }\n      // Update localStorage to store the new total count\n      return newTotalCount;\n    });\n  };\n  const changeTotalCount = (isChecked, itemCount) => {\n    console.log(\"isChecked type: \", typeof isChecked);\n    console.log(\"itemCount type: \", typeof itemCount);\n    setTotalCount(prevTotalCount => {\n      if (isChecked) {\n        return parseInt(prevTotalCount) - parseInt(itemCount);\n      } else {\n        return parseInt(prevTotalCount) + parseInt(itemCount);\n      }\n    });\n    console.log(\"changeTotal Option: \", selectedOption);\n  };\n  useEffect(() => {\n    console.log(\"----App.js UseEffect #3----\");\n    if (context) {\n      console.log(\"Context: \", context);\n      setShouldLoad(true);\n      storageInstance.setItem('listItems_' + context.itemId, JSON.stringify(listItems)).catch(error => {\n        console.log(error);\n        setShouldLoad(false);\n      }).finally(() => {\n        console.log(\"Loading...\");\n        setTimeout(() => {\n          setShouldLoad(false);\n        }, 1000);\n      });\n    }\n  }, [listItems]);\n  useEffect(() => {\n    if (isInitialized) {\n      if (context) {\n        // setShouldLoad(true)\n        storageInstance.setItem('totalCount_' + context.itemId, totalCount.toString()).catch(error => {\n          console.log(error);\n          // setShouldLoad(false)\n        }).finally(() => {\n          // setShouldLoad(false)\n        });\n      }\n      if (selectedOption && context && totalCount != null) {\n        console.log(\"Inner Context: \", selectedOption);\n        const boardId = context.boardId;\n        console.log(\"using boardID: \", boardId);\n        const query = `mutation {\n              change_simple_column_value (board_id: ${boardId}, item_id: ${context.itemId}, column_id: \"${selectedOption.value}\", value: \"${JSON.stringify(totalCount)}\") {\n                id\n              }\n            }`;\n        monday.api(query).then(res => {\n          console.log(\"Column updated successfully: \", res, \"with \", totalCount);\n        }).catch(err => {\n          console.log(\"Error updating column: \", err);\n        });\n      }\n    }\n  }, [totalCount, isInitialized]);\n\n  // Update selectedOption in the board storage when it changes\n  useEffect(() => {\n    console.log(\"----App.js UseEffect #5----\");\n    if (context) {\n      console.log(\"Context: \", context);\n      //   setShouldLoad(true)\n      storageInstance.setItem('selectedOption_' /* + context.itemId*/, JSON.stringify(selectedOption)).catch(error => {\n        console.log(error);\n        setShouldLoad(false);\n      }).finally(() => {\n        // setShouldLoad(false)\n      });\n      console.log(\"Option: \", selectedOption.value);\n    }\n  }, [selectedOption]);\n  const handleClick = () => {\n    const countVal = parseInt(countRef.current.value);\n    handleInput(countVal);\n  };\n  const handleDeductClick = () => {\n    const countVal = parseInt(countRef.current.value);\n    handleInput(-countVal);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [console.log(\"Loading Remount\"), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row pb-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-3\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleTotalReset,\n          size: Button.sizes.SMALL,\n          color: Button.colors.NEGATIVE,\n          children: \"Reset Total\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 491,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 490,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-6 d-flex align-items-end\",\n        children: shouldLoad ? /*#__PURE__*/_jsxDEV(Loader, {\n          size: Loader.sizes.SMALL\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 494,\n          columnNumber: 36\n        }, this) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 493,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-3\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-end\",\n          style: {\n            color: \"grey\"\n          },\n          children: \"Version 3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 497,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 496,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 489,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          style: {\n            fontSize: \"1rem\"\n          },\n          children: \"Total Batches\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 502,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col\",\n            children: /*#__PURE__*/_jsxDEV(Label, {\n              text: totalCount\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 508,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 507,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 503,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 501,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 512,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          style: {\n            fontSize: \"1rem\"\n          },\n          children: \"Output Column\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 516,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Dropdown, {\n          placeholder: \"Target column\",\n          onChange: evt => handleOptionsSelection(evt),\n          options: colOptions,\n          value: selectedOption\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 517,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 515,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 500,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row pt-4 pb-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-4 d-flex align-items-end\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginBottom: '0px',\n            width: '100%'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              marginBottom: '4px'\n            },\n            children: \"Printer\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 524,\n            columnNumber: 23\n          }, this), printerColId ? /*#__PURE__*/_jsxDEV(Dropdown, {\n            placeholder: \"Select Printer\",\n            onChange: handlePrinterSelection,\n            options: printerOptions,\n            value: selectedPrinter,\n            disabled: printerOptions.length === 0\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 526,\n            columnNumber: 25\n          }, this) : /*#__PURE__*/_jsxDEV(Label, {\n            color: Label.colors.PRIMARY,\n            text: \"Printer N/A\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 534,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 522,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 521,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col d-flex align-items-end\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              marginBottom: '4px'\n            },\n            children: \"Multiplier\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 540,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            type: \"number\",\n            value: multiplier,\n            onChange: e => setMultiplier(parseInt(e) || 1),\n            placeholder: \"Multiplier\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 541,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 539,\n          columnNumber: 19\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 538,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col d-flex align-items-end\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              marginBottom: '4px'\n            },\n            children: \"Quantity\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 546,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            ref: countRef,\n            type: \"number\",\n            value: \"0\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 547,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 545,\n          columnNumber: 20\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 544,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-1 d-flex align-items-end\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            disabled: shouldLoad ? true : false,\n            onClick: handleClick,\n            size: Button.sizes.SMALL,\n            color: Button.colors.POSITIVE,\n            children: \"Add\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 552,\n            columnNumber: 22\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 551,\n          columnNumber: 20\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 550,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col d-flex align-items-end\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          disabled: shouldLoad ? true : false,\n          onClick: handleDeductClick,\n          size: Button.sizes.SMALL,\n          color: Button.colors.NEGATIVE,\n          children: \"Deduct\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 556,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 555,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 520,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 559,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col-12\",\n      children: /*#__PURE__*/_jsxDEV(List, {\n        items: listItems,\n        handleDelete: handleItemDelete\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 561,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 560,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 487,\n    columnNumber: 9\n  }, this);\n};\n_s(ListInputMod, \"bZo2vpfhmuGJYz28OOGyzntel08=\");\n_c = ListInputMod;\nexport default ListInputMod;\nvar _c;\n$RefreshReg$(_c, \"ListInputMod\");","map":{"version":3,"names":["React","TextField","Button","Label","Dropdown","Loader","Divider","mondaySdk","useState","useEffect","useRef","useMemo","List","jsxDEV","_jsxDEV","monday","setToken","storageInstance","storage","instance","ListInputMod","_ref","_s","dropdownHandler","printerHandler","clickFunction","resetTotalFunction","selectedVal","printerVal","disabledCheck","context","setContext","console","log","isInitialized","setIsInitialized","listItems","setListItems","totalCount","setTotalCount","selectedOption","setSelectedOption","printerColumnValue","setPrinterColumnValue","printerColId","setPrinterColId","optionSelected","setOptionSelected","shouldLoad","setShouldLoad","initialShouldLoad","setInitialShouldLoad","colOptions","setColOptions","countRef","multiplier","setMultiplier","printerOptions","setPrinterOptions","selectedPrinter","setSelectedPrinter","execute","listen","res","data","getItem","itemId","then","result1","JSON","parse","value","result2","result3","parsedCount","parseInt","result4","catch","error","finally","boardId","query","api","columns","boards","printerColumn","find","col","title","includes","id","type","settings","settings_str","labels","options","Object","entries","map","_ref2","label","e","filter","cols","column","filteredCols","setItem","stringify","err","targetColumnId","columnsToFetch","push","join","_res$data","_res$data$items","items","length","column_values","columnValues","targetColumnData","cv","columnValue","existingCount","isNaN","warn","printerColumnData","text","matchingOption","option","_res$data2","_res$data2$items","_res$data$items$0$col","handleInput","count","countAsNum","newItems","i","totalToAdd","currentDate","Date","currentTime","toLocaleTimeString","timeStyle","hour12","uniqueKey","Math","random","toString","substr","printerDisplay","itemDisplayPos","getMonth","getDate","getFullYear","itemName","itemCount","prevTotalCount","handleTotalReset","handleOptionsSelection","evt","handlePrinterSelection","handleItemDelete","isChecked","prevListItems","newListItems","item","newTotalCount","changeTotalCount","setTimeout","handleClick","countVal","current","handleDeductClick","className","children","onClick","size","sizes","SMALL","color","colors","NEGATIVE","fileName","_jsxFileName","lineNumber","columnNumber","style","fontSize","placeholder","onChange","marginBottom","width","disabled","PRIMARY","ref","POSITIVE","handleDelete","_c","$RefreshReg$"],"sources":["/Users/connor/Documents/batchtask/batchTask/src/modules/ListInputMod.js"],"sourcesContent":["import React from \"react\";\nimport { TextField, Button, Label, Dropdown, Loader, Divider } from \"monday-ui-react-core\"\nimport mondaySdk from \"monday-sdk-js\";\nimport { useState, useEffect, useRef, useMemo } from \"react\";\nimport List from \"./List\"\n\nconst monday = mondaySdk();\nmonday.setToken(\"eyJhbGciOiJIUzI1NiJ9.eyJ0aWQiOjI5MTI1MjEwNSwiYWFpIjoxMSwidWlkIjo1MDY1MzM4MSwiaWFkIjoiMjAyMy0xMC0yM1QyMToyNzo1Ni4wMDBaIiwicGVyIjoibWU6d3JpdGUiLCJhY3RpZCI6MTkzNTI3OTYsInJnbiI6InVzZTEifQ.IxSCkDC63caJ9dP_HobxQpVMEWXSJUDi-vcyRozQnKA\");\n// monday.setToken(\"eyJhbGciOiJIUzI1NiJ9.eyJ0aWQiOjI3Mjk5MDQ5NiwiYWFpIjoxMSwidWlkIjozNjI5NTI0NywiaWFkIjoiMjAyMy0wOC0wM1QyMToyMjozNy4wMDBaIiwicGVyIjoibWU6d3JpdGUiLCJhY3RpZCI6MTI3MTA0ODYsInJnbiI6InVzZTEifQ.XIrSWOWgg3U7oRd9zrKzL0WAr8Peo5b4ZIU1vfw0T2w\") // rally essentials key\nconst storageInstance = monday.storage.instance;\n\nconst ListInputMod = ({dropdownHandler, printerHandler, clickFunction, resetTotalFunction, selectedVal, printerVal, disabledCheck}) => {\n    const [context, setContext] = useState()\n    console.log(\"Context from parent: \", context)\n    const [isInitialized, setIsInitialized] = useState(false); // NEW\n    const [listItems, setListItems] = useState([]);\n    const [totalCount, setTotalCount] = useState(0);\n    const [selectedOption, setSelectedOption] = useState({});\n    const [printerColumnValue, setPrinterColumnValue] = useState(\"Loading Printer...\"); // NEW: State for fetched printer value\n    const [printerColId, setPrinterColId] = useState(null); // NEW: State for Printer column ID\n    const [optionSelected, setOptionSelected] = useState(false);\n    const [shouldLoad, setShouldLoad] = useState(false);\n    const [initialShouldLoad, setInitialShouldLoad] = useState(false);\n    const [colOptions, setColOptions] = useState([])\n    const countRef = useRef();\n    const [multiplier, setMultiplier] = useState(1);\n    // NEW: Add states for printer dropdown\n    const [printerOptions, setPrinterOptions] = useState([]);\n    const [selectedPrinter, setSelectedPrinter] = useState({});\n\n    useEffect(() => {\n        console.log(\"----App.js UseEffect #1----\")\n        // Notice this method notifies the monday platform that user gains a first value in an app.\n        // Read more about it here: https://developer.monday.com/apps/docs/mondayexecute#value-created-for-user/\n        monday.execute(\"valueCreatedForUser\");\n    \n        monday.listen(\"context\", (res) => {\n          console.log(\"useEffect storage res: \", res)\n          setContext(res.data);\n    \n          // setShouldLoad(true)\n    \n          storageInstance.getItem('listItems_' + res.data.itemId).then(result1 => {\n            setListItems(JSON.parse(result1.data.value) || []);  \n            return storageInstance.getItem('listItems_' + res.data.itemId)\n          }).then(result2 => {\n            console.log(\"Loading Initial...\")\n            setListItems(JSON.parse(result2.data.value) || []);\n            return storageInstance.getItem('totalCount_' + res.data.itemId)\n          }).then(result3 => {\n            const parsedCount = parseInt(result3.data.value)\n            setTotalCount(parsedCount || 0);\n            return storageInstance.getItem('selectedOption_'/* + res.data.itemId*/)\n          }).then(result4 => { \n            setSelectedOption(JSON.parse(result4.data.value) || []);\n          }).catch(error => { \n            console.log(error)\n            // setShouldLoad(false)\n          }).finally(() => { \n            // setShouldLoad(false)\n          })\n\n        console.log(\"ListInput: \", context)\n    \n        });\n    \n        \n      }, []);\n\n      useEffect(() => {\n        if (context) {\n          console.log(\"Parent Context 2\", context)\n\n            console.log(\"Context: \", context)\n            const boardId = context.boardId;\n            console.log(\"using boardID: \", context.boardId)\n            \n            const query = `query {\n            boards(ids: ${boardId}) {\n                columns {\n                    id\n                    title\n                    type\n                    settings_str\n                }\n            }\n            }`;\n            monday.api(query).then((res) => {\n                console.log(\"ListInput res: \", res);\n                const columns = res.data.boards[0].columns;\n                console.log(\"Columns: \", columns);\n\n                // Find the 'Printer' column ID\n                const printerColumn = columns.find(col => col.title.includes(\"Printer\"));\n                if (printerColumn) {\n                  setPrinterColId(printerColumn.id);\n                  console.log(\"Found Printer column ID:\", printerColumn.id);\n                  \n                  // NEW: Fetch printer column options if it's a dropdown-type column\n                  if (printerColumn.type === 'color' || printerColumn.type === 'dropdown' || printerColumn.type === 'status') {\n                    try {\n                      // Parse the settings to get the dropdown options\n                      const settings = JSON.parse(printerColumn.settings_str);\n                      if (settings && settings.labels) {\n                        const options = Object.entries(settings.labels).map(([value, label]) => ({\n                          value,\n                          label\n                        }));\n                        setPrinterOptions(options);\n                        console.log(\"Printer options:\", options);\n                      }\n                    } catch (e) {\n                      console.error(\"Error parsing printer column settings:\", e);\n                      setPrinterOptions([]);\n                    }\n                  }\n                } else {\n                  console.error(\"Could not find column named 'Printer'\");\n                  setPrinterColId(null);\n                  setPrinterColumnValue(\"Printer N/A\");\n                  setPrinterOptions([]);\n                }\n\n                const filter = 'numbers'  //numbers\n                const cols = columns.map(column => {                      \n                    return {label: column.title, value: column.id, type: column.type}\n                })\n                console.log(\"cols: \", cols)\n                const filteredCols = cols\n                .filter(col => col.type.includes(filter))\n                .map(col => {\n                    return {label: col.label, value: col.value}\n                })\n                setColOptions(filteredCols)\n                storageInstance.setItem(`colOptions`, JSON.stringify(cols)).then((res) => {\n                    console.log(\"colOptions stored in board storage: \", res);\n                })\n            }).catch((err) => {\n                console.log(\"Error fetching columns: \", err);\n                // Handle API error gracefully\n                setPrinterColId(null);\n                setPrinterColumnValue(\"Printer N/A\");\n                setPrinterOptions([]);\n            }).finally(() => {\n                // setShouldLoad(false)\n            });\n        }\n        \n      }, [context])\n\n    // Modified useEffect to fetch existing value AND printer value\n    useEffect(() => {\n      // Ensure context is present\n      if (context) {\n        const itemId = context.itemId;\n        setIsInitialized(true);\n        \n        // If we have a selected column, fetch its value for total count\n        if (selectedOption?.value) {\n          const targetColumnId = selectedOption.value;\n          let columnsToFetch = [targetColumnId];\n          \n          // Add printer column to fetch if it exists\n          if (printerColId) {\n            columnsToFetch.push(printerColId);\n          }\n\n          console.log(`Fetching values for columns: ${columnsToFetch.join(', ')} for item: ${itemId}`);\n\n          // Build the query to get column values\n          const query = `query {\n            items (ids: ${itemId}) {\n              column_values (ids: ${JSON.stringify(columnsToFetch)}) {\n                id\n                value\n                text\n              }\n            }\n          }`;\n\n          monday.api(query)\n            .then((res) => {\n              console.log(\"Column Values Response: \", res);\n              if (res.data?.items?.length > 0 && res.data.items[0].column_values) {\n                const columnValues = res.data.items[0].column_values;\n\n                // Process Target Column (Total Count)\n                const targetColumnData = columnValues.find(cv => cv.id === targetColumnId);\n                if (targetColumnData) {\n                  const columnValue = targetColumnData.value;\n                  if (columnValue) {\n                    let existingCount = 0;\n                    try {\n                      existingCount = JSON.parse(columnValue);\n                    } catch (e) {\n                      existingCount = parseInt(columnValue);\n                    }\n                    if (isNaN(existingCount)) {\n                      existingCount = 0;\n                    }\n                    setTotalCount(existingCount);\n                    console.log(\"Fetched Total Count:\", existingCount);\n                  } else {\n                    setTotalCount(0); // Reset if column is empty\n                    console.log(\"Target column is empty, setting total count to 0.\");\n                  }\n                } else {\n                   setTotalCount(0); // Reset if column data is missing\n                   console.warn(\"Target column data not found in response.\");\n                }\n\n                // Process Printer Column if it exists\n                if (printerColId) {\n                  const printerColumnData = columnValues.find(cv => cv.id === printerColId);\n                  if (printerColumnData) {\n                    // Prefer 'text' for dropdowns/status, fallback to 'value'\n                    const printerVal = printerColumnData.text || (printerColumnData.value ? JSON.parse(printerColumnData.value) : null);\n                    if (printerVal) {\n                      setPrinterColumnValue(printerVal);\n                      console.log(\"Fetched Printer Value:\", printerVal);\n                      \n                      // Set the selected printer in the dropdown\n                      if (printerOptions.length > 0) {\n                        const matchingOption = printerOptions.find(option => \n                          option.label === printerVal || option.value === printerColumnData.value\n                        );\n                        if (matchingOption) {\n                          setSelectedPrinter(matchingOption);\n                          console.log(\"Set selected printer:\", matchingOption);\n                        }\n                      }\n                    } else {\n                      setPrinterColumnValue(\"Printer N/A\"); // Set default if empty\n                      console.log(\"Printer column is empty, setting display to 'Printer N/A'.\");\n                    }\n                  } else {\n                    setPrinterColumnValue(\"Printer N/A\"); // Set default if column data missing\n                    console.warn(\"Printer column data not found in response.\");\n                  }\n                }\n              } else {\n                 console.error(\"No items or column values found in response: \", res);\n                 setTotalCount(0);\n                 if (printerColId) {\n                   setPrinterColumnValue(\"Error Fetching Data\");\n                 } else {\n                   setPrinterColumnValue(\"Printer N/A\");\n                 }\n              }\n            })\n            .catch((err) => {\n              console.error(\"Error fetching column values: \", err);\n              setTotalCount(0); // Reset on error\n              setPrinterColumnValue(\"Printer N/A\");\n            });\n        } else {\n          // No selected option for target column\n          setTotalCount(0);\n          console.log(\"No target column selected, initializing total count to 0.\");\n          \n          // Still try to fetch printer info if possible\n          if (printerColId) {\n            const query = `query {\n              items (ids: ${itemId}) {\n                column_values (ids: [\"${printerColId}\"]) {\n                  id\n                  value\n                  text\n                }\n              }\n            }`;\n            \n            monday.api(query)\n              .then(res => {\n                if (res.data?.items?.length > 0 && res.data.items[0].column_values?.length > 0) {\n                  const printerColumnData = res.data.items[0].column_values[0];\n                  const printerVal = printerColumnData.text || (printerColumnData.value ? JSON.parse(printerColumnData.value) : null);\n                  if (printerVal) {\n                    setPrinterColumnValue(printerVal);\n                  } else {\n                    setPrinterColumnValue(\"Printer N/A\");\n                  }\n                } else {\n                  setPrinterColumnValue(\"Printer N/A\");\n                }\n              })\n              .catch(err => {\n                console.error(\"Error fetching printer value:\", err);\n                setPrinterColumnValue(\"Printer N/A\");\n              });\n          } else {\n            setPrinterColumnValue(\"Printer N/A\");\n          }\n        }\n      }\n    }, [selectedOption, context, printerColId, printerOptions]);\n\n      const handleInput = (count) => {\n        const countAsNum = parseInt(count);\n        \n        // Loop to add multiple batches\n        const newItems = [];\n        for (let i = 0; i < multiplier; i++) { // NEW: Loop based on multiplier\n            const totalToAdd = countAsNum; // Each batch will have the same quantity\n            const currentDate = new Date();\n            const currentTime = currentDate.toLocaleTimeString('en-US', {timeStyle: 'short', hour12: true});\n            const uniqueKey = Math.random().toString(36).substr(2, 9);\n            const printerDisplay = printerColumnValue || \"Printer N/A\"; // Use fetched value or default\n            const itemDisplayPos = \"B\" + (listItems.length + (i + 1)) + \" | \" + currentTime + \" - \" + \n                (currentDate.getMonth() + 1) + \"/\" + currentDate.getDate() + \"/\" + currentDate.getFullYear() + \"\\n | \" + printerDisplay;\n            \n            newItems.push({ uniqueKey, itemName: itemDisplayPos, itemCount: totalToAdd }); // Create new item for each batch\n        }\n    \n        setListItems([...listItems, ...newItems]); // Add all new items at once\n    \n        setTotalCount(prevTotalCount => {\n            console.log(\"new total: \", prevTotalCount);\n            return parseInt(prevTotalCount) + (countAsNum * multiplier); // Update total count\n        });\n    \n        console.log(\"handleInput Option: \", selectedOption);\n      }\n    \n      const handleTotalReset = () => {\n        setTotalCount(0)\n      }\n    \n      const handleOptionsSelection = (evt) => {\n        setSelectedOption(evt) \n      }\n    \n      // NEW: Handle printer dropdown selection\n      const handlePrinterSelection = (evt) => {\n        setSelectedPrinter(evt);\n        \n        // Update the printer column in Monday.com only if the printer column exists\n        if (context && printerColId) {\n          const boardId = context.boardId;\n          const itemId = context.itemId;\n          \n          // Create query to update the printer column\n          const query = `mutation {\n            change_column_value(board_id: ${boardId}, item_id: ${itemId}, column_id: \"${printerColId}\", value: ${JSON.stringify(JSON.stringify({label: evt.label}))}) {\n              id\n            }\n          }`;\n          \n          monday.api(query)\n            .then((res) => {\n              console.log(\"Printer column updated successfully:\", res);\n              // Update local state to reflect the change\n              setPrinterColumnValue(evt.label);\n            })\n            .catch((err) => {\n              console.error(\"Error updating printer column:\", err);\n            });\n        } else {\n          // Even without a printer column, update the UI for consistency\n          setPrinterColumnValue(evt.label || \"Printer N/A\");\n        }\n      }\n    \n      const handleItemDelete = (itemName, itemCount, isChecked) => {\n    \n        setListItems(prevListItems => {\n          const newListItems = prevListItems.filter(item => item.itemName !== itemName);\n          prevListItems.map(item => console.log(item.itemName))\n          // Update localStorage to store the new list items\n          console.log(\"New Items\", itemName)\n          return newListItems;\n        });\n      \n        setTotalCount(prevTotalCount => {\n          let newTotalCount;\n          if (!isChecked) {\n            newTotalCount = prevTotalCount - parseInt(itemCount);\n          } else {\n            newTotalCount = prevTotalCount;\n          }\n          // Update localStorage to store the new total count\n          return newTotalCount;\n        });\n      }\n    \n      const changeTotalCount = (isChecked, itemCount) => {\n        console.log(\"isChecked type: \", typeof(isChecked))\n        console.log(\"itemCount type: \", typeof(itemCount))\n        setTotalCount(prevTotalCount => {\n          if (isChecked) {\n            return parseInt(prevTotalCount) - parseInt(itemCount);\n          } else {\n            return parseInt(prevTotalCount) + parseInt(itemCount);\n          }\n        })\n    \n        console.log(\"changeTotal Option: \", selectedOption)  \n      }\n    \n      useEffect(() => {\n        console.log(\"----App.js UseEffect #3----\")\n        if (context) {\n          console.log(\"Context: \", context)\n          setShouldLoad(true)\n          storageInstance.setItem('listItems_' + context.itemId, JSON.stringify(listItems)\n          ).catch(error => { \n            console.log(error)\n            setShouldLoad(false)\n          }).finally(() => { \n            console.log(\"Loading...\")\n            setTimeout(() => {\n                setShouldLoad(false)\n            }, 1000)\n          });\n          \n        }\n    \n        \n        \n      }, [listItems]);\n\n      useEffect(() => {\n        if (isInitialized) {\n          if (context) {\n            // setShouldLoad(true)\n            storageInstance.setItem('totalCount_' + context.itemId, totalCount.toString())\n            .catch(error => { \n                console.log(error)\n                // setShouldLoad(false)\n            }).finally(() => { \n                // setShouldLoad(false)\n            });\n        }\n\n        if (selectedOption && context && totalCount != null) {\n            console.log(\"Inner Context: \", selectedOption)\n            const boardId = context.boardId\n            console.log(\"using boardID: \", boardId)\n            const query = `mutation {\n              change_simple_column_value (board_id: ${boardId}, item_id: ${context.itemId}, column_id: \"${selectedOption.value}\", value: \"${JSON.stringify(totalCount)}\") {\n                id\n              }\n            }`;\n            \n            monday.api(query)\n              .then((res) => {\n                console.log(\"Column updated successfully: \", res, \"with \", totalCount);\n              })\n              .catch((err) => {\n                console.log(\"Error updating column: \", err);\n              });\n          }\n        }        \n      }, [totalCount, isInitialized])\n    \n      // Update selectedOption in the board storage when it changes\n      useEffect(() => {\n        console.log(\"----App.js UseEffect #5----\")\n        if (context) {\n          console.log(\"Context: \", context)\n        //   setShouldLoad(true)\n          storageInstance.setItem('selectedOption_'/* + context.itemId*/, JSON.stringify(selectedOption)\n          ).catch(error => { \n            console.log(error)\n            setShouldLoad(false)\n          }).finally(() => { \n            // setShouldLoad(false)\n          });\n          console.log(\"Option: \", selectedOption.value)\n        }\n        \n        \n      }, [selectedOption]);\n    \n\n    const handleClick = () => {\n        const countVal = parseInt(countRef.current.value)\n        handleInput(countVal)\n    }\n\n    const handleDeductClick = () => {\n      const countVal = parseInt(countRef.current.value)\n      handleInput(-countVal)\n    }\n\n    return (\n        <div className=\"container\">\n            {console.log(\"Loading Remount\")}\n            <div className=\"row pb-3\">\n                <div className=\"col-3\">\n                    <Button onClick={handleTotalReset} size={Button.sizes.SMALL} color={Button.colors.NEGATIVE}>Reset Total</Button>\n                </div>\n                <div className=\"col-6 d-flex align-items-end\">\n                    { shouldLoad ? <Loader size={Loader.sizes.SMALL}></Loader> : null }\n                </div>\n                <div className=\"col-3\">\n                    <p className=\"text-end\" style={{color: \"grey\"}}>Version 3</p>\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col-3\">\n                    <h4 style={{fontSize: \"1rem\"}}>Total Batches</h4>\n                    <div className=\"row\">\n                        {/* <div className=\"col\">\n                            <h4>Total</h4>\n                        </div> */}\n                        <div className=\"col\">\n                            <Label text={totalCount}></Label>\n                        </div>\n                    </div>\n                </div>  \n                <div className=\"col-3\">\n                    \n                </div>\n                <div className=\"col-6\">\n                <h4 style={{fontSize: \"1rem\"}}>Output Column</h4>\n                    <Dropdown placeholder=\"Target column\" onChange={evt => handleOptionsSelection(evt)} options={colOptions} value={selectedOption}></Dropdown>\n                </div>\n            </div>\n            <div className=\"row pt-4 pb-4\">\n                <div className=\"col-4 d-flex align-items-end\">\n                    <div style={{ marginBottom: '0px', width: '100%' }}>\n                      {/* REPLACED: Label with Dropdown */}\n                      <p style={{ marginBottom: '4px' }}>Printer</p>\n                      {printerColId ? (\n                        <Dropdown \n                          placeholder=\"Select Printer\" \n                          onChange={handlePrinterSelection} \n                          options={printerOptions} \n                          value={selectedPrinter}\n                          disabled={printerOptions.length === 0}\n                        />\n                      ) : (\n                        <Label color={Label.colors.PRIMARY} text=\"Printer N/A\"></Label>\n                      )}\n                    </div>\n                </div>\n                <div className=\"col d-flex align-items-end\">\n                  <div>\n                    <p style={{ marginBottom: '4px' }}>Multiplier</p>\n                    <TextField type=\"number\" value={multiplier} onChange={e => setMultiplier(parseInt(e) || 1)} placeholder=\"Multiplier\" />\n                  </div>\n                </div>\n                <div className=\"col d-flex align-items-end\">\n                   <div>\n                    <p style={{ marginBottom: '4px' }}>Quantity</p>\n                    <TextField ref={countRef} type=\"number\" value=\"0\" />\n                  </div>\n                </div>\n                <div className=\"col-1 d-flex align-items-end\">\n                   <div className=\"row\">\n                     <Button disabled={shouldLoad ? true : false} onClick={handleClick} size={Button.sizes.SMALL} color={Button.colors.POSITIVE}>Add</Button>\n                   </div>\n                </div>\n                <div className=\"col d-flex align-items-end\">\n                    <Button disabled={shouldLoad ? true : false} onClick={handleDeductClick} size={Button.sizes.SMALL} color={Button.colors.NEGATIVE}>Deduct</Button>\n                </div>\n            </div>\n            <Divider></Divider>\n            <div className=\"col-12\">\n                <List items={listItems} handleDelete={handleItemDelete}></List>\n            </div> \n        </div>\n    );\n}\n\nexport default ListInputMod"],"mappings":"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"},"metadata":{},"sourceType":"module"}