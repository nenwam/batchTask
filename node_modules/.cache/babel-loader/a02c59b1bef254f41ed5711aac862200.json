{"ast":null,"code":"var _jsxFileName = \"/home/nenwam/Documents/rallyessentials/batchtask/quickstart-react/src/modules/ListInputMod.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { TextField, Button, Label, Dropdown, Loader, Divider } from \"monday-ui-react-core\";\nimport mondaySdk from \"monday-sdk-js\";\nimport { useState, useEffect, useRef } from \"react\";\nimport List from \"./List\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst monday = mondaySdk();\nmonday.setToken(\"eyJhbGciOiJIUzI1NiJ9.eyJ0aWQiOjI3Mjk5MDQ5NiwiYWFpIjoxMSwidWlkIjozNjI5NTI0NywiaWFkIjoiMjAyMy0wOC0wM1QyMToyMjozNy4wMDBaIiwicGVyIjoibWU6d3JpdGUiLCJhY3RpZCI6MTI3MTA0ODYsInJnbiI6InVzZTEifQ.XIrSWOWgg3U7oRd9zrKzL0WAr8Peo5b4ZIU1vfw0T2w\");\nconst storageInstance = monday.storage.instance;\nconst ListInputMod = _ref => {\n  _s();\n  let {\n    dropdownHandler,\n    printerHandler,\n    clickFunction,\n    resetTotalFunction,\n    parentContext,\n    selectedVal,\n    printerVal,\n    disabledCheck\n  } = _ref;\n  // const [context, setContext] = useState();\n  console.log(\"parentContext: \", parentContext);\n  const {\n    context,\n    setContext\n  } = parentContext;\n  console.log(\"Context from parent: \", context);\n  const [listItems, setListItems] = useState([]);\n  // const [nameInput, setNameInput] = useState(\"\")\n  // const [countInput, setCountInput] = useState()\n  const [totalCount, setTotalCount] = useState(0);\n  // const [colOptions, setColOptions] = useState([])\n  const [selectedOption, setSelectedOption] = useState({});\n  const [printerOptions, setPrinterOptions] = useState({});\n  const [optionSelected, setOptionSelected] = useState(false);\n  const [shouldLoad, setShouldLoad] = useState(false);\n  const [initialShouldLoad, setInitialShouldLoad] = useState(false);\n  const [colOptions, setColOptions] = useState([]);\n  const nameRef = useRef();\n  const countRef = useRef();\n  const printerList = [{\n    label: \"Printer 1\",\n    value: \"printer1\"\n  }, {\n    label: \"Printer 2\",\n    value: \"printer2\"\n  }, {\n    label: \"Printer 3\",\n    value: \"printer3\"\n  }, {\n    label: \"Printer 4\",\n    value: \"printer4\"\n  }, {\n    label: \"Printer 5\",\n    value: \"printer5\"\n  }, {\n    label: \"Printer 6\",\n    value: \"printer6\"\n  }];\n\n  // useEffect(() => {\n  //     localStorage.setItem('colOptions_' + context.itemId, JSON.stringify(colOptions));\n  //   }, [colOptions]);\n\n  // useEffect(() => {\n  //     const contextUnsubscribe = monday.listen(\"context\", (res) => {\n  //       setContext(res.data);\n  //     //   storageInstance.getItem(`colOptions` + res.data.itemId).then(response => {\n  //     //     setColOptions(JSON.parse(response.data.value) || []);\n  //     //   });\n  //     //   const localColOptions = JSON.parse(localStorage.getItem('colOptions_' + res.data.itemId)) || []\n  //     //   setColOptions(localColOptions)\n  //     });\n\n  //     // Clean up the subscription when the component unmounts\n  //     return () => {\n  //       contextUnsubscribe && contextUnsubscribe.unsubscribe();\n  //     };\n  //   }, []);\n\n  useEffect(() => {\n    // setColOptions(() => {\n    //     console.log(context)\n\n    //     console.log(\"Context: \", context)\n    //     const boardId = context.boardId;\n\n    //     const query = `query {\n    //     boards(ids: ${boardId}) {\n    //         columns {\n    //         id\n    //         title\n    //         }\n    //     }\n    //     }`;\n    //     monday.api(query).then((res) => {\n    //         console.log(\"res: \", res);\n    //         const columns = res.data.boards[0].columns;\n    //         console.log(\"Columns: \", columns);\n    //         const cols = columns.map(column => {\n    //             return {label: column.title, value: column.id}\n    //         })\n    //         console.log(\"cols: \", cols)\n    //         return cols\n    //     }).catch((err) => {\n    //         console.log(\"Error fetching columns: \", err);\n    //     });\n    // })\n    console.log(\"ListInput: \", parentContext);\n    if (parentContext) {\n      console.log(\"Parent Context 2\", parentContext);\n      console.log(\"Context: \", parentContext);\n      const boardId = parentContext.boardId;\n      console.log(\"using boardID: \", parentContext.boardId);\n      const query = `query {\n            boards(ids: ${boardId}) {\n                columns {\n                    id\n                    title\n                }\n            }\n            }`;\n      monday.api(query).then(res => {\n        console.log(\"ListInput res: \", res);\n        const columns = res.data.boards[0].columns;\n        console.log(\"Columns: \", columns);\n        const cols = columns.map(column => {\n          return {\n            label: column.title,\n            value: column.id\n          };\n        });\n        console.log(\"cols: \", cols);\n        setColOptions(cols);\n        storageInstance.setItem(`colOptions`, JSON.stringify(cols)).then(res => {\n          console.log(\"colOptions stored in board storage: \", res);\n        });\n      }).catch(err => {\n        console.log(\"Error fetching columns: \", err);\n      });\n    }\n  }, [parentContext]);\n  const handleInput = (name, count) => {\n    console.log(\"count: \", totalCount);\n    const countAsNum = parseInt(count);\n    setTotalCount(prevTotalCount => {\n      console.log(\"new total: \", prevTotalCount);\n      return parseInt(prevTotalCount) + countAsNum;\n    });\n    const currentDate = new Date();\n    const currentTime = currentDate.toLocaleTimeString('en-US', {\n      timeStyle: 'short',\n      hour12: true\n    });\n    const uniqueKey = Math.random().toString(36).substr(2, 9);\n    const printerDisplay = printerOptions.label == undefined ? \"Printer N/A\" : printerOptions.label;\n    const itemDisplayPos = \"B\" + (listItems.length + 1) + \" | \" + currentTime + \" - \" + (currentDate.getMonth() + 1) + \"/\" + currentDate.getDate() + \"/\" + currentDate.getFullYear() + \"\\n | \" + printerDisplay;\n    const newItem = {\n      uniqueKey: Math.random().toString(36).substr(2, 9),\n      itemName: itemDisplayPos,\n      itemCount: countAsNum\n    };\n    console.log(\"Key: \", uniqueKey);\n    setListItems([...listItems, newItem]);\n    console.log(\"handleInput Option: \", selectedOption);\n  };\n  const handleTotalReset = () => {\n    setTotalCount(0);\n  };\n  const handleOptionsSelection = evt => {\n    setSelectedOption(evt);\n    setShouldLoad(true);\n    storageInstance.setItem('selectedOption_' /* + context.itemId*/, JSON.stringify(evt)).catch(error => {\n      console.log(error);\n      setShouldLoad(false);\n    }).finally(() => {\n      setShouldLoad(false);\n    });\n    console.log(\"handleOptions Option: \", evt);\n  };\n  const handlePrinterSelection = evt => {\n    setPrinterOptions(evt);\n    setShouldLoad(true);\n    storageInstance.setItem('printerOptions_' + context.itemId, JSON.stringify(evt)).catch(error => {\n      console.log(error);\n      setShouldLoad(false);\n    }).finally(() => {\n      setShouldLoad(false);\n    });\n    console.log(\"handleOptions Option: \", evt);\n  };\n  const handleItemDelete = (itemName, itemCount, isChecked) => {\n    setListItems(prevListItems => {\n      const newListItems = prevListItems.filter(item => item.itemName !== itemName);\n      prevListItems.map(item => console.log(item.itemName));\n      // Update localStorage to store the new list items\n      console.log(\"New Items\", itemName);\n      return newListItems;\n    });\n    setTotalCount(prevTotalCount => {\n      let newTotalCount;\n      if (!isChecked) {\n        newTotalCount = prevTotalCount - parseInt(itemCount);\n      } else {\n        newTotalCount = prevTotalCount;\n      }\n      // Update localStorage to store the new total count\n      return newTotalCount;\n    });\n  };\n  const changeTotalCount = (isChecked, itemCount) => {\n    console.log(\"isChecked type: \", typeof isChecked);\n    console.log(\"itemCount type: \", typeof itemCount);\n    setTotalCount(prevTotalCount => {\n      if (isChecked) {\n        return parseInt(prevTotalCount) - parseInt(itemCount);\n      } else {\n        return parseInt(prevTotalCount) + parseInt(itemCount);\n      }\n    });\n    console.log(\"changeTotal Option: \", selectedOption);\n  };\n  useEffect(() => {\n    console.log(\"----App.js UseEffect #1----\");\n    // Notice this method notifies the monday platform that user gains a first value in an app.\n    // Read more about it here: https://developer.monday.com/apps/docs/mondayexecute#value-created-for-user/\n    monday.execute(\"valueCreatedForUser\");\n    monday.listen(\"context\", res => {\n      console.log(\"useEffect storage res: \", res);\n      setContext(res.data);\n\n      // setShouldLoad(true)\n\n      storageInstance.getItem('listItems_' + res.data.itemId).then(result1 => {\n        setListItems(JSON.parse(result1.data.value) || []);\n        return storageInstance.getItem('listItems_' + res.data.itemId);\n      }).then(result2 => {\n        setListItems(JSON.parse(result2.data.value) || []);\n        return storageInstance.getItem('totalCount_' + res.data.itemId);\n      }).then(result3 => {\n        const parsedCount = parseInt(result3.data.value);\n        setTotalCount(parsedCount || 0);\n        return storageInstance.getItem('selectedOption_' /* + res.data.itemId*/);\n      }).then(result4 => {\n        setSelectedOption(JSON.parse(result4.data.value) || []);\n        return storageInstance.getItem('printerOption_' + res.data.itemId);\n      }).then(result5 => {\n        setPrinterOptions(JSON.parse(result5.data.value) || []);\n      }).catch(error => {\n        console.log(error);\n        // setShouldLoad(false)\n      }).finally(() => {\n        // setShouldLoad(false)\n      });\n\n      // storageInstance.getItem('listItems_' + res.data.itemId).then(response => {\n      //   setListItems(JSON.parse(response.data.value) || []);  \n      // }).catch(error => {\n      //   console.log(error)\n      //   // setShouldLoad(false)\n      // })\n\n      // storageInstance.getItem('totalCount_' + res.data.itemId).then(response => {\n      //   console.log(\"Count Response: \", response.data.value)\n      //   const parsedCount = parseInt(response.data.value)\n      //   setTotalCount(parsedCount || 0);\n      // }).catch(error => { \n      //   console.log(error)\n      //   // setShouldLoad(false)\n      // })\n\n      // storageInstance.getItem('selectedOption_'/* + res.data.itemId*/).then(response => {\n      //   console.log(\"Option Response: \", response)\n      //   setSelectedOption(JSON.parse(response.data.value) || []);\n      // }).catch(error => { \n      //   console.log(error)\n      //   // setShouldLoad(false)\n      // })\n\n      // storageInstance.getItem('printerOption_' + res.data.itemId).then(response => {\n      //   console.log(\"Printer Response: \", response.data.value)\n      //   setPrinterOptions(JSON.parse(response.data.value) || []);\n      // }).catch(error => { \n      //   console.log(error)\n      // }).finally(() => {\n      //   setShouldLoad(false)\n      // });\n    });\n  }, []);\n\n  // useEffect(() => { \n  //   console.log(\"----App.js UseEffect #2----\")\n  //   if (selectedOption && context && totalCount != null) {\n  //     console.log(\"Inner Context: \", selectedOption)\n  //     const boardId = context.boardId\n  //     console.log(\"using boardID: \", boardId)\n  //     const query = `mutation {\n  //       change_simple_column_value (board_id: ${boardId}, item_id: ${context.itemId}, column_id: \"${selectedOption.value}\", value: \"${JSON.stringify(totalCount)}\") {\n  //         id\n  //       }\n  //     }`;\n\n  //     monday.api(query)\n  //       .then((res) => {\n  //         console.log(\"Column updated successfully: \", res, \"with \", totalCount);\n  //       })\n  //       .catch((err) => {\n  //         console.log(\"Error updating column: \", err);\n  //       });\n  //   }\n\n  // }, [totalCount]);\n\n  // Update listItems in the board storage when it changes\n  // useEffect(() => {\n  //   console.log(\"----App.js UseEffect #3----\")\n  //   if (context) {\n  //     console.log(\"Context: \", context)\n  //     setShouldLoad(true)\n  //     storageInstance.setItem('listItems_' + context.itemId, JSON.stringify(listItems)\n  //     ).catch(error => { \n  //       console.log(error)\n  //       setShouldLoad(false)\n  //     }).finally(() => { \n  //       setShouldLoad(false)\n  //     });\n\n  //   }\n\n  // }, [listItems]);\n\n  useEffect(() => {\n    console.log(\"----App.js UseEffect #3----\");\n    if (context) {\n      console.log(\"Context: \", context);\n      setShouldLoad(true);\n      storageInstance.setItem('listItems_' + context.itemId, JSON.stringify(listItems)).then(result1 => {\n        return storageInstance.setItem('totalCount_' + context.itemId, totalCount.toString());\n      }).catch(error => {\n        console.log(error);\n        setShouldLoad(false);\n      }).finally(() => {\n        setShouldLoad(false);\n      });\n\n      // storageInstance.setItem('totalCount_' + context.itemId, totalCount.toString()\n      // ).catch(error => { \n      //   console.log(error)\n      //   // setShouldLoad(false)\n      // }).finally(() => { \n      //   setShouldLoad(false)\n      // });\n    }\n\n    if (selectedOption && context && totalCount != null) {\n      console.log(\"Inner Context: \", selectedOption);\n      const boardId = context.boardId;\n      console.log(\"using boardID: \", boardId);\n      const query = `mutation {\n            change_simple_column_value (board_id: ${boardId}, item_id: ${context.itemId}, column_id: \"${selectedOption.value}\", value: \"${JSON.stringify(totalCount)}\") {\n              id\n            }\n          }`;\n      monday.api(query).then(res => {\n        console.log(\"Column updated successfully: \", res, \"with \", totalCount);\n      }).catch(err => {\n        console.log(\"Error updating column: \", err);\n      });\n    }\n  }, [listItems, totalCount]);\n\n  // Update totalCount in the board storage when it changes\n  // useEffect(() => {\n  //   console.log(\"----App.js UseEffect #4----\")\n  //   if (context) {\n  //     console.log(\"Context: \", context)\n  //     setShouldLoad(true)\n  //     storageInstance.setItem('totalCount_' + context.itemId, totalCount.toString()\n  //     ).catch(error => { \n  //       console.log(error)\n  //       setShouldLoad(false)\n  //     }).finally(() => { \n  //       setShouldLoad(false)\n  //     });\n  //     // localStorage.setItem('totalCount_' + context.itemId, totalCount.toString());\n\n  //   }\n\n  // }, [totalCount]);\n\n  // Update selectedOption in the board storage when it changes\n  useEffect(() => {\n    console.log(\"----App.js UseEffect #5----\");\n    if (context) {\n      console.log(\"Context: \", context);\n      // setShouldLoad(true)\n      storageInstance.setItem('selectedOption_' /* + context.itemId*/, JSON.stringify(selectedOption)).catch(error => {\n        console.log(error);\n        // setShouldLoad(false)\n      }).finally(() => {\n        // setShouldLoad(false)\n      });\n      console.log(\"Option: \", selectedOption.value);\n    }\n  }, [selectedOption]);\n\n  // Update printerOptions in the board storage when it changes\n  useEffect(() => {\n    console.log(\"----App.js UseEffect #6----\");\n    if (context) {\n      console.log(\"Context: \", context);\n      // setShouldLoad(true)\n      storageInstance.setItem('printerOption_' + context.itemId, JSON.stringify(printerOptions)).catch(error => {\n        console.log(error);\n        // setShouldLoad(false)\n      }).finally(() => {\n        // setShouldLoad(false)\n      });\n      console.log(\"Option: \", printerOptions.value);\n    }\n  }, [printerOptions]);\n\n  // useEffect(() => {\n  //   console.log(\"----App.js UseEffect #7----\")\n  //   if (context) {\n  //     const storedSelectedOption = storageInstance.getItem('selectedOption_'/* + context.itemId*/).then(response => {\n  //       if (response.data && response.data.value) {\n  //         const defaultSelectedOption = JSON.parse(storedSelectedOption);\n  //         handleOptionsSelection(defaultSelectedOption);\n  //       }\n  //     })\n  //     // const storedSelectedOption = storageInstance.getItem('selectedOption_' + context.itemId);\n  //     // if (storedSelectedOption) {\n  //     //   // Set it as the default selected option\n  //     //   // You may need to adapt this part to match the data structure of your `Dropdown` component\n  //     //   const defaultSelectedOption = JSON.parse(storedSelectedOption);\n  //     //   handleOptionsSelection(defaultSelectedOption);\n  //     // }\n  //   }\n\n  // }, [])\n\n  const handleClick = () => {\n    const nameVal = nameRef.current.value;\n    const countVal = parseInt(countRef.current.value);\n    handleInput(nameVal, countVal);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row pb-3\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleTotalReset,\n          size: Button.sizes.SMALL,\n          color: Button.colors.NEGATIVE,\n          children: \"Reset Total\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 485,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 484,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 483,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-3\",\n        children: /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Enter Batches\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 490,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 489,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-3\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col\",\n            children: /*#__PURE__*/_jsxDEV(Label, {\n              text: totalCount\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 498,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 497,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 493,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 492,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-6\",\n        children: /*#__PURE__*/_jsxDEV(Dropdown, {\n          placeholder: \"Target column\",\n          onChange: evt => handleOptionsSelection(evt),\n          options: colOptions,\n          value: selectedOption\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 505,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 504,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 488,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row pt-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col\",\n        children: [/*#__PURE__*/_jsxDEV(Dropdown, {\n          placeholder: \"Printer\",\n          onChange: evt => handlePrinterSelection(evt),\n          options: printerList,\n          value: printerOptions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 510,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          disabled: true,\n          ref: nameRef,\n          type: \"text\",\n          placeholder: \"Batch name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 511,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 509,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col\",\n        children: /*#__PURE__*/_jsxDEV(TextField, {\n          ref: countRef,\n          type: \"number\",\n          placeholder: \"Batch count\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 514,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 513,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          disabled: shouldLoad ? true : false,\n          onClick: handleClick,\n          size: Button.sizes.SMALL,\n          color: Button.colors.POSITIVE,\n          children: \"Add\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 517,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 516,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col\",\n        children: shouldLoad ? /*#__PURE__*/_jsxDEV(Loader, {\n          size: Loader.sizes.SMALL\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 520,\n          columnNumber: 36\n        }, this) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 519,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 508,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 523,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col-12\",\n      children: /*#__PURE__*/_jsxDEV(List, {\n        items: listItems,\n        handleDelete: handleItemDelete,\n        parentContext: context,\n        handleTotalCount: changeTotalCount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 525,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 524,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 482,\n    columnNumber: 9\n  }, this);\n};\n_s(ListInputMod, \"7rFi5w6d6jYA/Nqvqc2QDOF1XF4=\");\n_c = ListInputMod;\nexport default ListInputMod;\nvar _c;\n$RefreshReg$(_c, \"ListInputMod\");","map":{"version":3,"names":["React","TextField","Button","Label","Dropdown","Loader","Divider","mondaySdk","useState","useEffect","useRef","List","jsxDEV","_jsxDEV","monday","setToken","storageInstance","storage","instance","ListInputMod","_ref","_s","dropdownHandler","printerHandler","clickFunction","resetTotalFunction","parentContext","selectedVal","printerVal","disabledCheck","console","log","context","setContext","listItems","setListItems","totalCount","setTotalCount","selectedOption","setSelectedOption","printerOptions","setPrinterOptions","optionSelected","setOptionSelected","shouldLoad","setShouldLoad","initialShouldLoad","setInitialShouldLoad","colOptions","setColOptions","nameRef","countRef","printerList","label","value","boardId","query","api","then","res","columns","data","boards","cols","map","column","title","id","setItem","JSON","stringify","catch","err","handleInput","name","count","countAsNum","parseInt","prevTotalCount","currentDate","Date","currentTime","toLocaleTimeString","timeStyle","hour12","uniqueKey","Math","random","toString","substr","printerDisplay","undefined","itemDisplayPos","length","getMonth","getDate","getFullYear","newItem","itemName","itemCount","handleTotalReset","handleOptionsSelection","evt","error","finally","handlePrinterSelection","itemId","handleItemDelete","isChecked","prevListItems","newListItems","filter","item","newTotalCount","changeTotalCount","execute","listen","getItem","result1","parse","result2","result3","parsedCount","result4","result5","handleClick","nameVal","current","countVal","className","children","onClick","size","sizes","SMALL","color","colors","NEGATIVE","fileName","_jsxFileName","lineNumber","columnNumber","text","placeholder","onChange","options","disabled","ref","type","POSITIVE","items","handleDelete","handleTotalCount","_c","$RefreshReg$"],"sources":["/home/nenwam/Documents/rallyessentials/batchtask/quickstart-react/src/modules/ListInputMod.js"],"sourcesContent":["import React from \"react\";\nimport { TextField, Button, Label, Dropdown, Loader, Divider } from \"monday-ui-react-core\"\nimport mondaySdk from \"monday-sdk-js\";\nimport { useState, useEffect, useRef } from \"react\";\nimport List from \"./List\"\n\nconst monday = mondaySdk();\nmonday.setToken(\"eyJhbGciOiJIUzI1NiJ9.eyJ0aWQiOjI3Mjk5MDQ5NiwiYWFpIjoxMSwidWlkIjozNjI5NTI0NywiaWFkIjoiMjAyMy0wOC0wM1QyMToyMjozNy4wMDBaIiwicGVyIjoibWU6d3JpdGUiLCJhY3RpZCI6MTI3MTA0ODYsInJnbiI6InVzZTEifQ.XIrSWOWgg3U7oRd9zrKzL0WAr8Peo5b4ZIU1vfw0T2w\");\nconst storageInstance = monday.storage.instance;\n\nconst ListInputMod = ({dropdownHandler, printerHandler, clickFunction, resetTotalFunction, parentContext, selectedVal, printerVal, disabledCheck}) => {\n    // const [context, setContext] = useState();\n    console.log(\"parentContext: \", parentContext)\n    const {context, setContext} = parentContext\n    console.log(\"Context from parent: \", context)\n    const [listItems, setListItems] = useState([]);\n    // const [nameInput, setNameInput] = useState(\"\")\n    // const [countInput, setCountInput] = useState()\n    const [totalCount, setTotalCount] = useState(0);\n    // const [colOptions, setColOptions] = useState([])\n    const [selectedOption, setSelectedOption] = useState({}); \n    const [printerOptions, setPrinterOptions] = useState({})\n    const [optionSelected, setOptionSelected] = useState(false);\n    const [shouldLoad, setShouldLoad] = useState(false);\n    const [initialShouldLoad, setInitialShouldLoad] = useState(false);\n    const [colOptions, setColOptions] = useState([])\n    const nameRef = useRef();\n    const countRef = useRef();\n    const printerList = [\n        {\n            label: \"Printer 1\",\n            value: \"printer1\"\n        },\n        {\n            label: \"Printer 2\",\n            value: \"printer2\",\n        },\n        {\n            label: \"Printer 3\",\n            value: \"printer3\"\n        },\n        {\n            label: \"Printer 4\",\n            value: \"printer4\"\n        },\n        {\n            label: \"Printer 5\",\n            value: \"printer5\"\n        },\n        {\n            label: \"Printer 6\",\n            value: \"printer6\"\n        }\n    ];\n    \n    \n\n    // useEffect(() => {\n    //     localStorage.setItem('colOptions_' + context.itemId, JSON.stringify(colOptions));\n    //   }, [colOptions]);\n\n    // useEffect(() => {\n    //     const contextUnsubscribe = monday.listen(\"context\", (res) => {\n    //       setContext(res.data);\n    //     //   storageInstance.getItem(`colOptions` + res.data.itemId).then(response => {\n    //     //     setColOptions(JSON.parse(response.data.value) || []);\n    //     //   });\n    //     //   const localColOptions = JSON.parse(localStorage.getItem('colOptions_' + res.data.itemId)) || []\n    //     //   setColOptions(localColOptions)\n    //     });\n      \n    //     // Clean up the subscription when the component unmounts\n    //     return () => {\n    //       contextUnsubscribe && contextUnsubscribe.unsubscribe();\n    //     };\n    //   }, []);\n\n    useEffect(() => {\n\n        // setColOptions(() => {\n        //     console.log(context)\n\n        //     console.log(\"Context: \", context)\n        //     const boardId = context.boardId;\n            \n        //     const query = `query {\n        //     boards(ids: ${boardId}) {\n        //         columns {\n        //         id\n        //         title\n        //         }\n        //     }\n        //     }`;\n        //     monday.api(query).then((res) => {\n        //         console.log(\"res: \", res);\n        //         const columns = res.data.boards[0].columns;\n        //         console.log(\"Columns: \", columns);\n        //         const cols = columns.map(column => {\n        //             return {label: column.title, value: column.id}\n        //         })\n        //         console.log(\"cols: \", cols)\n        //         return cols\n        //     }).catch((err) => {\n        //         console.log(\"Error fetching columns: \", err);\n        //     });\n        // })\n        console.log(\"ListInput: \", parentContext)\n\n        if (parentContext){\n            console.log(\"Parent Context 2\", parentContext)\n\n            console.log(\"Context: \", parentContext)\n            const boardId = parentContext.boardId;\n            console.log(\"using boardID: \", parentContext.boardId)\n            \n            const query = `query {\n            boards(ids: ${boardId}) {\n                columns {\n                    id\n                    title\n                }\n            }\n            }`;\n            monday.api(query).then((res) => {\n                console.log(\"ListInput res: \", res);\n                const columns = res.data.boards[0].columns;\n                console.log(\"Columns: \", columns);\n                const cols = columns.map(column => {\n                    return {label: column.title, value: column.id}\n                })\n                console.log(\"cols: \", cols)\n                setColOptions(cols)\n                storageInstance.setItem(`colOptions`, JSON.stringify(cols)).then((res) => {\n                    console.log(\"colOptions stored in board storage: \", res);\n                });\n            }).catch((err) => {\n                console.log(\"Error fetching columns: \", err);\n            });\n        } \n\n\n        \n        \n        \n\n        \n    }, [parentContext])\n\n    const handleInput = (name, count) => {\n        console.log(\"count: \", totalCount)\n        const countAsNum = parseInt(count)\n        \n        setTotalCount(prevTotalCount => {\n          console.log(\"new total: \", prevTotalCount)\n          return parseInt(prevTotalCount) + countAsNum \n        })\n        const currentDate = new Date()\n        const currentTime = currentDate.toLocaleTimeString('en-US', {timeStyle: 'short', hour12: true})\n        const uniqueKey = Math.random().toString(36).substr(2, 9);\n        const printerDisplay = printerOptions.label == undefined ? \"Printer N/A\" : printerOptions.label\n        const itemDisplayPos = \"B\" + (listItems.length + 1) + \" | \" + currentTime + \" - \" + \n          (currentDate.getMonth() + 1) + \"/\" + currentDate.getDate() + \"/\" + currentDate.getFullYear() + \"\\n | \" + printerDisplay\n        const newItem = { uniqueKey: Math.random().toString(36).substr(2, 9), itemName: itemDisplayPos, itemCount: countAsNum };\n        console.log(\"Key: \", uniqueKey)\n        setListItems([...listItems, newItem])\n        \n        \n    \n        console.log(\"handleInput Option: \", selectedOption)\n      }\n    \n      const handleTotalReset = () => {\n        setTotalCount(0)\n      }\n    \n      const handleOptionsSelection = (evt) => {\n        setSelectedOption(evt) \n        setShouldLoad(true)\n        storageInstance.setItem('selectedOption_'/* + context.itemId*/, JSON.stringify(evt)\n        ).catch(error => {\n          console.log(error)\n          setShouldLoad(false)\n        }).finally(() => { \n          setShouldLoad(false)\n        });\n        console.log(\"handleOptions Option: \", evt) \n      }\n    \n      const handlePrinterSelection = (evt) => {\n        setPrinterOptions(evt)\n        setShouldLoad(true)\n        storageInstance.setItem('printerOptions_' + context.itemId, JSON.stringify(evt)\n        ).catch(error => {\n          console.log(error)\n          setShouldLoad(false)\n        }).finally(() => {  \n          setShouldLoad(false)\n        });\n        console.log(\"handleOptions Option: \", evt)\n      }\n    \n      const handleItemDelete = (itemName, itemCount, isChecked) => {\n    \n        setListItems(prevListItems => {\n          const newListItems = prevListItems.filter(item => item.itemName !== itemName);\n          prevListItems.map(item => console.log(item.itemName))\n          // Update localStorage to store the new list items\n          console.log(\"New Items\", itemName)\n          return newListItems;\n        });\n      \n        setTotalCount(prevTotalCount => {\n          let newTotalCount;\n          if (!isChecked) {\n            newTotalCount = prevTotalCount - parseInt(itemCount);\n          } else {\n            newTotalCount = prevTotalCount;\n          }\n          // Update localStorage to store the new total count\n          return newTotalCount;\n        });\n      }\n    \n      const changeTotalCount = (isChecked, itemCount) => {\n        console.log(\"isChecked type: \", typeof(isChecked))\n        console.log(\"itemCount type: \", typeof(itemCount))\n        setTotalCount(prevTotalCount => {\n          if (isChecked) {\n            return parseInt(prevTotalCount) - parseInt(itemCount);\n          } else {\n            return parseInt(prevTotalCount) + parseInt(itemCount);\n          }\n        })\n    \n        console.log(\"changeTotal Option: \", selectedOption)  \n      }\n    \n    \n      useEffect(() => {\n        console.log(\"----App.js UseEffect #1----\")\n        // Notice this method notifies the monday platform that user gains a first value in an app.\n        // Read more about it here: https://developer.monday.com/apps/docs/mondayexecute#value-created-for-user/\n        monday.execute(\"valueCreatedForUser\");\n    \n        monday.listen(\"context\", (res) => {\n          console.log(\"useEffect storage res: \", res)\n          setContext(res.data);\n    \n          // setShouldLoad(true)\n    \n          storageInstance.getItem('listItems_' + res.data.itemId).then(result1 => {\n            setListItems(JSON.parse(result1.data.value) || []);  \n            return storageInstance.getItem('listItems_' + res.data.itemId)\n          }).then(result2 => {\n            setListItems(JSON.parse(result2.data.value) || []);\n            return storageInstance.getItem('totalCount_' + res.data.itemId)\n          }).then(result3 => {\n            const parsedCount = parseInt(result3.data.value)\n            setTotalCount(parsedCount || 0);\n            return storageInstance.getItem('selectedOption_'/* + res.data.itemId*/)\n          }).then(result4 => { \n            setSelectedOption(JSON.parse(result4.data.value) || []);\n            return storageInstance.getItem('printerOption_' + res.data.itemId)\n          }).then(result5 => { \n            setPrinterOptions(JSON.parse(result5.data.value) || []);\n          }).catch(error => { \n            console.log(error)\n            // setShouldLoad(false)\n          }).finally(() => { \n            // setShouldLoad(false)\n          })\n    \n          // storageInstance.getItem('listItems_' + res.data.itemId).then(response => {\n          //   setListItems(JSON.parse(response.data.value) || []);  \n          // }).catch(error => {\n          //   console.log(error)\n          //   // setShouldLoad(false)\n          // })\n    \n          // storageInstance.getItem('totalCount_' + res.data.itemId).then(response => {\n          //   console.log(\"Count Response: \", response.data.value)\n          //   const parsedCount = parseInt(response.data.value)\n          //   setTotalCount(parsedCount || 0);\n          // }).catch(error => { \n          //   console.log(error)\n          //   // setShouldLoad(false)\n          // })\n    \n          // storageInstance.getItem('selectedOption_'/* + res.data.itemId*/).then(response => {\n          //   console.log(\"Option Response: \", response)\n          //   setSelectedOption(JSON.parse(response.data.value) || []);\n          // }).catch(error => { \n          //   console.log(error)\n          //   // setShouldLoad(false)\n          // })\n    \n          // storageInstance.getItem('printerOption_' + res.data.itemId).then(response => {\n          //   console.log(\"Printer Response: \", response.data.value)\n          //   setPrinterOptions(JSON.parse(response.data.value) || []);\n          // }).catch(error => { \n          //   console.log(error)\n          // }).finally(() => {\n          //   setShouldLoad(false)\n          // });\n    \n        });\n    \n        \n      }, []);\n    \n      // useEffect(() => { \n      //   console.log(\"----App.js UseEffect #2----\")\n      //   if (selectedOption && context && totalCount != null) {\n      //     console.log(\"Inner Context: \", selectedOption)\n      //     const boardId = context.boardId\n      //     console.log(\"using boardID: \", boardId)\n      //     const query = `mutation {\n      //       change_simple_column_value (board_id: ${boardId}, item_id: ${context.itemId}, column_id: \"${selectedOption.value}\", value: \"${JSON.stringify(totalCount)}\") {\n      //         id\n      //       }\n      //     }`;\n          \n      //     monday.api(query)\n      //       .then((res) => {\n      //         console.log(\"Column updated successfully: \", res, \"with \", totalCount);\n      //       })\n      //       .catch((err) => {\n      //         console.log(\"Error updating column: \", err);\n      //       });\n      //   }\n        \n        \n      // }, [totalCount]);\n    \n      // Update listItems in the board storage when it changes\n      // useEffect(() => {\n      //   console.log(\"----App.js UseEffect #3----\")\n      //   if (context) {\n      //     console.log(\"Context: \", context)\n      //     setShouldLoad(true)\n      //     storageInstance.setItem('listItems_' + context.itemId, JSON.stringify(listItems)\n      //     ).catch(error => { \n      //       console.log(error)\n      //       setShouldLoad(false)\n      //     }).finally(() => { \n      //       setShouldLoad(false)\n      //     });\n          \n      //   }\n        \n      // }, [listItems]);\n    \n      useEffect(() => {\n        console.log(\"----App.js UseEffect #3----\")\n        if (context) {\n          console.log(\"Context: \", context)\n          setShouldLoad(true)\n          storageInstance.setItem('listItems_' + context.itemId, JSON.stringify(listItems)\n          ).then(result1 => { \n            return storageInstance.setItem('totalCount_' + context.itemId, totalCount.toString())\n          }).catch(error => { \n            console.log(error)\n            setShouldLoad(false)\n          }).finally(() => { \n            setShouldLoad(false)\n          });\n    \n          // storageInstance.setItem('totalCount_' + context.itemId, totalCount.toString()\n          // ).catch(error => { \n          //   console.log(error)\n          //   // setShouldLoad(false)\n          // }).finally(() => { \n          //   setShouldLoad(false)\n          // });\n          \n        }\n    \n        if (selectedOption && context && totalCount != null) {\n          console.log(\"Inner Context: \", selectedOption)\n          const boardId = context.boardId\n          console.log(\"using boardID: \", boardId)\n          const query = `mutation {\n            change_simple_column_value (board_id: ${boardId}, item_id: ${context.itemId}, column_id: \"${selectedOption.value}\", value: \"${JSON.stringify(totalCount)}\") {\n              id\n            }\n          }`;\n          \n          monday.api(query)\n            .then((res) => {\n              console.log(\"Column updated successfully: \", res, \"with \", totalCount);\n            })\n            .catch((err) => {\n              console.log(\"Error updating column: \", err);\n            });\n        }\n        \n      }, [listItems, totalCount]);\n    \n      // Update totalCount in the board storage when it changes\n      // useEffect(() => {\n      //   console.log(\"----App.js UseEffect #4----\")\n      //   if (context) {\n      //     console.log(\"Context: \", context)\n      //     setShouldLoad(true)\n      //     storageInstance.setItem('totalCount_' + context.itemId, totalCount.toString()\n      //     ).catch(error => { \n      //       console.log(error)\n      //       setShouldLoad(false)\n      //     }).finally(() => { \n      //       setShouldLoad(false)\n      //     });\n      //     // localStorage.setItem('totalCount_' + context.itemId, totalCount.toString());\n          \n      //   }\n        \n      // }, [totalCount]);\n    \n      // Update selectedOption in the board storage when it changes\n      useEffect(() => {\n        console.log(\"----App.js UseEffect #5----\")\n        if (context) {\n          console.log(\"Context: \", context)\n          // setShouldLoad(true)\n          storageInstance.setItem('selectedOption_'/* + context.itemId*/, JSON.stringify(selectedOption)\n          ).catch(error => { \n            console.log(error)\n            // setShouldLoad(false)\n          }).finally(() => { \n            // setShouldLoad(false)\n          });\n          console.log(\"Option: \", selectedOption.value)\n        }\n        \n        \n      }, [selectedOption]);\n    \n      // Update printerOptions in the board storage when it changes\n      useEffect(() => {\n        console.log(\"----App.js UseEffect #6----\")\n        if (context) {\n          console.log(\"Context: \", context)\n          // setShouldLoad(true)\n          storageInstance.setItem('printerOption_' + context.itemId, JSON.stringify(printerOptions)\n          ).catch(error => { \n            console.log(error)\n            // setShouldLoad(false)\n          }).finally(() => { \n            // setShouldLoad(false)\n          });\n          console.log(\"Option: \", printerOptions.value)\n        }\n      }, [printerOptions])\n    \n    \n      // useEffect(() => {\n      //   console.log(\"----App.js UseEffect #7----\")\n      //   if (context) {\n      //     const storedSelectedOption = storageInstance.getItem('selectedOption_'/* + context.itemId*/).then(response => {\n      //       if (response.data && response.data.value) {\n      //         const defaultSelectedOption = JSON.parse(storedSelectedOption);\n      //         handleOptionsSelection(defaultSelectedOption);\n      //       }\n      //     })\n      //     // const storedSelectedOption = storageInstance.getItem('selectedOption_' + context.itemId);\n      //     // if (storedSelectedOption) {\n      //     //   // Set it as the default selected option\n      //     //   // You may need to adapt this part to match the data structure of your `Dropdown` component\n      //     //   const defaultSelectedOption = JSON.parse(storedSelectedOption);\n      //     //   handleOptionsSelection(defaultSelectedOption);\n      //     // }\n      //   }\n        \n      // }, [])\n\n    const handleClick = () => {\n        const nameVal = nameRef.current.value\n        const countVal = parseInt(countRef.current.value)\n        handleInput(nameVal, countVal)\n    }\n\n    return (\n        <div className=\"container\">\n            <div className=\"row pb-3\">\n                <div className=\"col\">\n                    <Button onClick={handleTotalReset} size={Button.sizes.SMALL} color={Button.colors.NEGATIVE}>Reset Total</Button>\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col-3\">\n                    <h4>Enter Batches</h4>\n                </div>  \n                <div className=\"col-3\">\n                    <div className=\"row\">\n                        {/* <div className=\"col\">\n                            <h4>Total</h4>\n                        </div> */}\n                        <div className=\"col\">\n                            <Label text={totalCount}></Label>\n                        </div>\n                    </div>\n                    \n                    \n                </div>\n                <div className=\"col-6\">\n                    <Dropdown placeholder=\"Target column\" onChange={evt => handleOptionsSelection(evt)} options={colOptions} value={selectedOption}></Dropdown>\n                </div>\n            </div>\n            <div className=\"row pt-4\">\n                <div className=\"col\">\n                    <Dropdown placeholder=\"Printer\" onChange={evt => handlePrinterSelection(evt)} options={printerList} value={printerOptions}></Dropdown>\n                    <TextField disabled={true} ref={nameRef} type=\"text\" placeholder=\"Batch name\" />\n                </div>\n                <div className=\"col\">\n                    <TextField ref={countRef} type=\"number\" placeholder=\"Batch count\" />  \n                </div>\n                <div className=\"col\">\n                    <Button disabled={shouldLoad ? true : false} onClick={handleClick} size={Button.sizes.SMALL} color={Button.colors.POSITIVE}>Add</Button>\n                </div>\n                <div className=\"col\">\n                    { shouldLoad ? <Loader size={Loader.sizes.SMALL}></Loader> : null }\n                </div>\n            </div>\n            <Divider></Divider>\n            <div className=\"col-12\">\n                <List items={listItems} handleDelete={handleItemDelete} parentContext={context} handleTotalCount={changeTotalCount}></List>\n            </div> \n        </div>\n    );\n}\n\nexport default ListInputMod"],"mappings":"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"},"metadata":{},"sourceType":"module"}