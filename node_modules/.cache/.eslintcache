[{"/home/nenwam/Documents/rallyessentials/batchtask/quickstart-react/src/index.js":"1","/home/nenwam/Documents/rallyessentials/batchtask/quickstart-react/src/App.js":"2","/home/nenwam/Documents/rallyessentials/batchtask/quickstart-react/src/serviceWorker.js":"3","/home/nenwam/Documents/rallyessentials/batchtask/quickstart-react/src/modules/List.js":"4","/home/nenwam/Documents/rallyessentials/batchtask/quickstart-react/src/modules/ListItem.js":"5","/home/nenwam/Documents/rallyessentials/batchtask/quickstart-react/src/modules/ListInput.js":"6"},{"size":527,"mtime":1697693108164,"results":"7","hashOfConfig":"8"},{"size":7182,"mtime":1698085861159,"results":"9","hashOfConfig":"8"},{"size":5085,"mtime":1697579041844,"results":"10","hashOfConfig":"8"},{"size":806,"mtime":1698012132923,"results":"11","hashOfConfig":"8"},{"size":2942,"mtime":1698018356259,"results":"12","hashOfConfig":"8"},{"size":4908,"mtime":1698085948734,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},"1egxa5j",{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/nenwam/Documents/rallyessentials/batchtask/quickstart-react/src/index.js",[],[],[],"/home/nenwam/Documents/rallyessentials/batchtask/quickstart-react/src/App.js",["35","36","37","38","39","40","41","42"],[],"import React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport mondaySdk from \"monday-sdk-js\";\nimport \"monday-ui-react-core/dist/main.css\";\n//Explore more Monday React Components here: https://style.monday.com/\nimport List from \"./modules/List.js\"\nimport ListInput from \"./modules/ListInput.js\";\nimport { Divider } from \"monday-ui-react-core\"\n\n// Usage of mondaySDK example, for more information visit here: https://developer.monday.com/apps/docs/introduction-to-the-sdk/\nconst monday = mondaySdk();\nmonday.setToken(\"eyJhbGciOiJIUzI1NiJ9.eyJ0aWQiOjI3Mjk5MDQ5NiwiYWFpIjoxMSwidWlkIjozNjI5NTI0NywiaWFkIjoiMjAyMy0wOC0wM1QyMToyMjozNy4wMDBaIiwicGVyIjoibWU6d3JpdGUiLCJhY3RpZCI6MTI3MTA0ODYsInJnbiI6InVzZTEifQ.XIrSWOWgg3U7oRd9zrKzL0WAr8Peo5b4ZIU1vfw0T2w\");\n\nconst App = () => {\n  const [context, setContext] = useState();\n  const [listItems, setListItems] = useState([]);\n  const [nameInput, setNameInput] = useState(\"\")\n  const [countInput, setCountInput] = useState()\n  const [totalCount, setTotalCount] = useState(0);\n  // const [colOptions, setColOptions] = useState([])\n  const [selectedOption, setSelectedOption] = useState({}); \n  const [optionSelected, setOptionSelected] = useState(false);\n\n  const handleInput = () => {\n    setTotalCount(totalCount + parseInt(countInput))\n    const uniqueKey = Math.random().toString(36).substr(2, 9);\n    const newItem = { uniqueKey: Math.random().toString(36).substr(2, 9), itemName: nameInput, itemCount: countInput };\n    console.log(\"Key: \", uniqueKey)\n    setListItems([...listItems, newItem])\n    // setListItems([...listItems, <ListItem key={uniqueKey} itemName={nameInput} itemCount={countInput} handleDelete={handleItemDelete} handleTotalCount={changeTotalCount}></ListItem>])\n    setNameInput(\"\")\n    setCountInput()\n    console.log(\"Option: \", selectedOption)\n  }\n\n  const handleTotalReset = () => {\n    setTotalCount(0)\n  }\n\n  const handleOptionsSelection = (evt) => {\n    setSelectedOption(evt) \n    localStorage.setItem('selectedOption_' + context.itemId, JSON.stringify(selectedOption));\n    console.log(\"Option: \", evt) \n  }\n\n  const handleItemDelete = (itemName, itemCount, isChecked) => {\n    setListItems(prevListItems => prevListItems.filter(item => item.itemName !== itemName));\n    setTotalCount(prevTotalCount => {\n      if (!isChecked) {\n        return prevTotalCount - parseInt(itemCount)\n      } else if (isChecked) {\n        return prevTotalCount\n      }\n      \n    });\n  }\n\n\n  const changeTotalCount = (isChecked, itemCount) => {\n    setTotalCount(prevTotalCount => {\n      if (isChecked) {\n        return prevTotalCount - parseInt(itemCount);\n      } else {\n        return prevTotalCount + parseInt(itemCount);\n      }\n    })\n\n    console.log(\"Option: \", selectedOption)  \n  }\n\n\n  const updateNameValue = (evt) => {\n    setNameInput(evt);\n  }\n\n\n  const updateCountValue = (evt) => {\n    setCountInput(evt);\n  }\n\n\n  useEffect(() => {\n    // Notice this method notifies the monday platform that user gains a first value in an app.\n    // Read more about it here: https://developer.monday.com/apps/docs/mondayexecute#value-created-for-user/\n    monday.execute(\"valueCreatedForUser\");\n\n    // TODO: set up event listeners, Here`s an example, read more here: https://developer.monday.com/apps/docs/mondaylisten/\n    monday.listen(\"context\", (res) => {\n      console.log(\"res: \", res)\n      setContext(res.data);\n\n      const localListItems = JSON.parse(localStorage.getItem('listItems_' + res.data.itemId)) || []\n      setListItems(localListItems)\n      const localTotalCount = parseInt(localStorage.getItem('totalCount_' + res.data.itemId)) || 0\n      setTotalCount(localTotalCount)\n      const localSelectedOption = JSON.parse(localStorage.getItem('selectedOption_' + res.data.itemId)) || {}\n      setSelectedOption(localSelectedOption)\n    });\n\n    if (context) {\n      // console.log(\"Context: \", context)\n      // const boardId = context.boardId;\n      \n      // const query = `query {\n      //   boards(ids: ${boardId}) {\n      //     columns {\n      //       id\n      //       title\n      //     }\n      //   }\n      // }`;\n      // monday.api(query).then((res) => {\n      //   console.log(\"res: \", res);\n      //   const columns = res.data.boards[0].columns;\n      //   console.log(\"Columns: \", columns);\n      //   const cols = columns.map(column => {\n      //       return {label: column.title, value: column.id}\n      //   })\n      //   console.log(\"cols: \", cols)\n      //   setColOptions(cols)\n      // }).catch((err) => {\n      //   console.log(\"Error fetching columns: \", err);\n      // });\n    }\n    \n    \n    // console.log(\"inputTotal:\", parseInt(totalCount))\n    \n  }, [listItems/*, colOptions*/]);\n\n  useEffect(() => { // Need to make it so that the add item deletes the previous item input and so that the subitems can be selected rather than just items\n    if (selectedOption && context && totalCount != null) {\n      const query = `mutation {\n        change_simple_column_value (board_id: ${context.boardId}, item_id: ${context.itemId}, column_id: \"${selectedOption.value}\", value: \"${JSON.stringify(totalCount)}\") {\n          id\n        }\n      }`;\n  \n      monday.api(query)\n        .then((res) => {\n          console.log(\"Column updated successfully: \", res, \"with \", totalCount);\n        })\n        .catch((err) => {\n          console.log(\"Error updating column: \", err);\n        });\n    }\n  }, [totalCount, selectedOption]);\n\n  useEffect(() => {\n    localStorage.setItem('listItems_' + context.itemId, JSON.stringify(listItems));\n  }, [listItems]);\n\n  useEffect(() => {\n    localStorage.setItem('totalCount_' + context.itemId, totalCount.toString());\n  }, [totalCount]);\n\n  useEffect(() => {\n    localStorage.setItem('selectedOption_' + context.itemId, JSON.stringify(selectedOption));\n    console.log(\"Option: \", selectedOption.value)\n  }, [selectedOption]);\n\n  useEffect(() => {\n    const storedSelectedOption = localStorage.getItem('selectedOption_' + context.itemId);\n    if (storedSelectedOption) {\n      // Set it as the default selected option\n      // You may need to adapt this part to match the data structure of your `Dropdown` component\n      const defaultSelectedOption = JSON.parse(storedSelectedOption);\n      handleOptionsSelection(defaultSelectedOption);\n    }\n  }, [])\n\n\n  \n  return (\n    <div className=\"App container\">\n      <div className=\"row\">\n        <div className=\"col-12 py-3\">\n          <ListInput \n            nameHandler={evt => updateNameValue(evt)} \n            nameValue={nameInput}\n            countHandler={evt => updateCountValue(evt)} \n            countValue={countInput}\n            totalCount={totalCount} \n            dropdownHandler={evt => handleOptionsSelection(evt)}\n            clickFunction={handleInput}\n            resetTotalFunction={handleTotalReset}\n            disabledCheck={selectedOption.value !== undefined ? false : true }>\n          </ListInput>\n        </div>\n        <Divider></Divider>\n        <div className=\"col-12\">\n          <List items={listItems} handleDelete={handleItemDelete} handleTotalCount={changeTotalCount}></List>\n        </div> \n      </div>\n    </div>\n  );\n};\nexport default App;\n","/home/nenwam/Documents/rallyessentials/batchtask/quickstart-react/src/serviceWorker.js",[],[],"/home/nenwam/Documents/rallyessentials/batchtask/quickstart-react/src/modules/List.js",[],[],"/home/nenwam/Documents/rallyessentials/batchtask/quickstart-react/src/modules/ListItem.js",["43"],[],"import React from \"react\"\nimport mondaySdk from \"monday-sdk-js\";\nimport { Checkbox, Label, Divider, IconButton } from \"monday-ui-react-core\"\nimport { Erase } from \"monday-ui-react-core/icons\" \nimport { useState, useEffect } from \"react\";\n\nconst monday = mondaySdk();\nmonday.setToken(\"eyJhbGciOiJIUzI1NiJ9.eyJ0aWQiOjI3Mjk5MDQ5NiwiYWFpIjoxMSwidWlkIjozNjI5NTI0NywiaWFkIjoiMjAyMy0wOC0wM1QyMToyMjozNy4wMDBaIiwicGVyIjoibWU6d3JpdGUiLCJhY3RpZCI6MTI3MTA0ODYsInJnbiI6InVzZTEifQ.XIrSWOWgg3U7oRd9zrKzL0WAr8Peo5b4ZIU1vfw0T2w\");\n\nconst ListItem = ({itemName, itemCount, handleDelete, handleTotalCount}) => {\n    const [isChecked, setIsChecked] = useState(false);\n    const [context, setContext] = useState();\n\n    useEffect(() => {\n        // Notice this method notifies the monday platform that user gains a first value in an app.\n        // Read more about it here: https://developer.monday.com/apps/docs/mondayexecute#value-created-for-user/\n        monday.execute(\"valueCreatedForUser\");\n    \n        // TODO: set up event listeners, Here`s an example, read more here: https://developer.monday.com/apps/docs/mondaylisten/\n        monday.listen(\"context\", (res) => {\n          // console.log(\"res: \", res)\n          setContext(res.data);\n        });\n        \n      }, [context]);\n\n    useEffect(() => {\n        // Read isChecked state from localStorage when the component mounts\n        const storedIsChecked = localStorage.getItem(`isChecked-${itemName}_${context.itemId}`);\n        if (storedIsChecked !== null) {\n          setIsChecked(JSON.parse(storedIsChecked));\n        }\n    \n        // Save isChecked state to localStorage whenever it changes\n        return () => {\n          localStorage.setItem(`isChecked-${itemName}_${context.itemId}`, JSON.stringify(isChecked));\n        };\n      }, [isChecked, itemName]);\n\n\n    return (\n        <div className=\"container align-middle\">\n            <div className=\"row\">\n                <div className=\"col-5\">\n                    <Checkbox className=\"align-middle\" onChange={() => {setIsChecked(!isChecked); handleTotalCount(!isChecked, parseInt(itemCount));}} label={itemName}></Checkbox>\n                </div>                \n                <div className=\"col-5\">\n                    <div className=\"row\">\n                        <div className=\"col\">\n                            <Label text={itemCount} color={Label.colors.Dark} kind={Label.kinds.LINE}></Label>\n                        </div>\n                        <div className=\"col\">\n                            <IconButton icon={Erase} color onClick={() => handleDelete(itemName, itemCount, isChecked)}></IconButton>\n                        </div>\n                    </div>\n                    \n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col-8\">\n                    <Divider></Divider>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default ListItem","/home/nenwam/Documents/rallyessentials/batchtask/quickstart-react/src/modules/ListInput.js",[],[],{"ruleId":"44","severity":1,"message":"45","line":23,"column":10,"nodeType":"46","messageId":"47","endLine":23,"endColumn":24},{"ruleId":"44","severity":1,"message":"48","line":23,"column":26,"nodeType":"46","messageId":"47","endLine":23,"endColumn":43},{"ruleId":"49","severity":1,"message":"50","line":130,"column":6,"nodeType":"51","endLine":130,"endColumn":33,"suggestions":"52"},{"ruleId":"49","severity":1,"message":"50","line":148,"column":6,"nodeType":"51","endLine":148,"endColumn":34,"suggestions":"53"},{"ruleId":"49","severity":1,"message":"54","line":152,"column":6,"nodeType":"51","endLine":152,"endColumn":17,"suggestions":"55"},{"ruleId":"49","severity":1,"message":"54","line":156,"column":6,"nodeType":"51","endLine":156,"endColumn":18,"suggestions":"56"},{"ruleId":"49","severity":1,"message":"54","line":161,"column":6,"nodeType":"51","endLine":161,"endColumn":22,"suggestions":"57"},{"ruleId":"49","severity":1,"message":"58","line":171,"column":6,"nodeType":"51","endLine":171,"endColumn":8,"suggestions":"59"},{"ruleId":"49","severity":1,"message":"54","line":38,"column":10,"nodeType":"51","endLine":38,"endColumn":31,"suggestions":"60"},"no-unused-vars","'optionSelected' is assigned a value but never used.","Identifier","unusedVar","'setOptionSelected' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'context'. Either include it or remove the dependency array.","ArrayExpression",["61"],["62"],"React Hook useEffect has a missing dependency: 'context.itemId'. Either include it or remove the dependency array.",["63"],["64"],["65"],"React Hook useEffect has missing dependencies: 'context.itemId' and 'handleOptionsSelection'. Either include them or remove the dependency array.",["66"],["67"],{"desc":"68","fix":"69"},{"desc":"70","fix":"71"},{"desc":"72","fix":"73"},{"desc":"74","fix":"75"},{"desc":"76","fix":"77"},{"desc":"78","fix":"79"},{"desc":"80","fix":"81"},"Update the dependencies array to be: [context, listItems]",{"range":"82","text":"83"},"Update the dependencies array to be: [totalCount, selectedOption, context]",{"range":"84","text":"85"},"Update the dependencies array to be: [context.itemId, listItems]",{"range":"86","text":"87"},"Update the dependencies array to be: [context.itemId, totalCount]",{"range":"88","text":"89"},"Update the dependencies array to be: [context.itemId, selectedOption]",{"range":"90","text":"91"},"Update the dependencies array to be: [context.itemId, handleOptionsSelection]",{"range":"92","text":"93"},"Update the dependencies array to be: [context.itemId, isChecked, itemName]",{"range":"94","text":"95"},[4684,4711],"[context, listItems]",[5418,5446],"[totalCount, selectedOption, context]",[5559,5570],"[context.itemId, listItems]",[5680,5692],"[context.itemId, totalCount]",[5865,5881],"[context.itemId, selectedOption]",[6307,6309],"[context.itemId, handleOptionsSelection]",[1786,1807],"[context.itemId, isChecked, itemName]"]