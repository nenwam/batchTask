{"version":3,"file":"Tipseen.js","sources":["../../../../../src/components/Tipseen/Tipseen.tsx"],"sourcesContent":["import { forwardRef, Fragment, ReactElement, useEffect, useMemo, useRef, useState } from \"react\";\nimport cx from \"classnames\";\nimport { AnimationType as AnimationTypeEnum, HideShowEvent as HideShowEventEnum } from \"../Dialog/DialogConstants\";\nimport { DialogAnimationType, DialogTriggerEvent } from \"../Dialog/Dialog.types\";\nimport useMergeRef from \"../../hooks/useMergeRef\";\nimport Tooltip from \"../../components/Tooltip/Tooltip\";\nimport IconButton from \"../../components/IconButton/IconButton\";\nimport { CloseSmall } from \"@vibe/icons\";\nimport TipseenTitle from \"./TipseenTitle\";\nimport {\n  TIPSEEN_CLOSE_BUTTON_ARIA_LABEL,\n  TipseenCloseButtonTheme as TipseenCloseButtonThemeEnum,\n  TipseenColor as TipseenColorEnum\n} from \"./TipseenConstants\";\nimport { TipseenCloseButtonTheme, TipseenColor } from \"./Tipseen.types\";\nimport { ElementContent, VibeComponent, VibeComponentProps, withStaticProps } from \"../../types\";\nimport { MoveBy } from \"../../types/MoveBy\";\nimport { Modifier } from \"react-popper\";\nimport { ComponentDefaultTestId } from \"../../tests/constants\";\nimport { getTestId } from \"../../tests/test-ids-utils\";\nimport Text from \"../Text/Text\";\nimport styles from \"./Tipseen.module.scss\";\nimport { ButtonColor } from \"../Button/ButtonConstants\";\nimport React from \"react\";\nimport { TooltipPositions } from \"../Tooltip/Tooltip.types\";\nimport { TooltipPositions as TooltipPositionsEnum } from \"../Tooltip/TooltipConstants\";\n\nexport interface TipseenProps extends VibeComponentProps {\n  /**\n   * Classname for overriding TipseenTitle styles\n   */\n  titleClassName?: string;\n  position?: TooltipPositions;\n  animationType?: DialogAnimationType;\n  hideDelay?: number;\n  showDelay?: number;\n  title?: string;\n  hideCloseButton?: boolean;\n  children?: ReactElement;\n  containerSelector?: string;\n  hideTrigger?: DialogTriggerEvent | Array<DialogTriggerEvent>;\n  showTrigger?: DialogTriggerEvent | Array<DialogTriggerEvent>;\n  width?: number;\n  moveBy?: MoveBy;\n  hideWhenReferenceHidden?: boolean;\n  /**\n   * when false, the arrow of the tooltip is hidden\n   */\n  tip?: boolean;\n  /** Class name for a tooltip's arrow */\n  tooltipArrowClassName?: string;\n  /**\n   * PopperJS Modifiers type\n   * https://popper.js.org/docs/v2/modifiers/\n   */\n  modifiers?: Array<Modifier<unknown>>;\n  closeAriaLabel?: string;\n  onClose?: () => void;\n  content: ElementContent;\n  /**\n   * Control the color of the Tipseen close button. Dark theme can be useful while presenting bright images under the tipseen image\n   */\n  closeButtonTheme?: TipseenCloseButtonTheme;\n  floating?: boolean;\n  /** The color of the Tipseen */\n  color?: TipseenColor;\n}\n\nexport const TipseenContext = React.createContext<TipseenColor>(\"primary\");\n\nconst Tipseen: VibeComponent<TipseenProps> & {\n  closeButtonThemes?: typeof TipseenCloseButtonThemeEnum;\n  animationTypes?: typeof AnimationTypeEnum;\n  hideShowTriggers?: typeof HideShowEventEnum;\n  colors?: typeof TipseenColorEnum;\n  positions?: typeof TooltipPositionsEnum;\n} = forwardRef(\n  (\n    {\n      className,\n      id,\n      position = \"bottom\",\n      animationType = \"expand\",\n      hideDelay = 0,\n      showDelay = 100,\n      title,\n      titleClassName,\n      hideCloseButton,\n      closeButtonTheme = \"light\",\n      onClose,\n      closeAriaLabel,\n      children = null,\n      content,\n      containerSelector,\n      hideTrigger = [],\n      showTrigger = [],\n      width,\n      moveBy,\n      hideWhenReferenceHidden = false,\n      tip = true,\n      tooltipArrowClassName,\n      modifiers = [],\n      floating = false,\n      color: colorProp,\n      \"data-testid\": dataTestId\n    }: TipseenProps,\n    ref\n  ) => {\n    const color = colorProp ?? \"inverted\";\n\n    const defaultDelayOpen =\n      Array.isArray(showTrigger) && Array.isArray(hideTrigger) && showTrigger.length === 0 && showDelay > 0;\n\n    const componentRef = useRef(null);\n    const mergedRef = useMergeRef(ref, componentRef);\n    const [delayedOpen, setDelayOpen] = useState(!defaultDelayOpen);\n    const overrideCloseAriaLabel = closeAriaLabel || TIPSEEN_CLOSE_BUTTON_ARIA_LABEL;\n\n    useEffect(() => {\n      let timeout: NodeJS.Timeout;\n      if (showDelay) {\n        timeout = setTimeout(() => {\n          setDelayOpen(true);\n        }, showDelay);\n      }\n      return () => {\n        clearTimeout(timeout);\n      };\n    }, [showDelay, setDelayOpen]);\n\n    const textColor = useMemo(() => {\n      return color === \"inverted\" ? \"onInverted\" : \"onPrimary\";\n    }, [color]);\n    const closeButtonColor = useMemo(() => {\n      if (closeButtonTheme === \"light\") {\n        return color === \"inverted\" ? ButtonColor.ON_INVERTED_BACKGROUND : ButtonColor.ON_PRIMARY_COLOR;\n      } else {\n        return closeButtonTheme;\n      }\n    }, [color, closeButtonTheme]);\n\n    const TipseenWrapper = ref || id ? \"div\" : Fragment;\n    const tooltipContent = (\n      <div>\n        <div className={cx(styles.tipseenHeader)}>\n          {hideCloseButton ? null : (\n            <IconButton\n              hideTooltip\n              className={cx(styles.tipseenCloseButton, {\n                [styles.dark]: closeButtonTheme === \"dark\" || closeButtonTheme === \"fixed-dark\"\n              })}\n              onClick={onClose}\n              size=\"xs\"\n              kind=\"tertiary\"\n              // @ts-ignore\n              color={closeButtonColor}\n              ariaLabel={overrideCloseAriaLabel}\n              icon={CloseSmall}\n            />\n          )}\n          <TipseenTitle text={title} className={cx(styles.tipseenTitle, titleClassName)} />\n        </div>\n        <Text color={textColor} type=\"text2\" element=\"p\" className={cx(styles.tipseenContent)}>\n          <TipseenContext.Provider value={color}>{content}</TipseenContext.Provider>\n        </Text>\n      </div>\n    );\n\n    return (\n      <TipseenWrapper ref={mergedRef} id={id} data-testid={dataTestId || getTestId(ComponentDefaultTestId.TIPSEEN, id)}>\n        <Tooltip\n          className={cx(styles.tipseenWrapper, className, {\n            [styles.tipseenWrapperWithoutCustomWidth]: !width,\n            [styles.floating]: floating\n          })}\n          arrowClassName={tooltipArrowClassName}\n          style={width ? { width } : undefined}\n          shouldShowOnMount={!defaultDelayOpen}\n          position={position}\n          animationType={animationType}\n          hideDelay={hideDelay}\n          showDelay={showDelay}\n          hideTrigger={hideTrigger}\n          showTrigger={showTrigger}\n          content={tooltipContent}\n          theme={color === \"inverted\" ? \"dark\" : \"primary\"}\n          containerSelector={containerSelector}\n          disableDialogSlide={false}\n          moveBy={moveBy}\n          hideWhenReferenceHidden={hideWhenReferenceHidden}\n          tip={tip && !floating}\n          modifiers={modifiers}\n          open={defaultDelayOpen ? delayedOpen : undefined}\n          forceRenderWithoutChildren={floating}\n        >\n          {children}\n        </Tooltip>\n      </TipseenWrapper>\n    );\n  }\n);\n\nexport default withStaticProps(Tipseen, {\n  closeButtonThemes: TipseenCloseButtonThemeEnum,\n  animationTypes: AnimationTypeEnum,\n  hideShowTriggers: HideShowEventEnum,\n  colors: TipseenColorEnum,\n  positions: TooltipPositionsEnum\n});\n"],"names":["TipseenContext","React","createContext","withStaticProps","forwardRef","_ref","ref","className","id","_ref$position","position","_ref$animationType","animationType","_ref$hideDelay","hideDelay","_ref$showDelay","showDelay","title","titleClassName","hideCloseButton","_ref$closeButtonTheme","closeButtonTheme","onClose","closeAriaLabel","_ref$children","children","content","containerSelector","_ref$hideTrigger","hideTrigger","_ref$showTrigger","showTrigger","width","moveBy","_ref$hideWhenReferenc","hideWhenReferenceHidden","_ref$tip","tip","tooltipArrowClassName","_ref$modifiers","modifiers","_ref$floating","floating","colorProp","color","dataTestId","defaultDelayOpen","Array","isArray","length","componentRef","useRef","mergedRef","useMergeRef","_useState","useState","_useState2","_slicedToArray","delayedOpen","setDelayOpen","overrideCloseAriaLabel","TIPSEEN_CLOSE_BUTTON_ARIA_LABEL","useEffect","timeout","setTimeout","clearTimeout","textColor","useMemo","closeButtonColor","ButtonColor","ON_INVERTED_BACKGROUND","ON_PRIMARY_COLOR","TipseenWrapper","Fragment","tooltipContent","createElement","cx","styles","tipseenHeader","IconButton","hideTooltip","tipseenCloseButton","_defineProperty","dark","onClick","size","kind","ariaLabel","icon","CloseSmall","TipseenTitle","text","tipseenTitle","Text","type","element","tipseenContent","Provider","value","getTestId","ComponentDefaultTestId","TIPSEEN","Tooltip","tipseenWrapper","tipseenWrapperWithoutCustomWidth","arrowClassName","style","undefined","shouldShowOnMount","theme","disableDialogSlide","open","forceRenderWithoutChildren","closeButtonThemes","TipseenCloseButtonThemeEnum","animationTypes","AnimationTypeEnum","hideShowTriggers","HideShowEventEnum","colors","TipseenColorEnum","positions","TooltipPositionsEnum"],"mappings":"iiCAoEO,IAAMA,EAAiBC,EAAMC,cAA4B,WAsIjDC,EAAAA,EA9HXC,GACF,SAAAC,EA6BEC,GACE,IA5BAC,EAASF,EAATE,UACAC,EAAEH,EAAFG,GAAEC,EAAAJ,EACFK,SAAAA,OAAW,IAAHD,EAAG,SAAQA,EAAAE,EAAAN,EACnBO,cAAAA,OAAgB,IAAHD,EAAG,SAAQA,EAAAE,EAAAR,EACxBS,UAAAA,OAAY,IAAHD,EAAG,EAACA,EAAAE,EAAAV,EACbW,UAAAA,OAAY,IAAHD,EAAG,IAAGA,EACfE,EAAKZ,EAALY,MACAC,EAAcb,EAAda,eACAC,EAAed,EAAfc,gBAAeC,EAAAf,EACfgB,iBAAAA,OAAmB,IAAHD,EAAG,QAAOA,EAC1BE,EAAOjB,EAAPiB,QACAC,EAAclB,EAAdkB,eAAcC,EAAAnB,EACdoB,SAAAA,OAAW,IAAHD,EAAG,KAAIA,EACfE,EAAOrB,EAAPqB,QACAC,EAAiBtB,EAAjBsB,kBAAiBC,EAAAvB,EACjBwB,YAAAA,OAAc,IAAHD,EAAG,GAAEA,EAAAE,EAAAzB,EAChB0B,YAAAA,OAAc,IAAHD,EAAG,GAAEA,EAChBE,EAAK3B,EAAL2B,MACAC,EAAM5B,EAAN4B,OAAMC,EAAA7B,EACN8B,wBAAAA,OAA0B,IAAHD,GAAQA,EAAAE,EAAA/B,EAC/BgC,IAAAA,OAAM,IAAHD,GAAOA,EACVE,GAAqBjC,EAArBiC,sBAAqBC,GAAAlC,EACrBmC,UAAAA,QAAY,IAAHD,GAAG,GAAEA,GAAAE,GAAApC,EACdqC,SAAAA,QAAW,IAAHD,IAAQA,GACTE,GAAStC,EAAhBuC,MACeC,GAAUxC,EAAzB,eAIIuC,GAAQD,SAAAA,GAAa,WAErBG,GACJC,MAAMC,QAAQjB,IAAgBgB,MAAMC,QAAQnB,IAAuC,IAAvBE,EAAYkB,QAAgBjC,EAAY,EAEhGkC,GAAeC,EAAO,MACtBC,GAAYC,EAAY/C,EAAK4C,IACnCI,GAAoCC,GAAUT,IAAiBU,GAAAC,EAAAH,GAAA,GAAxDI,GAAWF,GAAA,GAAEG,GAAYH,GAAA,GAC1BI,GAAyBrC,GAAkBsC,EAEjDC,GAAU,WACR,IAAIC,EAMJ,OALI/C,IACF+C,EAAUC,YAAW,WACnBL,IAAa,EACd,GAAE3C,IAEE,WACLiD,aAAaF,GAEjB,GAAG,CAAC/C,EAAW2C,KAEf,IAAMO,GAAYC,GAAQ,WACxB,MAAiB,aAAVvB,GAAuB,aAAe,WAC/C,GAAG,CAACA,KACEwB,GAAmBD,GAAQ,WAC/B,MAAyB,UAArB9C,EACe,aAAVuB,GAAuByB,EAAYC,uBAAyBD,EAAYE,iBAExElD,CAEX,GAAG,CAACuB,GAAOvB,IAELmD,GAAiBlE,GAAOE,EAAK,MAAQiE,EACrCC,GACJzE,EAAA0E,cAAA,MAAA,KACE1E,EAAA0E,cAAA,MAAA,CAAKpE,UAAWqE,EAAGC,EAAOC,gBACvB3D,EAAkB,KACjBlB,EAAC0E,cAAAI,GACCC,aAAW,EACXzE,UAAWqE,EAAGC,EAAOI,mBAAkBC,EACpCL,CAAAA,EAAAA,EAAOM,KAA4B,SAArB9D,GAAoD,eAArBA,IAEhD+D,QAAS9D,EACT+D,KAAK,KACLC,KAAK,WAEL1C,MAAOwB,GACPmB,UAAW3B,GACX4B,KAAMC,IAGVxF,EAAA0E,cAACe,EAAa,CAAAC,KAAM1E,EAAOV,UAAWqE,EAAGC,EAAOe,aAAc1E,MAEhEjB,EAAC0E,cAAAkB,GAAKjD,MAAOsB,GAAW4B,KAAK,QAAQC,QAAQ,IAAIxF,UAAWqE,EAAGC,EAAOmB,iBACpE/F,EAAA0E,cAAC3E,EAAeiG,SAAQ,CAACC,MAAOtD,IAAQlB,KAK9C,OACEzB,gBAACuE,GAAc,CAAClE,IAAK8C,GAAW5C,GAAIA,EAAiB,cAAAqC,IAAcsD,EAAUC,EAAuBC,QAAS7F,IAC3GP,EAAC0E,cAAA2B,EACC,CAAA/F,UAAWqE,EAAGC,EAAO0B,eAAgBhG,EAAS2E,EAAAA,EAAA,CAAA,EAC3CL,EAAO2B,kCAAoCxE,GAC3C6C,EAAOnC,SAAWA,KAErB+D,eAAgBnE,GAChBoE,MAAO1E,EAAQ,CAAEA,MAAAA,QAAU2E,EAC3BC,mBAAoB9D,GACpBpC,SAAUA,EACVE,cAAeA,EACfE,UAAWA,EACXE,UAAWA,EACXa,YAAaA,EACbE,YAAaA,EACbL,QAASgD,GACTmC,MAAiB,aAAVjE,GAAuB,OAAS,UACvCjB,kBAAmBA,EACnBmF,oBAAoB,EACpB7E,OAAQA,EACRE,wBAAyBA,EACzBE,IAAKA,IAAQK,GACbF,UAAWA,GACXuE,KAAMjE,GAAmBY,QAAciD,EACvCK,2BAA4BtE,IAE3BjB,GAIT,IAGsC,CACtCwF,kBAAmBC,EACnBC,eAAgBC,EAChBC,iBAAkBC,EAClBC,OAAQC,EACRC,UAAWC"}